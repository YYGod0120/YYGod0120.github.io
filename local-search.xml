<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Tree-Shaking</title>
    <link href="/2023/11/08/Tree-Shaking/"/>
    <url>/2023/11/08/Tree-Shaking/</url>
    
    <content type="html"><![CDATA[<p>这周一，在 b 站上看到了辟殊大佬在重庆前端交流会上发布的演讲，关于 Rust 在前端构建高性能前端打包工具的主题，其中提到他们在阿里内部使用 Rust 开发打包工具的时候遇到的问题——TreeShaking 的依赖循环问题<br>要解决这个问题,首先还是得去了解清楚什么是 TreeShaking 以及背后得原理</p><h1 id="什么是-TreeShaking"><a href="#什么是-TreeShaking" class="headerlink" title="什么是 TreeShaking"></a>什么是 TreeShaking</h1><p>Tree-Shaking 是一种基于 <strong>ES Module</strong> 规范的 <strong>Dead Code Elimination</strong> 技术，它会在运行过程中静态分析模块之间的导入导出，确定 ESM 模块中哪些导出值未曾其它模块使用，并将其删除，以此实现打包产物的优化。</p><p>在 CommonJS,AMD,CMD 等旧版本得 javascript 模块化方案中,导入导出是动态的,难以预测</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (a === <span class="hljs-string">&quot;import&quot;</span>) &#123;<br>  <span class="hljs-keyword">let</span> _fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>); <span class="hljs-comment">//CommonJS导入可以在判断中</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而 ESM 方案则从规范层面规避这一行为，它要求所有的导入导出语句只能出现在模块顶层，且导入导出的模块名必须为字符串常量<br>所以，ESM 下模块之间的依赖关系是高度确定的，与运行状态无关，编译工具只需要对 ESM 模块做静态分析，就可以从代码字面量中推断出哪些模块值未曾被其它模块使用，这是实现 Tree Shaking 技术的必要条件。</p><blockquote><p>具体 CommonJS 和 ES6 模块导入的区别,可以看我另外一篇 ES6 的文章</p></blockquote><h1 id="TreeShaking-的作用"><a href="#TreeShaking-的作用" class="headerlink" title="TreeShaking 的作用"></a>TreeShaking 的作用</h1><p>简单来说:TreeShaking 就是「标记」导出值是否被使用,然后通过<code>Terser</code>、<code>UglifyJS</code> 等 <code>DCE</code> 工具删掉这些没被使用的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//App.js</span><br><span class="hljs-keyword">import</span> &#123; cube &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./utils.js&quot;</span>;<br><span class="hljs-title function_">cube</span>(<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//utils.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;square&quot;</span>);<br>  <span class="hljs-keyword">return</span> x * x;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">cube</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;cube&quot;</span>);<br>  <span class="hljs-keyword">return</span> x * x * x;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>result</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span>(<span class="hljs-params">e, t, r</span>) &#123;<br>  <span class="hljs-string">&quot;use strict&quot;</span>;<br>  r.<span class="hljs-title function_">r</span>(t), <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;cube&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>但是 TreeShaking 不会删除 IIFE 以及有副作用的函数:</p><ul><li><strong>IIFE</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//App.js</span><br><span class="hljs-keyword">import</span> &#123; cube &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./utils.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">cube</span>(<span class="hljs-number">2</span>));<br><br><span class="hljs-comment">//utils.js</span><br><span class="hljs-keyword">var</span> square = (<span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;square&quot;</span>);<br>&#125;)();<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">cube</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;cube&quot;</span>);<br>  <span class="hljs-keyword">return</span> x * x * x;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>result</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span>(<span class="hljs-params">e, t, n</span>) &#123;<br>  <span class="hljs-string">&quot;use strict&quot;</span>;<br>  n.<span class="hljs-title function_">r</span>(t);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;square&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;cube&quot;</span>), e * e * e<br>  &#125;(<span class="hljs-number">2</span>))<br>&#125;<br><br></code></pre></td></tr></table></figure><p>原因很简单:因为 IIFE 比较特殊，它在被翻译时(JS 并非编译型的语言)就会被执行，Webpack 不做程序流分析，它不知道 IIFE 会做什么特别的事情，所以不会删除这部分代码</p><ul><li><strong>副作用</strong></li></ul><p>副作用（side effect）的定义是，在导入时会执行特殊行为的代码，而不是仅仅暴露一个 export 或多个 export。例如 polyfill，它影响全局作用域，因而存在副作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/math.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> x * x;<br>&#125;<br>​<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">cube</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> x * x * x;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">square</span>(<span class="hljs-number">10</span>));<br>​<br><span class="hljs-comment">// src/index.js</span><br><span class="hljs-keyword">import</span> &#123; cube &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./math.js&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">cube</span>(<span class="hljs-number">5</span>));<br><br></code></pre></td></tr></table></figure><p><strong>result</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> r ,<br>    e = &#123;<br>        <span class="hljs-string">&quot;./src/math.js&quot;</span>: <span class="hljs-function">(<span class="hljs-params">r, e，o</span>)=&gt;</span> &#123;<br>            <span class="hljs-keyword">function</span> <span class="hljs-title function_">t</span>(<span class="hljs-params">r</span>)&#123;<br>                <span class="hljs-keyword">return</span> r *r *r;<br>            &#125;<br>            o.<span class="hljs-title function_">d</span>(e, &#123; <span class="hljs-attr">cube</span>: <span class="hljs-function">()=&gt;</span>t &#125;),<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">10</span> *<span class="hljs-number">10</span>);&#125;,<br>    &#125;<br></code></pre></td></tr></table></figure><p>但对付一些是副作用但是可以被删除的代码,你可以<code>/*#__PURE__*/ </code>来注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/math.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> x * x;<br>&#125;<br>​<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">cube</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> x * x * x;<br>&#125;<br><span class="hljs-comment">/*#__PURE__*/</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">square</span>(<span class="hljs-number">10</span>));<br><br></code></pre></td></tr></table></figure><p><strong>result</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> r ,<br>    e = &#123;<br>        <span class="hljs-string">&quot;./src/math.js&quot;</span>: <span class="hljs-function">(<span class="hljs-params">r, e，o</span>)=&gt;</span> &#123;<br>            <span class="hljs-keyword">function</span> <span class="hljs-title function_">t</span>(<span class="hljs-params">r</span>)&#123;<br>                <span class="hljs-keyword">return</span> r *r *r;<br>            &#125;<br>            t.<span class="hljs-title function_">d</span>(e, &#123; <span class="hljs-attr">cube</span>: <span class="hljs-function">()=&gt;</span>t &#125;)&#125;,<br>    &#125;<br></code></pre></td></tr></table></figure><p>或者你也可以选择在<code>package.json</code>文件中用<code>sideEffects</code>标记不存在副作用的内容文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// package.json</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;your-project&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sideEffects&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;./src/some-side-effectful-file.js&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="TreeShaking-的原理"><a href="#TreeShaking-的原理" class="headerlink" title="TreeShaking 的原理"></a>TreeShaking 的原理</h1><p>上面说到 TreeShaking 实现是通过标记文件然后再删除,标记的步骤主要分为两步:</p><ul><li>Make 阶段，收集模块导出变量并记录到模块依赖关系图 <code>ModuleGraph</code> 变量中</li><li>Seal 阶段，遍历 <code>ModuleGraph</code> 标记模块导出变量有没有被使用</li><li>生成代码阶段</li></ul><h2 id="Make-阶段"><a href="#Make-阶段" class="headerlink" title="Make 阶段"></a>Make 阶段</h2><p>首先，Webpack 需要弄清楚每个模块分别有什么导出值，这一过程发生在 make 阶段</p><ol><li>将模块的所有 <code>ESM</code> 导出语句转换为 <code>Dependency</code> 对象，并记录到 <code>module</code> 对象的 <code>dependencies</code> 集合，转换规则：<ul><li>具名导出转换为 <code>HarmonyExportSpecifierDependency</code> 对象</li><li>default 导出转换为 <code>HarmonyExportExpressionDependency</code> 对象</li></ul></li><li>所有模块都编译完毕后，触发<code>compilation.hooks.finishModules</code>钩子，开始执行 <code>FlagDependencyExportsPlugin</code> 插件回调</li><li><code>FlagDependencyExportsPlugin</code> 插件从 <code>entry</code> 开始读取 <code>ModuleGraph</code> 中存储的模块信息，遍历所有 <code>module</code> 对象</li><li>遍历 <code>module</code> 对象的 <code>dependencies</code> 数组，找到所有 <code>HarmonyExportXXXDependency</code> 类型的依赖对象，将其转换为 <code>ExportInfo</code> 对象并记录到 <code>ModuleGraph</code> 体系中</li></ol><p>经过 <code>FlagDependencyExportsPlugin</code> 插件处理后，所有 ESM 风格的 export 语句都会记录在 <code>ModuleGraph</code> 体系内，后续操作就可以从 <code>ModuleGraph</code> 中直接读取出模块的导出值。</p><h2 id="Seal-阶段"><a href="#Seal-阶段" class="headerlink" title="Seal 阶段"></a>Seal 阶段</h2><p>然后,收集完模块导出信息后,Webpack 需要标记出各个模块的导出列表中，哪些导出值有被其它模块用到，哪些没有，这一过程发生在 Seal 阶段</p><ol><li>触发 <code>compilation.hooks.optimizeDependencies</code> 钩子，开始执行 <code>FlagDependencyUsagePlugin</code> 插件逻辑</li><li>在 <code>FlagDependencyUsagePlugin</code> 插件中，从 <code>entry</code> 开始逐步遍历 <code>ModuleGraph</code> 存储的所有 <code>module</code> 对象</li><li>遍历 <code>module</code> 对象对应的 <code>exportInfo</code> 数组</li><li>为每一个 <code>exportInfo</code> 对象执行 <code>compilation.getDependencyReferencedExports</code> 方法，确定其对应的 dependency 对象有否被其它模块使用</li><li>被任意模块使用到的导出值，调用 <code>exportInfo.setUsedConditionally</code> 方法将其标记为已被使用。</li><li><code>exportInfo.setUsedConditionally</code> 内部修改 <code>exportInfo._usedInRuntime</code> 属性，记录该导出被如何使用</li></ol><p>上面是极度简化过的版本，中间还存在非常多的分支逻辑与复杂的集合操作，我们抓住重点：标记模块导出这一操作集中在 <code>FlagDependencyUsagePlugin</code> 插件中，执行结果最终会记录在模块导出语句对应的 <code>exportInfo._usedInRuntime</code> 字典中。</p><h2 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h2><p>经过前面的收集与标记步骤后，Webpack 已经在 <code>ModuleGraph</code> 体系中清楚地记录了每个模块都导出了哪些值，每个导出值又没那块模块所使用。接下来，Webpack 会根据导出值的使用情况生成不同的代码<br>大体的流程：</p><ol><li>打包阶段，调用 <code>HarmonyExportXXXDependency.Template.apply</code> 方法生成代码</li><li>在 <code>apply</code> 方法内，读取 <code>ModuleGraph</code> 中存储的 <code>exportsInfo</code> 信息，判断哪些导出值被使用，哪些未被使用</li><li>对已经被使用及未被使用的导出值，分别创建对应的 <code>HarmonyExportInitFragment</code> 对象，保存到 <code>initFragments</code> 数组</li><li>遍历 <code>initFragments</code> 数组，生成最终结果</li></ol><p>基本上，这一步的逻辑就是用前面收集好的 exportsInfo 对象未模块的导出值分别生成导出语句</p><h2 id="删除代码"><a href="#删除代码" class="headerlink" title="删除代码"></a>删除代码</h2><p>经过前面几步操作之后，模块导出列表中未被使用的值都不会定义在 <strong>webpack_exports</strong> 对象中，形成一段不可能被执行的 <code>Dead Code</code> 效果<br>在此之后，将由 Terser、UglifyJS 等 DCE 工具“摇”掉这部分无效代码，构成完整的 Tree Shaking 操作。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>综上所述，Webpack 中 Tree Shaking 的实现分为如下步骤：</p><ul><li>在 <code>FlagDependencyExportsPlugin</code> 插件中根据模块的 dependencies 列表收集模块导出值，并记录到 <code>ModuleGraph</code> 体系的 <code>exportsInfo</code> 中</li><li>在 <code>FlagDependencyUsagePlugin</code> 插件中收集模块的导出值的使用情况，并记录到 <code>exportInfo._usedInRuntime</code> 集合中</li><li>在 <code>HarmonyExportXXXDependency.Template.apply</code> 方法中根据导出值的使用情况生成不同的导出语句</li><li>使用 <code>DCE</code> 工具删除 <code>Dead Code</code>，实现完整的树摇效果</li></ul><p>但上述原理过程中提到大量的 webpack 核心原理中的概念和知识点,需要对 webpack 的核心流程有一点了解<br>推荐文档:<br><a href="https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&mid=2247483744&idx=1&sn=d7128a76eed20746cd8c5100f0899138&scene=21#wechat_redirect">[万字总结] 一文吃透 Webpack 核心原理</a><br><a href="https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&mid=2247483743&idx=1&sn=0ce0845ee3e5316bcac05993035de3ed&scene=21#wechat_redirect">有点难的 webpack 知识点：Dependency Graph 深度解析</a><br><a href="https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&mid=2247484088&idx=1&sn=41bf509a72f2cbcca1521747bf5e28f4&scene=21#wechat_redirect">Webpack 原理系列六： 彻底理解 Webpack 运行时</a></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://cloud.tencent.com/developer/article/1916421">Webpack 原理系列九：Tree-Shaking 实现原理</a><br><a href="https://juejin.cn/post/7030727223602905119#heading-3">Tree-shaking 详解</a><br><a href="https://juejin.cn/post/6844903687412776974">Webpack Tree shaking 深入探究</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务端组件vs客户端组件</title>
    <link href="/2023/11/06/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BB%84%E4%BB%B6vs%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BB%84%E4%BB%B6/"/>
    <url>/2023/11/06/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BB%84%E4%BB%B6vs%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>什么 Next14,我只看到了 PHP</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上上周，Vercel 推出了重磅的 NEXT14。作为 React 中的 NO.1，React 官方都推荐的 React 框架，SSR 的最佳实践者——NEXTJS 把魔爪伸向了后端</p><p>这次 NEXTJS14 大版本主要做了三个大事</p><p>第一个是优化了 Turbopack,带来了大幅的性能提升，在 app router 和 page router 中通过了 5000 个测试：</p><ul><li>本地启动服务器时间快了约 50%</li><li>热模块替换速度快了约 94%</li></ul><p>但是并非所有的测试都通过了，还有 10%的测试还没通过，所以 Turbopack 属于是不稳定的阶段</p><p>第二个就是引起热烈讨论的 php 化的 Server Actions 标记为稳定</p><ul><li>集成了缓存和重新验证</li><li>简单的函数调用，与表单原生配合使用</li></ul><p>第三个就是部分预渲染(预览版)，这部分内容还属于不完全阶段，预计在下几个小版本慢慢完善</p><ul><li>Suspense(流式渲染)：可以在 NEXT14 中使用，具体的可以参看官方的教程</li></ul><p>剩下的内容就是一些杂项，包括推出了最新的 NEXT 教程以及一些 bug 的修复</p><hr><p><strong>回归到重点！！</strong><br>很多人觉得 NEXTJS 推行的服务器操作完全就是越来越退化，从前后端分离又回到前后端耦合，属于是 php2.0。<br>但我觉得 NEXT 作为一个主打服务端渲染的框架，就是想进一步优化这种服务端组件的渲染，更好的在前端直接获取到数据库数据，进行数据库的操作，减轻客户端的渲染压力，进一步的优化 WEB 应用<br>至于安全性，有人说好有人说不行，具体的我也不太清楚，这里就不多说</p><p>重点是在之前了解 NEXTJS 的时候，压根就没有服务端组件和客户端组件的概念，对 SSR(服务端渲染)也是一知半解<br>所以我看了几篇文章，加上一些自己的理解，记录一下</p><h1 id="服务端组件"><a href="#服务端组件" class="headerlink" title="服务端组件"></a>服务端组件</h1><h2 id="什么是服务端组件"><a href="#什么是服务端组件" class="headerlink" title="什么是服务端组件"></a>什么是服务端组件</h2><p>服务端组件就是在服务端渲染的组件，NEXT 框架下的 APP 目录下的组件都默认为服务端组件</p><h2 id="服务端组件-SSR-的优势"><a href="#服务端组件-SSR-的优势" class="headerlink" title="服务端组件(SSR)的优势"></a>服务端组件(SSR)的优势</h2><ul><li>便于直接和服务器数据打交道，不需要客户端额外进行渲染，加快数据的获取</li><li>安全性高，渲染直接在服务器上执行，不会有暴露敏感令牌或者密钥的风险</li><li>加载速度快，服务端渲染的结果可以进行缓存，多次请求一个页面可以加快返回，不用重新渲染，对于一些大型库和框架，在服务器上跑的时间大大小于客户端，加快加速</li><li>初始页面和首次内容绘制快，服务端渲染的页面可以直接返回可见的内容，而客户端的需要等待 js 执行完毕</li><li>有助于搜索引擎的优化，服务端渲染会提供完整的 HTML，有助于爬虫的爬取，提高 SEO 排名</li></ul><h2 id="服务端组件的缺点"><a href="#服务端组件的缺点" class="headerlink" title="服务端组件的缺点"></a>服务端组件的缺点</h2><ul><li>无法进行交互，无法添加事件监听器</li><li>无法使用 React 的状态和生命周期效果(useState(),useReducer(),useEffect())</li><li>无法使用浏览器专用 API</li><li>无法使用依赖 React 的状态和生命周期效果的自定义钩子</li><li>无法使用 React 类组件</li></ul><h2 id="服务端组件的渲染方式"><a href="#服务端组件的渲染方式" class="headerlink" title="服务端组件的渲染方式"></a>服务端组件的渲染方式</h2><ol><li><p>静态渲染(默认)<br>NextJS v13 的服务端组件默认是静态渲染<br>它会在构建的时候进行渲染，或者数据重新验证后在渲染。<br>渲染的结果会被缓存，推送到内容分发网络(CDN)</p></li><li><p>动态渲染<br>渲染过程中，如果 NextJS 发现有动态函数或未缓存的数据请求，会自动切换为动态渲染整个路由。<br>动态渲染的一个特点就是数据不会被缓存，一更新马上重新渲染。<br>动态函数依赖于只能在请求时知道的信息，如用户的 cookie、当前请求头或 URL 的搜索参数。</p></li><li><p>流式渲染<br>这个是 NEXTJS14 重磅推出的一种渲染方式：它会将一个页面上的组件分成几块以流式传输到客户端，这样就能在页面完全呈现前就能看到页面预览<br>比如说一个组件获取数据慢于其他组件，使用流式渲染就不会阻塞整个页面<br>使用<code>loading.js</code>对路由段进行流式处理，<code>React Suspense</code>对 UI 组件进行流式处理</p></li></ol><h1 id="客户端组件"><a href="#客户端组件" class="headerlink" title="客户端组件"></a>客户端组件</h1><p>如果要使用客户端组件，只需要在组件开头添加 “use client”指令。</p><h2 id="客户端组件的优势"><a href="#客户端组件的优势" class="headerlink" title="客户端组件的优势"></a>客户端组件的优势</h2><ul><li>交互性： 客户端组件可以使用状态、效果和事件监听器，这意味着它们可以向用户提供即时反馈并更新用户界面。</li><li>浏览器 API：客户端组件可以访问浏览器 API，如 window，从而为特定用例构建用户界面。</li></ul><h2 id="客户端组件的渲染"><a href="#客户端组件的渲染" class="headerlink" title="客户端组件的渲染"></a>客户端组件的渲染</h2><p>客户端组件的渲染取决于你的请求是整个页面加载(首屏或者刷新)还是后续导航中的一部分</p><h3 id="整页加载"><a href="#整页加载" class="headerlink" title="整页加载"></a>整页加载</h3><p>为了优化初始页面加载，Next.js 将使用 React 的 API 在服务器上为客户端和服务器组件呈现静态 HTML 预览。这意味着，当用户首次访问您的应用程序时，他们将立即看到页面的内容，而无需等待客户端下载、解析和执行客户端组件 JavaScript 包。<br>随后 NEXT 再进行水合(将事件侦听器附加到 DOM 的过程，以使静态 HTML 具有交互性。)</p><h3 id="后续导航"><a href="#后续导航" class="headerlink" title="后续导航"></a>后续导航</h3><p>在后续导航中，客户端组件完全在客户端上呈现，而不使用服务器呈现的 HTML。这意味着客户端组件 JavaScript 捆绑包已下载并解析。一旦捆绑包准备就绪，React 将使用 RSC Payload 来协调客户端和服务器组件树，并更新 DOM。</p><h1 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h1><p>NEXT 推荐混合使用客户端组件和服务端组件</p><p>注意事项：</p><ul><li>将仅限服务器的代码排除在客户端环境之外</li><li>将第三方包包装在客户端组件中然后再导出到服务端组件</li><li>向下迁移客户端组件，颗粒化客户端组件</li><li>将 props 从服务器传递到客户端组件（序列化）</li><li>不能将服务器组件导入到客户端组件</li><li>可以将服务器组件作为 props 传递给客户端组件</li></ul><p>具体的可以查看官方介绍<a href="https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns#keeping-server-only-code-out-of-the-client-environment">混合模式</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>服务端组件性能好，但是局限多<br>客户端组件性能差，但是使用操作丰富，更客制化<br>充分结合才是真正的 NEXTJS</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://juejin.cn/post/7272270987256397876?searchId=20231106202552A67B22CA13F1A91757BC#heading-18">NextJS v13 服务端组件和客户端组件及最佳实践</a><br><a href="https://juejin.cn/post/7297049953229766690?searchId=202311062020051DA2D09DCD7F6D1D1320">大家都在嘲笑 Next.js14</a><br><a href="https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns#keeping-server-only-code-out-of-the-client-environment">官方文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>NEXTJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈npm和yarn以及pnpm</title>
    <link href="/2023/11/02/%E6%B5%85%E8%B0%88npm%E5%92%8Cyarn%E4%BB%A5%E5%8F%8Apnpm/"/>
    <url>/2023/11/02/%E6%B5%85%E8%B0%88npm%E5%92%8Cyarn%E4%BB%A5%E5%8F%8Apnpm/</url>
    
    <content type="html"><![CDATA[<h1 id="老大哥-npm"><a href="#老大哥-npm" class="headerlink" title="老大哥 npm"></a>老大哥 npm</h1><p>NPM 是最初由 Node.js 项目开发的 JavaScript 包管理器。它使开发人员能够更轻松地在不同项目之间共享代码，并在自己的项目中使用其他人的代码。</p><h2 id="npm-v2"><a href="#npm-v2" class="headerlink" title="npm v2"></a>npm v2</h2><p>一开始的 npm 是通过对包文件的依赖一个一个递归分析，然后多次重复下载，就导致大量重复的包文件。<br>这样就会导致下载慢，文件路径过长，占用空间多等问题</p><h2 id="npm-v3"><a href="#npm-v3" class="headerlink" title="npm v3"></a>npm v3</h2><p>这个版本就不再是一个一个递归分析，而是采取扁平化，然后进行下载<br>但是这样的扁平化下载时间依旧很长</p><h2 id="npm-v5"><a href="#npm-v5" class="headerlink" title="npm v5"></a>npm v5</h2><blockquote><p>package-lock.json 它会在 npm 更改 node_modules 目录树 或者 package.json 时自动生成的</p></blockquote><p>为了解决上面那个问题，npm v5 提供了一个 package-lock.json 机制<br>简单来说，package-lock 能够提供一份项目准确版本的依赖树<br>一来能够锁定项目依赖的版本，增加项目稳定性，在项目部署，多人开发中保证项目依赖的版本精准<br>二来能避免下载不同版本的依赖，从而避免多次下载和不必要的更新</p><h1 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h1><p>yarn 提出的时候解决的问题其实是 npm v5 解决的问题，也是利用 lock 文件来进行锁定版本等功能<br>yarn 和 npm 的一个区别是，yarn 能够离线安装本地缓存的依赖，而 yarn 不行</p><p>但仅此还是感觉 yarn 和 npm 的区别并不是很大</p><h1 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h1><p>pnpm 对于 yarn 和 npm 有很大的提升，特别是在磁盘占用和下载时间</p><p>pnpm 内部使用基于内容寻址的文件系统来存储磁盘上所有的文件，这样可以做到不会出现重复安装，在项目中需要使用到依赖的时候，pnpm 只会安装一次，之后再次使用都会直接硬链接指向该依赖，极大节省磁盘空间，并且加快安装速度</p><blockquote><p>硬链接是多个文件名指向同一个文件的实际内容，而软链接（符号链接）是一个独立的文件，指向另一个文件或目录的路径</p></blockquote><p>pnpm 是默认支持 monorepo 多项目管理<br>具体的可以看<a href="https://pnpm.io/zh/workspaces">工作空间</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>yarn 和 npm 基本上没啥区别，能采用 pnpm 就尽量使用 pnpm。<br>磁盘占用少和下载时间快就足够替代 yarn 和 npm 了</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://juejin.cn/post/7286362110211489855?searchId=20231102215937FB5260E0F435F23EF815#heading-4">pnpm、npm、yarn 包管理工具『优劣对比』及『环境迁移』</a><br><a href="https://juejin.cn/post/7269352663258759205?searchId=2023110222201709EA544B078BD246C2ED">为什么要使用 package-lock.json?</a><br><a href="https://juejin.cn/post/7078233610683170824?searchId=2023110222201709EA544B078BD246C2ED#heading-6">package.json 与 package-lock.json 的关系</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>∠痛局</title>
    <link href="/2023/10/24/%E2%88%A0%E7%97%9B%E5%B1%80/"/>
    <url>/2023/10/24/%E2%88%A0%E7%97%9B%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="丰都县交通局"><a href="#丰都县交通局" class="headerlink" title="丰都县交通局"></a>丰都县交通局</h1><blockquote><p>记得下次好好评审项目以及拉黑胡*</p></blockquote><p><a href="http://47.108.56.37:8080/">项目地址</a><br>市民端：账 123456 密 123456</p><h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h2><p>一个基本的后台管理，但是内容极其恶心，既要打车又要货拉拉还要 12306 买票</p><p>最恶心的就是没有正规的 12306，都是自己爬的接口用。<del>不会被抓吧</del></p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ol><li>React + Vite + arcodesign</li><li>tailwind</li><li>recoil</li><li>moment</li></ol><p>属于是只用上了基本的东西</p><h2 id="负责模块"><a href="#负责模块" class="headerlink" title="负责模块"></a>负责模块</h2><ol><li>布局以及侧边栏</li><li>信息栏的用户端以及管理端</li><li>权限管理端</li></ol><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><p>这个项目采用的是文件路由的方式，类似于 Next.js 的文件路由<br>所以通过将文件也就是路由扁平化，递归判断是否为父文件还是子文件来进行侧边栏渲染<br>通过权限判断一些选项是否渲染，从而达到隐藏的作用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//文件路由实现</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">layout</span>: <span class="hljs-title class_">Record</span>&lt;string, <span class="hljs-variable constant_">FC</span>&lt;any&gt; | <span class="hljs-literal">null</span>&gt; = &#123;<br>  <span class="hljs-attr">default</span>: <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Layout</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;&gt;</span>&#123;props.children&#125;<span class="hljs-tag">&lt;/&gt;</span></span><br>    &lt;/<span class="hljs-title class_">Layout</span>&gt;<br>  ),<br>  <span class="hljs-attr">login</span>: <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>&#123;props.children&#125;<span class="hljs-tag">&lt;/&gt;</span></span>,<br>  <span class="hljs-attr">systemManage</span>: <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Layout</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SystemLayout</span>&gt;</span>&#123;props.children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">SystemLayout</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Layout</span>&gt;</span></span><br>  ),<br>  <span class="hljs-attr">companyManage</span>: <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Layout</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">CompanyLayout</span>&gt;</span>&#123;props.children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">CompanyLayout</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Layout</span>&gt;</span></span><br>  ),<br>&#125;;<br>layout;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">routeModule</span>: <span class="hljs-title class_">Record</span>&lt;number, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable constant_">JSX</span>.<span class="hljs-property">Element</span>&gt; = <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-title function_">glob</span>(<br>  <span class="hljs-string">&quot;./routes/**/*.tsx&quot;</span>,<br>  &#123;<br>    <span class="hljs-attr">eager</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">import</span>: <span class="hljs-string">&quot;default&quot;</span>,<br>  &#125;,<br>);<br><span class="hljs-keyword">const</span> modules = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(routeModule);<br><span class="hljs-keyword">const</span> pathRegExp = <span class="hljs-regexp">/\.\/routes(.*).tsx/</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">defaultRoutes</span>: <span class="hljs-title class_">RouteObject</span>[] = modules<br>  .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">[path]</span>) =&gt;</span> !path.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;children&quot;</span>))<br>  .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> [path, <span class="hljs-title class_">Element</span>] = v;<br>    <span class="hljs-keyword">const</span> pathLike = path.<span class="hljs-title function_">replace</span>(pathRegExp, <span class="hljs-string">&quot;$1&quot;</span>);<br>    <span class="hljs-keyword">let</span> routePath = <span class="hljs-regexp">/\/index/</span>.<span class="hljs-title function_">test</span>(pathLike)<br>      ? pathLike.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\/index/</span>, <span class="hljs-string">&quot;&quot;</span>)<br>      : pathLike;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/\[\w+\]/</span>.<span class="hljs-title function_">test</span>(pathLike)) &#123;<br>      <span class="hljs-keyword">const</span> slug = pathLike.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/.*\[(\w+)\]/</span>, <span class="hljs-string">&quot;$1&quot;</span>);<br>      routePath = pathLike.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\[\w+\]/</span>, <span class="hljs-string">`:<span class="hljs-subst">$&#123;slug&#125;</span>`</span>);<br>    &#125;<br>    <span class="hljs-comment">// console.log(path.split(&quot;/&quot;).filter(Boolean));</span><br>    <span class="hljs-keyword">const</span> [, , login, key] = path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;/&quot;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Boolean</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Layout</span> = layout[key];<br>    <span class="hljs-title class_">Layout</span> ??= layout[<span class="hljs-string">&quot;default&quot;</span>];<br>    <span class="hljs-comment">// console.log(login);</span><br>    <span class="hljs-keyword">if</span> (login === <span class="hljs-string">&quot;login&quot;</span>) &#123;<br>      <span class="hljs-title class_">Layout</span> = layout[<span class="hljs-string">&quot;login&quot;</span>];<br>    &#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">route</span>: <span class="hljs-title class_">RouteObject</span> = &#123;<br>      <span class="hljs-attr">path</span>: routePath,<br>      <span class="hljs-attr">element</span>: <span class="hljs-title class_">Layout</span> ? (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Layout</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Element</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Layout</span>&gt;</span></span><br>      ) : (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Element</span> /&gt;</span></span><br>      ),<br>      <span class="hljs-attr">errorElement</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NotFoundPage</span> /&gt;</span></span>,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> route;<br>  &#125;);<br><span class="hljs-keyword">const</span> childrenRoutes = <span class="hljs-title function_">createChildren</span>(routeModule);<br><span class="hljs-keyword">const</span> &#123; children = [] &#125; = <span class="hljs-title function_">childrenToArray</span>(childrenRoutes);<br>defaultRoutes.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">v1</span>) =&gt;</span> &#123;<br>  children.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">v2</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (v1.<span class="hljs-property">path</span>?.<span class="hljs-title function_">endsWith</span>(v2.<span class="hljs-property">path</span>!)) v1.<span class="hljs-property">children</span> = v2.<span class="hljs-property">children</span>;<br>  &#125;);<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">routes</span>: <span class="hljs-title class_">RouteObject</span>[] = [...defaultRoutes];<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createHashRouter</span>(routes);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">///侧边栏渲染</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Side</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [selectKey, setSelectKey] = useState&lt;string[]&gt;([])<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">renderMenu</span>(<span class="hljs-params"></span><br><span class="hljs-params">    routes: IRoutes[],</span><br><span class="hljs-params">    menu: MenuType,</span><br><span class="hljs-params">    routerFather: string,</span><br><span class="hljs-params">    isFirstSubmenu: boolean,</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-keyword">return</span> routes.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">route</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> key = routerFather<br>        ? <span class="hljs-string">`<span class="hljs-subst">$&#123;routerFather&#125;</span>.<span class="hljs-subst">$&#123;route.RouterFather&#125;</span>`</span><br>        : <span class="hljs-string">`menu.<span class="hljs-subst">$&#123;route.RouterFather&#125;</span>`</span>;<br>      <span class="hljs-keyword">const</span> path = key<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^menu\./</span>, <span class="hljs-string">&quot;&quot;</span>)<br>        .<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>)<br>        .<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;/&quot;</span>);<br>      <span class="hljs-keyword">if</span> (route.<span class="hljs-property">RoutesChildren</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// console.log(route.RouterFather!);</span><br>        <span class="hljs-keyword">return</span> (<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SubMenu</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;showSystem(localStorage.getItem(</span>&#x27;<span class="hljs-attr">role</span>&#x27;)!)<span class="hljs-attr">.includes</span>(<span class="hljs-attr">key</span>) ? <span class="hljs-attr">undefined</span> <span class="hljs-attr">:</span> &#123; <span class="hljs-attr">display:</span> &#x27;<span class="hljs-attr">none</span>&#x27; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;key&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">isFirstSubmenu</span> ? (</span></span><br><span class="hljs-tag"><span class="language-xml">                &lt;<span class="hljs-attr">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex items-center&quot;</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-3 h-3 bg-circle rounded-full mr-4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; &quot;</span>&gt;</span>&#123;menu[key]&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">              ) : (</span><br><span class="language-xml">                menu[key]</span><br><span class="language-xml">              )</span><br><span class="language-xml">            &#125;</span><br><span class="language-xml">          &gt;</span><br><span class="language-xml">            &#123;renderMenu(route.RoutesChildren as IRoutes[], menu, key, false)&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">SubMenu</span>&gt;</span></span><br>        );<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Menu.Item</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;key&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;showSystem(localStorage.getItem(</span>&#x27;<span class="hljs-attr">role</span>&#x27;)!)<span class="hljs-attr">.includes</span>(<span class="hljs-attr">key</span>) ? <span class="hljs-attr">undefined</span> <span class="hljs-attr">:</span> &#123; <span class="hljs-attr">display:</span> &#x27;<span class="hljs-attr">none</span>&#x27; &#125;&#125; <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">            setSelectKey([key])</span><br><span class="language-xml">          &#125;&#125;&gt;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>&quot;/&quot; + <span class="hljs-attr">path</span>&#125; <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">color:</span> &quot;#<span class="hljs-attr">424B5E99</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">              &#123;menu[key]&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Menu.Item</span>&gt;</span></span><br>        );<br>      &#125;<br>    &#125;);<br>  &#125;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">Routes</span> = <span class="hljs-title function_">splitRoutes</span>(menu);<br>  <span class="hljs-keyword">const</span> url = <span class="hljs-title function_">useLocation</span>();<br>  <span class="hljs-comment">// if(url.pathname.startsWith(&#x27;/reservation/user&#x27;))&#123;</span><br>  <span class="hljs-comment">//   const key = [&#x27;menu.reservation.&#x27;]</span><br>  <span class="hljs-comment">// &#125;</span><br><br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-white overflow-hidden overflow-y-scroll hide-scrollbar h-[92vh]&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Menu</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">levelIndent</span>=<span class="hljs-string">&#123;30&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">selectedKeys</span>=<span class="hljs-string">&#123;selectKey&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">defaultOpenKeys</span>=<span class="hljs-string">&#123;url.pathname.split(</span>&#x27;/&#x27;)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        &#123;renderMenu(Routes, menu, &quot;&quot;, true)&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Menu</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>方便，不需要编写路由表，只需要创建文件就会自动生成对应路由。</li><li>后期渲染侧边栏的 menu 文件相比路由表配置起来也简单</li></ol><p>缺点：</p><ol><li>文件一创建就会生成路由，先前通过文件渲染侧边栏就会导致不想渲染的子路由也出现在侧边栏。<br>解决方案是通过 menu 配置进行筛选渲染，但是如此一来就和配置路由表大差不差。</li></ol><p>总结就是：想使用文件路由，可以直接上手<code>Next.js</code>，能方便很多。加上设置侧边栏也是通过<code>menu.ts</code>来进行配置,倒不如直接使用路由表来渲染</p><p>例子：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//路由类型</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Auth</span> = &#123;<br>  <span class="hljs-attr">resource</span>: <span class="hljs-built_in">string</span> | <span class="hljs-title class_">RegExp</span>;<br>  actions?: <span class="hljs-built_in">string</span>[];<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AuthParams</span> &#123;<br>  <span class="hljs-comment">// 某操作需要的权限数组</span><br>  requiredPermissions?: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">Auth</span>&gt;;<br>  <span class="hljs-comment">// 是否需要满足一个即可，即是或还是且。</span><br>  oneOfPerm?: <span class="hljs-built_in">boolean</span>;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">IRoute</span> = <span class="hljs-title class_">AuthParams</span> &amp; &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>;<br>  breadcrumb?: <span class="hljs-built_in">boolean</span>;<br>  children?: <span class="hljs-title class_">IRoute</span>[];<br>  hideInMenu?: <span class="hljs-built_in">boolean</span>; <span class="hljs-comment">// 是否在菜单中隐藏子路由，为了实现某些三级路由不展示在菜单中的需求</span><br>  icon?: <span class="hljs-title class_">React</span>.<span class="hljs-property">ForwardRefExoticComponent</span>&lt;<br>    <span class="hljs-title class_">IconProps</span> &amp; <span class="hljs-title class_">React</span>.<span class="hljs-property">RefAttributes</span>&lt;<span class="hljs-built_in">unknown</span>&gt;<br>  &gt;;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">generatePermission</span> = (<span class="hljs-params">level: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> actions = level === <span class="hljs-string">&quot;3&quot;</span> ? [] : [<span class="hljs-string">&quot;*&quot;</span>];<br>  <span class="hljs-keyword">const</span> result = &#123;&#125;;<br>  routes.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (item.<span class="hljs-property">children</span>) &#123;<br>      item.<span class="hljs-property">children</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">child</span>) =&gt;</span> &#123;<br>        result[child.<span class="hljs-property">name</span>] = actions;<br>      &#125;);<br>    &#125;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;;<br><span class="hljs-keyword">const</span> useRoute = (userPermission): [<span class="hljs-title class_">IRoute</span>[], <span class="hljs-built_in">string</span>] =&gt; &#123;<br>  <span class="hljs-keyword">const</span> filterRoute = (<span class="hljs-attr">routes</span>: <span class="hljs-title class_">IRoute</span>[], arr = []): <span class="hljs-title class_">IRoute</span>[] =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!routes.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-keyword">return</span> [];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> route <span class="hljs-keyword">of</span> routes) &#123;<br>      <span class="hljs-keyword">const</span> &#123; requiredPermissions, oneOfPerm &#125; = route;<br>      <span class="hljs-keyword">let</span> visible = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">if</span> (requiredPermissions) &#123;<br>        visible = <span class="hljs-title function_">auth</span>(&#123; requiredPermissions, oneOfPerm &#125;, userPermission);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (!visible) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (route.<span class="hljs-property">children</span> &amp;&amp; route.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">const</span> newRoute = &#123; ...route, <span class="hljs-attr">children</span>: [] &#125;;<br>        <span class="hljs-title function_">filterRoute</span>(route.<span class="hljs-property">children</span>, newRoute.<span class="hljs-property">children</span>);<br>        <span class="hljs-keyword">if</span> (newRoute.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>) &#123;<br>          arr.<span class="hljs-title function_">push</span>(newRoute);<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        arr.<span class="hljs-title function_">push</span>(&#123; ...route &#125;);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> arr;<br>  &#125;;<br>  <span class="hljs-keyword">const</span> [permissionRoute, setPermissionRoute] = <span class="hljs-title function_">useState</span>(routes);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> newRoutes = <span class="hljs-title function_">filterRoute</span>(routes);<br>    <span class="hljs-title function_">setPermissionRoute</span>(newRoutes);<br>    <span class="hljs-comment">// eslint-disable-next-line react-hooks/exhaustive-deps</span><br>  &#125;, [userPermission]);<br><br>  <span class="hljs-keyword">const</span> defaultRoute = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> first = permissionRoute[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> (first) &#123;<br>      <span class="hljs-keyword">const</span> firstRoute = first?.<span class="hljs-property">children</span>?.[<span class="hljs-number">0</span>]?.<span class="hljs-property">key</span> || first.<span class="hljs-property">key</span>;<br>      <span class="hljs-keyword">return</span> firstRoute;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>  &#125;, [permissionRoute]);<br><br>  <span class="hljs-keyword">return</span> [permissionRoute, defaultRoute];<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useRoute;<br></code></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">//渲染</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderRoutes</span>(<span class="hljs-params">locale: &#123; [x: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;</span>) &#123;<br>  routeMap.<span class="hljs-property">current</span>.<span class="hljs-title function_">clear</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">travel</span>(<span class="hljs-params">_routes: IRoute[], level: <span class="hljs-built_in">number</span>, parentNode = []</span>) &#123;<br>    <span class="hljs-keyword">return</span> _routes.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">route</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123; breadcrumb = <span class="hljs-literal">true</span>, hideInMenu &#125; = route;<br>      <span class="hljs-keyword">const</span> iconDom = <span class="hljs-title function_">getIcon</span>(route);<br>      <span class="hljs-keyword">const</span> titleDom = (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">          &#123;iconDom&#125; &#123;locale[route.name] || route.name&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>      );<br>      routeMap.<span class="hljs-property">current</span>.<span class="hljs-title function_">set</span>(<br>        <span class="hljs-string">`/<span class="hljs-subst">$&#123;route.key&#125;</span>`</span>,<br>        breadcrumb ? [...parentNode, route.<span class="hljs-property">name</span>] : []<br>      );<br>      <span class="hljs-keyword">const</span> visibleChildren = (route.<span class="hljs-property">children</span> || []).<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">child</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123; hideInMenu, breadcrumb = <span class="hljs-literal">true</span> &#125; = child;<br>        <span class="hljs-keyword">if</span> (hideInMenu || route.<span class="hljs-property">hideInMenu</span>) &#123;<br>          routeMap.<span class="hljs-property">current</span>.<span class="hljs-title function_">set</span>(<br>            <span class="hljs-string">`/<span class="hljs-subst">$&#123;child.key&#125;</span>`</span>,<br>            breadcrumb ? [...parentNode, route.<span class="hljs-property">name</span>, child.<span class="hljs-property">name</span>] : []<br>          );<br>        &#125;<br>        <span class="hljs-keyword">return</span> !hideInMenu;<br>      &#125;);<br>      <span class="hljs-comment">// console.log(visibleChildren);</span><br>      <span class="hljs-keyword">if</span> (hideInMenu) &#123;<br>        <span class="hljs-keyword">return</span> [];<br>      &#125;<br>      <span class="hljs-keyword">if</span> (visibleChildren.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SubMenu</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;route.key&#125;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;titleDom&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;travel(visibleChildren, level + 1, [...parentNode, route.name])&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">SubMenu</span>&gt;</span></span><br>        );<br>      &#125;<br>      <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MenuItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;route.key&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`/$&#123;<span class="hljs-attr">route.key</span>&#125;`&#125;&gt;</span>&#123;titleDom&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">MenuItem</span>&gt;</span></span><br>      );<br>    &#125;);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过配置路由，可以分权配置，细分到页面和操作，适用于大型的后台管理</p><p>直接通过文件配置路由，适用于简单的后台，不需要配置路由表的情况下，用起来方便<br>当然你可以自己选择 Next.js</p><p><del>鄙人浅显的见解，大佬轻喷</del></p><h3 id="剩下两个模块"><a href="#剩下两个模块" class="headerlink" title="剩下两个模块"></a>剩下两个模块</h3><p>简单的表格组件使用而已，没什么亮点</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>对这种路由布局理解提高了一点<br>帮他们写 12306 的时候，学会了抓包工具 Fiddler Classic。<del>说不定哪天能写一个有趣的东西</del></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React技术汇总</title>
    <link href="/2023/10/11/React%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/"/>
    <url>/2023/10/11/React%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="React-脚手架"><a href="#React-脚手架" class="headerlink" title="React 脚手架"></a>React 脚手架</h1><p>React 脚手架：来帮助程序员快速创建一个基于 xxx 库的模板项目<br>项目的整体技术架构为: react+webpacl+es6eslint</p><h2 id="React-脚手架使用"><a href="#React-脚手架使用" class="headerlink" title="React 脚手架使用"></a>React 脚手架使用</h2><p>第一步：全局安装<br><code>npm install -g create-react-app</code></p><p>第二步：创建项目目录<br><code>create-react-app name</code><br><code>create-react-app name --template typescript</code> ts 的项目</p><p>第三步：启动项目<br><code>cd name</code><br><code>npm start</code></p><h2 id="脚手架文件说明"><a href="#脚手架文件说明" class="headerlink" title="脚手架文件说明"></a>脚手架文件说明</h2><h3 id="public-目录"><a href="#public-目录" class="headerlink" title="public 目录"></a>public 目录</h3><p>public 目录下存放静态文件，比如 icon 和 html 文件</p><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><p><img src="/jiaoshou.png" alt="说明"></p><h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><p>src 目录下存放 APP 文件和相关组件</p><h4 id="APP-JS"><a href="#APP-JS" class="headerlink" title="APP.JS"></a>APP.JS</h4><p>你应用的最终集合组件。</p><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><p>渲染的入口文件，用于渲染</p><h4 id="其他文件"><a href="#其他文件" class="headerlink" title="其他文件"></a>其他文件</h4><p>不是很重要，包括 APP 组件测试的 js 文件，对你 AppReact 旧用法的警告，页面性能检测</p><h1 id="React-基础知识"><a href="#React-基础知识" class="headerlink" title="React 基础知识"></a>React 基础知识</h1><blockquote><p>React 开发前言：<br><a href="https://react.docschina.org/learn/editor-setup">对你的编辑器设置一下</a></p></blockquote><h2 id="什么是-React"><a href="#什么是-React" class="headerlink" title="什么是 React"></a>什么是 React</h2><p>React 是一个用于构建用户界面（UI）的 JavaScript 库，用户界面由按钮、文本和图像等小单元内容构建而成。React 帮助你把它们组合成可重用、可嵌套的 _组件_。从 web 端网站到移动端应用，屏幕上的所有内容都可以被分解成组件。</p><ul><li>React 允许你创建组件，<strong>应用程序的可复用 UI 元素。</strong></li><li>在 React 应用程序中，每一个 UI 模块都是一个组件。</li><li>React 是常规的 JavaScript 函数，除了：<ol><li> 它们的名字总是以大写字母开头。</li><li> 它们返回 JSX 标签。</li></ol></li></ul><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>了不起的科学家<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="如何渲染-React"><a href="#如何渲染-React" class="headerlink" title="如何渲染 React"></a>如何渲染 React</h2><p>如果你想在你的页面里某一部分使用 React，你需要这样：</p><ol><li>配置你的 javascript 环境</li><li>在你想使用 React 的地方渲染 React</li></ol><p>具体讲一下第二步：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- ... 你的 HTML 代码某处 ... --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ... 其他 HTML 代码 ... --&gt;</span><br></code></pre></td></tr></table></figure><p>在你想渲染的地方的标签注册一个 id<br>然后你就可以用<code>document.getElementById</code>找到该元素然后传递给<code>createRoot</code>,以便在其中渲染你的 React</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React-dom/client&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">NavigationBar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 实际实现一个导航栏</span><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello from React!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> domNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;navigation&quot;</span>);<br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">createRoot</span>(domNode); <span class="hljs-comment">//你为你的navigation创建了一个根</span><br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavigationBar</span> /&gt;</span></span>); <span class="hljs-comment">//为你创建的根进行对NavigationBar组件进行的渲染</span><br></code></pre></td></tr></table></figure><p>如果你只是对一个页面的一些部分使用 React，那你大可这样进行 React 渲染<br>如果你想一整个应用都使用 React，那你可以使用相应的 React 框架。</p><blockquote><p>马上就学 Next.js</p></blockquote><h2 id="JSX-规则"><a href="#JSX-规则" class="headerlink" title="JSX 规则"></a>JSX 规则</h2><ol><li>只能返回一个根元素：一个组件中含有多个标签，得用一个父元素将他们包裹起来，例如：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>海蒂·拉玛的代办事项<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/yXOvdOSs.jpg&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Hedy Lamarr&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;photo&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--或者你可以选择用&lt;&gt;&lt;/&gt;  --&gt;</span><br><span class="hljs-tag">&lt;&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>海蒂·拉玛的代办事项<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/yXOvdOSs.jpg&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Hedy Lamarr&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;photo&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>标签必须闭合：如 img 等自闭合标签必须写成<img/></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/yXOvdOSs.jpg&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Hedy Lamarr&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;photo&quot;</span></span><br><span class="hljs-tag">   /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>发明一种新式交通信号灯<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>排练一个电影场景<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>改进频谱技术<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>使用驼峰式命名给<del>所有</del>大部分属性命名：因为 JSX 语法底层还是转化为 JS 代码，所以命名不允许出现-以及 class，得用驼峰式命名和 className 代</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/yXOvdOSs.jpg&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Hedy Lamarr&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;photo&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>{}内可以使用 JS 变量，JS 函数以及 JS 对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//函数</span><br><span class="hljs-keyword">const</span> today = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatDate</span>(<span class="hljs-params">date</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">DateTimeFormat</span>(<span class="hljs-string">&quot;en-US&quot;</span>, &#123; <span class="hljs-attr">weekday</span>: <span class="hljs-string">&quot;long&quot;</span> &#125;).<span class="hljs-title function_">format</span>(date);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>To Do List for &#123;formatDate(today)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;Gregorio Y. Zara&quot;</span>;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;name&#125;&#x27;s To Do List<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>JSX 总结：</p><ul><li>JSX 引号内的值会作为字符串传递给属性。</li><li>大括号让你可以将 JavaScript 的逻辑和变量带入到标签中。</li><li>它们会在 JSX 标签中的内容区域或紧随属性的 = 后起作用。</li><li> 并不是什么特殊的语法：它只是包在 JSX 大括号内的 JavaScript 对象</li></ul><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>props 是在父组件和子组件中传递的内容，好比 JS 中传入函数的参数，父组件也可以给子组件传递参数<br>第一步：将 props 传递给子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">name:</span> &quot;<span class="hljs-attr">Lin</span> <span class="hljs-attr">Lanying</span>&quot;, <span class="hljs-attr">imageId:</span> &quot;<span class="hljs-attr">1bX5QH6</span>&quot; &#125;&#125; <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;100&#125;</span> /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>第二步：在子组件中读取 props</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">&#123; person, size &#125;</span>) &#123;<br>  <span class="hljs-comment">//不要忘记&#123;&#125;</span><br>  <span class="hljs-comment">// 在这里 person 和 size 是可访问的</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>P.S 渲染列表的时候要记得给每一个列表一个 key</strong></p><h2 id="关于组件的纯粹"><a href="#关于组件的纯粹" class="headerlink" title="关于组件的纯粹"></a>关于组件的纯粹</h2><ul><li>一个组件必须是纯粹的，就意味着：<ul><li><strong>只负责自己的任务。</strong> 不应更改渲染前存在的任何对象或变量。</li><li><strong>输入相同，则输出相同。</strong> 给定相同的输入，组件应该总是返回相同的 JSX。</li></ul></li><li>渲染随时可能发生，因此组件不应依赖于彼此的渲染顺序。</li><li>你不应该改变组件用于渲染的任何输入。这包括 props、state 和 context。通过 setEffect 来更新界面，而不要改变预先存在的对象。</li><li>努力在你返回的 JSX 中表达你的组件逻辑。当你需要“改变事物”时，你通常希望在事件处理程序中进行。作为最后的手段，你可以使用 useEffect。</li><li>编写纯函数需要一些练习，但它充分释放了 React 范式的能力。</li></ul><h2 id="响应事件"><a href="#响应事件" class="headerlink" title="响应事件"></a>响应事件</h2><h3 id="添加响应事件"><a href="#添加响应事件" class="headerlink" title="添加响应事件"></a>添加响应事件</h3><p>如需添加一个事件处理函数，你需要先定义一个函数，然后将其作为 prop 传入合适的 JSX 标签。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>未绑定任何事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>按照如下三个步骤，即可让它在用户点击时显示消息：</p><ol><li>在 Button 组件 <em>内部</em> 声明一个名为 handleClick 的函数。</li><li>实现函数内部的逻辑（使用 alert 来显示消息）。</li><li>添加 onClick={handleClick} 到 <code>&lt;button&gt;</code>JSX 中。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;你点击了我！&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>按照惯例，通常将事件处理程序命名为 handle，后接事件名。你会经常看到 onClick={handleClick}，onMouseEnter={handleMouseEnter} 等。</p></blockquote><h3 id="阻止事件传播"><a href="#阻止事件传播" class="headerlink" title="阻止事件传播"></a>阻止事件传播</h3><p>如果你想阻止一个事件到达父组件，你需要像下面 Button 组件那样调用 e.stopPropagation()</p><h3 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h3><p>你可以调用事件对象中的 e.preventDefault() 来阻止这种情况发生</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><ul><li>你可以通过将函数作为 prop 传递给元素如 <button> 来处理事件。</li><li>必须传递事件处理函数，<strong>而非函数调用！</strong> onClick={handleClick} ，不是 onClick={handleClick()}。</li><li>你可以单独或者内联定义事件处理函数。</li><li>事件处理函数在组件内部定义，所以它们可以访问 props。</li><li>你可以在父组件中定义一个事件处理函数，并将其作为 prop 传递给子组件。</li><li>你可以根据特定于应用程序的名称定义事件处理函数的 prop。</li><li>事件会向上传播。通过事件的第一个参数调用 e.stopPropagation() 来防止这种情况。</li><li>事件可能具有不需要的浏览器默认行为。调用 e.preventDefault() 来阻止这种情况。</li><li>从子组件显式调用事件处理函数 prop 是事件传播的另一种优秀替代方案。</li></ul><h2 id="关于-State"><a href="#关于-State" class="headerlink" title="关于 State"></a>关于 State</h2><p><strong>为什么我们需要用到 State:</strong></p><ul><li>局部变量无法在多次渲染中持久保存</li><li>更改局部变量不会触发渲染</li><li>当一个组件需要在多次渲染间“记住”某些信息时使用 state 变量。</li></ul><p>使用方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>; <span class="hljs-comment">//要添加 state 变量，先从文件顶部的 React 中导入 useState</span><br><br><span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//创建state状态</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">setIndex</span>(index + <span class="hljs-number">1</span>);<br>&#125; <span class="hljs-comment">//改变状态</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>State 变量是通过调用 useState Hook 来声明的。</li><li>Hook 是以 use 开头的特殊函数。它们能让你 “hook” 到像 state 这样的 React 特性中。</li><li>Hook 可能会让你想起 import：它们需要在非条件语句中调用。调用 Hook 时，包括 useState，仅在组件或另一个 Hook 的顶层被调用才有效。</li><li>useState Hook 返回一对值：当前 state 和更新它的函数。</li><li>你可以拥有多个 state 变量。在内部，React 按顺序匹配它们。</li><li>State 是组件私有的。如果你在两个地方渲染它，则每个副本都有独属于自己的 state。</li><li><strong>请记住，必须在条件语句外并且始终以相同的顺序调用 Hook！</strong></li></ul><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><ul><li>在一个 React 应用中一次屏幕更新都会发生以下三个步骤：<ol><li> 触发</li><li> 渲染</li><li> 提交</li></ol></li><li>您可以使用严格模式去找到组件中的错误</li><li>如果渲染结果与上次一样，那么 React 将不会修改 DOM</li><li>设置 state 只会为 <em>下一次</em> 渲染变更 state 的值</li><li>批处理渲染：<ul><li>设置 state 不会更改现有渲染中的变量，但会请求一次新的渲染。</li><li>React 会在事件处理函数执行完成之后处理 state 更新。这被称为批处理。</li><li>要在一个事件中多次更新某些 state，你可以使用 setNumber(n =&gt; n + 1) 更新函数。</li></ul></li></ul><h2 id="更新状态中的对象"><a href="#更新状态中的对象" class="headerlink" title="更新状态中的对象"></a>更新状态中的对象</h2><p>State 可以保存任何类型的 JavaScript 值，包括对象。但是你不应该直接改变你在 React 状态下持有的对象。相反，当你想更新一个对象时，你需要创建一个新对象（或复制一个现有对象），然后设置状态以使用该副本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">onPointerMove=&#123;<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  position.<span class="hljs-property">x</span> = e.<span class="hljs-property">clientX</span>;<br>  position.<span class="hljs-property">y</span> = e.<span class="hljs-property">clientY</span>;<br>&#125;&#125; <span class="hljs-comment">//错误示范</span><br><br><br>onPointerMove=&#123;<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  <span class="hljs-title function_">setPosition</span>(&#123;<br>    <span class="hljs-attr">x</span>: e.<span class="hljs-property">clientX</span>,<br>    <span class="hljs-attr">y</span>: e.<span class="hljs-property">clientY</span><br>  &#125;);<br>&#125;&#125;<span class="hljs-comment">//应该这样</span><br></code></pre></td></tr></table></figure><p>你也可以使用<code>...</code>对象扩展语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setPerson</span>(&#123;<br>  ...person, <span class="hljs-comment">// Copy the old fields</span><br>  <span class="hljs-attr">firstName</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>, <span class="hljs-comment">// But override this one</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>但一碰到嵌套的对象，复制一个新对象就显得非常麻烦<br>所以我们可以使用<code>Immer</code>写更简洁的更新<br>步骤：</p><ol><li>运行 npm install use-immer 将 Immer 添加为依赖项</li><li>然后将 import { useState } from ‘React’ 替换为 import { useImmer } from ‘use-immer’</li><li>将 const [] = useState() 变成 const [] = useImmer()</li><li>再使用 update(draft=&gt;{draft.name = xxx}) 进行修改</li></ol><p><strong>摘要</strong>：</p><ul><li>Treat all state in React as immutable.<br>将 React 中的所有状态视为不可变的。</li><li>When you store objects in state, mutating them will not trigger renders and will change the state in previous render “snapshots”.<br>当您将对象存储在状态中时，改变它们不会触发渲染，并且会更改先前渲染“快照”中的状态。</li><li>Instead of mutating an object, create a <em>new</em> version of it, and trigger a re-render by setting state to it.<br>与其改变对象，不如创建它的新版本，并通过为其设置状态来触发重新渲染。</li><li>You can use the {…obj, something: ‘newValue’} object spread syntax to create copies of objects.<br>您可以使用 {…obj, something: ‘newValue’} 对象传播语法来创建对象的副本。</li><li>Spread syntax is shallow: it only copies one level deep.<br>传播语法很浅：它只复制一层深。</li><li>To update a nested object, you need to create copies all the way up from the place you’re updating.<br>要更新嵌套对象，您需要从要更新的地方一直向上创建副本。</li><li>To reduce repetitive copying code, use Immer.<br>要减少重复复制代码，请使用 Immer。</li></ul><h2 id="更新数组"><a href="#更新数组" class="headerlink" title="更新数组"></a>更新数组</h2><p>更新数组和对象一样，需要复制再修改<br>善于利用 map，fliter，slice 等数组方法<br>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleIncreaseClick</span>(<span class="hljs-params">productId</span>) &#123;<br>  <span class="hljs-title function_">setProducts</span>(<br>    products.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">product</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (productId === product.<span class="hljs-property">id</span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          ...product,<br>          <span class="hljs-attr">count</span>: product.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>,<br>        &#125;;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> product;<br>      &#125;<br>    &#125;)<br>  );<br>&#125; <span class="hljs-comment">//id+1</span><br></code></pre></td></tr></table></figure><h2 id="用-State-响应输入"><a href="#用-State-响应输入" class="headerlink" title="用 State 响应输入"></a>用 State 响应输入</h2><p><strong>采用声明式编程比采用命令式编程更好，面对更复杂庞大的功能，命令式编程易错且难以维护</strong></p><p>React 提供了很好的声明式编程的方法，通过<code>setState()</code>来对不同的状态进行处理，具体有以下五个步骤：<br><strong>步骤一：定位组件中不同的视图状态</strong><br>你得先预测你的组件在不同的状态下的视图样式，模拟不同状态下的样子<br><strong>步骤二：确定是什么改变了这些状态</strong><br>简单来说可以分为：</p><ul><li>人为输入：比如点击按钮、在表单中输入内容，或导航到链接。</li><li>计算机输入：比如网络请求得到反馈、定时器被触发，或加载一张图片。<br>你得设置 State 状态去响应这些变化<br><strong>步骤三：通过<code>useState</code>去表示内存中的<code>state</code></strong><br>我们的目的肯定是 state 越少越好，更复杂的程序 bug 会越多。<br>但是一开始我们可以将所有想到的视图状态都写出来，随后再一个一个去删除<br><strong>步骤四：删除任何没必要的<code>state</code>变量</strong><br>你想简化你的代码，减少 state 内容的重复，我们就需要花一点心思在重构你的 state 结构<br>关于你的 state 变量，你可以思考这些问题：</li><li>这个 state 变量是否会导致矛盾？</li><li>相同的信息是否在另外一个 state 变量中存在</li><li>你是否可以在另外一个 state 变量中的相反值获得信息<br><strong>步骤五：链接事件处理函数以来设置 state</strong><br>最后，我们只需将 state 绑定在事件处理函数上即可</li></ul><h3 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h3><ul><li>声明式编程意味着为每个视图状态声明 UI 而非细致地控制 UI（命令式）。</li><li>当开发一个组件时：<ul><li>写出你的组件中所有的视图状态。</li><li>确定是什么触发了这些 state 的改变。</li><li>通过 useState 模块化内存中的 state。</li><li>删除任何不必要的 state 变量。</li><li>连接事件处理函数去设置 state。</li></ul></li></ul><h2 id="选择状态结构"><a href="#选择状态结构" class="headerlink" title="选择状态结构"></a>选择状态结构</h2><h3 id="构建状态的原则"><a href="#构建状态的原则" class="headerlink" title="构建状态的原则"></a>构建状态的原则</h3><ul><li><p><strong>组相关状态，如果您总是同时更新两个或多个状态变量，请考虑将它们合并为一个状态变量。</strong></p></li><li><p><strong>避免状态上的矛盾。当状态的结构方式使多个状态可能相互矛盾和“不一致”时，就会为错误留下空间。尽量避免这种情况。</strong></p></li><li><p><strong>避免冗余状态。如果您可以在渲染期间从组件的 props 或其现有状态变量中计算出一些信息，则不应将该信息放入该组件的状态中。</strong></p></li><li><p><strong>避免状态重复。当相同的数据在多个状态变量之间或嵌套对象中重复时，很难使它们保持同步。尽可能减少重复。</strong></p></li><li><p><strong>避免深度嵌套状态。层次很深的状态更新起来不是很方便。如果可能，更喜欢以扁平的方式构建状态。</strong></p></li></ul><p>如果你想看看这些原则在实际该如何运用<a href="https://react.docschina.org/learn/choosing-the-state-structure">请点击这里</a>.</p><h2 id="在组件间共享状态"><a href="#在组件间共享状态" class="headerlink" title="在组件间共享状态"></a>在组件间共享状态</h2><p>通常情况下，一个 app 内的不同的组件的状态是不共享的，你操纵一个组件的时候并不会影响到其他组件，这很大程度上方便了我们构建一个应用<br>但我们有的时候也需要对同一类型的组件进行管理，以便一次性改变全部某一类型组件的样式</p><p><strong>这是一个有两个面板的组件：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Panel</span>(<span class="hljs-params">&#123; title, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isActive, setIsActive] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;panel&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;isActive ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsActive(true)&#125;&gt;显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Accordion</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>哈萨克斯坦，阿拉木图<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;关于&quot;</span>&gt;</span></span><br><span class="language-xml">        阿拉木图人口约200万，是哈萨克斯坦最大的城市。它在 1929 年到 1997</span><br><span class="language-xml">        年间都是首都。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;词源&quot;</span>&gt;</span></span><br><span class="language-xml">        这个名字来自于 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;kk-KZ&quot;</span>&gt;</span>алма<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        ，哈萨克语中“苹果”的意思，经常被翻译成“苹果之乡”。事实上，阿拉木图的周边地区被认为是苹果的发源地，</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;la&quot;</span>&gt;</span>Malus sieversii<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 被认为是现今苹果的祖先。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>那么我们需要分三步将状态提升至他们的父组件：</p><p><strong>1.从子组件中移除 state。</strong></p><p>从<code>Panel</code>删掉<code>const [isActive, setIsActive] = useState(false);</code><br>再将<code>isActive</code>加入<code>Panel</code>组件的<code>props</code>中<br><code>function Panel(&#123; title, children, isActive &#125;) &#123;</code></p><p><strong>2.从父组件中传递 state 状态。</strong><br>首先定位到这两个子组件最近的共同父组件<code>Accodion</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Accordion</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>哈萨克斯坦，阿拉木图<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;关于&quot;</span> <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;true&#125;</span>&gt;</span></span><br><span class="language-xml">        阿拉木图人口约200万，是哈萨克斯坦最大的城市。它在 1929 年到 1997</span><br><span class="language-xml">        年间都是首都。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;词源&quot;</span> <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;true&#125;</span>&gt;</span></span><br><span class="language-xml">        这个名字来自于 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;kk-KZ&quot;</span>&gt;</span>алма<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        ，哈萨克语中“苹果”的意思，经常被翻译成“苹果之乡”。事实上，阿拉木图的周边地区被认为是苹果的发源地，</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;la&quot;</span>&gt;</span>Malus sieversii<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 被认为是现今苹果的祖先。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Panel</span>(<span class="hljs-params">&#123; title, children, isActive &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;panel&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;isActive ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsActive(true)&#125;&gt;显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.为共同的父组件添加 state ，并将其与事件处理函数一起向下传递。</strong></p><p>再对父组件进行<code>state</code>管理，这样父组件就能控制哪个子组件是显示的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [activeIndex, setActiveIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;activeIndex</span> === <span class="hljs-string">0&#125;</span> <span class="hljs-attr">onShow</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setActiveIndex(0)&#125;&gt;</span><br><span class="language-xml">    ...</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;activeIndex</span> === <span class="hljs-string">1&#125;</span> <span class="hljs-attr">onShow</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setActiveIndex(1)&#125;&gt;</span><br><span class="language-xml">    ...</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/&gt;</span></span>;<br></code></pre></td></tr></table></figure><h2 id="对-state-进行保留和重置"><a href="#对-state-进行保留和重置" class="headerlink" title="对 state 进行保留和重置"></a>对 state 进行保留和重置</h2><p>React 在移除一个组件的时候会将其 state 也一起移除</p><p>React 中相同位置的相同组件的 state 会被保留下来，<strong>注意相同位置指的是在 UI 树中的位置而不是在 JSX 中的位置</strong></p><p>React 中相同位置的不同组件会使得 state 重置</p><p>如何在相同位置重置 state：</p><ul><li><strong>方法一：将组件渲染在不同的位置</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Scoreboard</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlayerA, setIsPlayerA] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;isPlayerA &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Taylor&quot;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      &#123;!isPlayerA &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Sarah&quot;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setIsPlayerA(!isPlayerA);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        下一位玩家！</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子中，就将不同的 Counter 组件渲染在不同的位置<br>但是这只是简单的情况下，当组件复杂后这个方法就变得困难了</p><ul><li><strong>方法二：使用 key 来重置 state</strong><br>和渲染列表中的 key 一样，你也可以对你的组件渲染一个 key</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Scoreboard</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlayerA, setIsPlayerA] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;isPlayerA ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;Taylor&quot;</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Taylor&quot;</span> /&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;Sarah&quot;</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Sarah&quot;</span> /&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setIsPlayerA(!isPlayerA);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        下一位玩家！</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当 key 更改的时候，React 将从头开始重新创建节点<br>请记住 key 不是全局唯一的。它们只能指定父组件内部的顺序。</p></blockquote><p><strong>摘要</strong></p><ul><li>只要在相同位置渲染的是相同组件， React 就会保留状态。</li><li>state 不会被保存在 JSX 标签里。它与你在树中放置该 JSX 的位置相关联。</li><li>你可以通过为一个子树指定一个不同的 key 来重置它的 state。</li><li>不要嵌套组件的定义，否则你会意外地导致 state 被重置。</li></ul><h2 id="迁移状态逻辑到-Reducer-中"><a href="#迁移状态逻辑到-Reducer-中" class="headerlink" title="迁移状态逻辑到 Reducer 中"></a>迁移状态逻辑到 Reducer 中</h2><p>随着你组件的复杂度提高，你将很难一眼看清所有组件的状态<br>比如说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AddTask</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./AddTask.js&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TaskList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./TaskList.js&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [tasks, setTasks] = <span class="hljs-title function_">useState</span>(initialTasks);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddTask</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-title function_">setTasks</span>([<br>      ...tasks,<br>      &#123;<br>        <span class="hljs-attr">id</span>: nextId++,<br>        <span class="hljs-attr">text</span>: text,<br>        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>    ]);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChangeTask</span>(<span class="hljs-params">task</span>) &#123;<br>    <span class="hljs-title function_">setTasks</span>(<br>      tasks.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-property">id</span> === task.<span class="hljs-property">id</span>) &#123;<br>          <span class="hljs-keyword">return</span> task;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> t;<br>        &#125;<br>      &#125;)<br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteTask</span>(<span class="hljs-params">taskId</span>) &#123;<br>    <span class="hljs-title function_">setTasks</span>(tasks.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t.<span class="hljs-property">id</span> !== taskId));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>布拉格的行程安排<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AddTask</span> <span class="hljs-attr">onAddTask</span>=<span class="hljs-string">&#123;handleAddTask&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TaskList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">tasks</span>=<span class="hljs-string">&#123;tasks&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChangeTask</span>=<span class="hljs-string">&#123;handleChangeTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onDeleteTask</span>=<span class="hljs-string">&#123;handleDeleteTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialTasks = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;参观卡夫卡博物馆&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;看木偶戏&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;打卡列侬墙&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;,<br>];<br></code></pre></td></tr></table></figure><p>这个例子中每个事件处理都通过<code>setTasks</code>来更新状态，但随着组件不断更新，其状态会越来越多，越来越复杂。所以我们可以为了降低复杂度,可以把这些逻辑都放到一个<code>reducer</code>函数中:</p><p><strong>第一步:将设置状态的逻辑修改成 dispatch 的一个 action</strong><br>你的<code>dispatch</code>函数和以往直接设计状态不同，<code>dispatch</code>是用来告诉你的<code>React</code>刚刚用户做了什么，并且发生相应的响应将需要改变的状态发给<code>reducer</code>函数<br>比如上面的“添加/修改/删除操作”就可以写成:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteTask</span>(<span class="hljs-params">taskId</span>) &#123;<br>  <span class="hljs-title function_">dispatch</span>(<br>    <span class="hljs-comment">// &quot;action&quot; 对象：</span><br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;deleted&quot;</span>,<br>      <span class="hljs-attr">id</span>: taskId,<br>    &#125;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二步：编写一个 reducer 函数</strong><br>reducer 函数就是你放置状态逻辑的地方。他需要两个参数：当前的 state 和 action 对象。他将返回更新后的 state<br>在这个例子中，你的 reducer 函数需要： 1.声明当前状态（tasks）作为第一个参数； 2.声明 action 对象作为第二个参数； 3.从<code>reducer</code>返回下一个状态（React 会将旧的状态设置为这个最新的状态）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">tasksReducer</span>(<span class="hljs-params">tasks, action</span>) &#123;<br>  <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;added&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> [<br>      ...tasks,<br>      &#123;<br>        <span class="hljs-attr">id</span>: action.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span>,<br>        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>    ];<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;changed&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (t.<span class="hljs-property">id</span> === action.<span class="hljs-property">task</span>.<span class="hljs-property">id</span>) &#123;<br>        <span class="hljs-keyword">return</span> action.<span class="hljs-property">task</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> t;<br>      &#125;<br>    &#125;);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;deleted&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t.<span class="hljs-property">id</span> !== action.<span class="hljs-property">id</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;未知 action: &quot;</span> + action.<span class="hljs-property">type</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当然你可以把 reducer 函数写在其他文件然后导入进来，这样看起来更简洁</p></blockquote><blockquote><p>对了如果觉得 ifelse 语句很啰嗦，你可以用 switch 语句</p></blockquote><p><strong>第三步：在组件中使用 reducer</strong><br>最后，你需要在组件中使用你写的<code>reducer</code><br>首先你得导入<code>import &#123; useReducer &#125; from &#39;React&#39;;</code><br>其次将<code>useState</code>换成<code>useReducer</code>,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//const [tasks, setTasks] = useState(initialTasks);</span><br><span class="hljs-keyword">const</span> [tasks, dispatch] = <span class="hljs-title function_">useReducer</span>(tasksReducer, initialTasks);<br></code></pre></td></tr></table></figure><p><code>useReducer</code>和<code>useState</code> 很像但也有所不同，<code>useReducer</code>接受两个参数，一个 reducer 函数，一个初始的 state</p><p><strong>最后的结果</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AddTask</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./AddTask.js&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TaskList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./TaskList.js&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [tasks, dispatch] = <span class="hljs-title function_">useReducer</span>(tasksReducer, initialTasks);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddTask</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;added&quot;</span>,<br>      <span class="hljs-attr">id</span>: nextId++,<br>      <span class="hljs-attr">text</span>: text,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChangeTask</span>(<span class="hljs-params">task</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;changed&quot;</span>,<br>      <span class="hljs-attr">task</span>: task,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteTask</span>(<span class="hljs-params">taskId</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;deleted&quot;</span>,<br>      <span class="hljs-attr">id</span>: taskId,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>布拉格的行程安排<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AddTask</span> <span class="hljs-attr">onAddTask</span>=<span class="hljs-string">&#123;handleAddTask&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TaskList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">tasks</span>=<span class="hljs-string">&#123;tasks&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChangeTask</span>=<span class="hljs-string">&#123;handleChangeTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onDeleteTask</span>=<span class="hljs-string">&#123;handleDeleteTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tasksReducer</span>(<span class="hljs-params">tasks, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;added&quot;</span>: &#123;<br>      <span class="hljs-keyword">return</span> [<br>        ...tasks,<br>        &#123;<br>          <span class="hljs-attr">id</span>: action.<span class="hljs-property">id</span>,<br>          <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span>,<br>          <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>      ];<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;changed&quot;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-property">id</span> === action.<span class="hljs-property">task</span>.<span class="hljs-property">id</span>) &#123;<br>          <span class="hljs-keyword">return</span> action.<span class="hljs-property">task</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> t;<br>        &#125;<br>      &#125;);<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;deleted&quot;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t.<span class="hljs-property">id</span> !== action.<span class="hljs-property">id</span>);<br>    &#125;<br>    <span class="hljs-attr">default</span>: &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;未知 action: &quot;</span> + action.<span class="hljs-property">type</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialTasks = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;参观卡夫卡博物馆&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;看木偶戏&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;打卡列侬墙&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;,<br>];<br></code></pre></td></tr></table></figure><h3 id="编写一个好的reducers"><a href="#编写一个好的reducers" class="headerlink" title="编写一个好的reducers"></a>编写一个好的<code>reducers</code></h3><ul><li><p>reducers 必须是纯粹的</p></li><li><p>每一个 action 都描述了一个单一的用户交互</p></li></ul><blockquote><p>你也可以使用 Immer 来简化 reducers，就像简化 state 修改数组和对象</p></blockquote><p><strong>摘要</strong></p><ul><li><p>把 useState 转化为 useReducer：</p><ol><li>通过事件处理函数 dispatch actions；</li><li>编写一个 reducer 函数，它接受传入的 state 和一个 action，并返回一个新的 state；</li><li>使用 useReducer 替换 useState；</li></ol></li><li><p>Reducers 可能需要你写更多的代码，但是这有利于代码的调试和测试。</p></li><li><p>Reducers 必须是纯净的。</p></li><li><p>每个 action 都描述了一个单一的用户交互。</p></li><li><p>使用 Immer 来帮助你在 reducer 里直接修改状态。</p></li></ul><h2 id="使用-Context-深层传递参数"><a href="#使用-Context-深层传递参数" class="headerlink" title="使用 Context 深层传递参数"></a>使用 Context 深层传递参数</h2><p>随着应用的增长，状态的不断提升，父组件向子组件传递的<code>props</code>就需要‘逐层传递’，这就麻烦了</p><p>好在 React 中 context 可以不用<code>props</code>就可以传递数据到子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Heading</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Heading.js&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Section</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Section.js&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Page</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;1&#125;</span>&gt;</span>主标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;2&#125;</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;2&#125;</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;2&#125;</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;3&#125;</span>&gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;3&#125;</span>&gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;3&#125;</span>&gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;4&#125;</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;4&#125;</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;4&#125;</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子是一个让不同的标题有不同的大小，可是看起来很臃肿。<br>我们该如何不用 props 来实现父组件传递给子组件状态呢</p><h3 id="Step1-创建一个-context"><a href="#Step1-创建一个-context" class="headerlink" title="Step1 创建一个 context"></a>Step1 创建一个 context</h3><p>你需要创建一个 context</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">LevelContext</span> = <span class="hljs-title function_">createContext</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">//默认值是1</span><br></code></pre></td></tr></table></figure><h3 id="Step2-使用-Context"><a href="#Step2-使用-Context" class="headerlink" title="Step2 使用 Context"></a>Step2 使用 Context</h3><p>从 React 引入 useContext 以及你刚刚创建的 context</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LevelContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./LevelContext.js&quot;</span>;<br></code></pre></td></tr></table></figure><p>删掉 heading 组件 porps 中的 level，从引入的 levelContext 中读取值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Heading</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> level = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">LevelContext</span>);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>useContext</code>和<code>useState</code>一样是 React 的一个 Hook，你只能在 React 的组件中用（也不能是循环或判断），它会告诉 React Heading 组件想要读取 levelContext</p><p>所以你现在可以在 JSX 中将 Heading 组件的 level 参数删除，让 Section 代替 Heading 接收 level 参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">Section</span> level=&#123;<span class="hljs-number">4</span>&#125;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Section</span>&gt;<br></code></pre></td></tr></table></figure><p>但是还没完成，你只使用了 levelContext 还没有提供它</p><h3 id="Step3-提供-context"><a href="#Step3-提供-context" class="headerlink" title="Step3 提供 context"></a>Step3 提供 context</h3><p>将 Section 组件用<code>context provider</code>包裹起来以提供 LevelContext 给他们</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LevelContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./LevelContext.js&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Section</span>(<span class="hljs-params">&#123; level, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;section&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">LevelContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;level&#125;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">LevelContext.Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这告诉 React：“如果在 <code>&lt;Section&gt;</code>组件中的任何子组件请求 LevelContext，给他们这个 level。”组件会使用 UI 树中在它上层最近的那个<code>&lt;LevelContext.Provider&gt;</code>传递过来的值。<br>这下你就不用给每个 Heading 标签传递 level 参数了</p><ol><li>你将一个 level 参数传递给<code>&lt;Section&gt;</code>。</li><li>Section 把它的子元素包在<code>&lt;LevelContext.Provider value=&#123;level&#125;&gt;</code>里面。</li><li>Heading 使用<code>useContext(LevelContext)</code>访问上层最近的 LevelContext 提供的值。</li></ol><p>但是如果你觉得给<code>&lt;Section&gt;</code>传递参数也很麻烦，你可以再进一步</p><h3 id="Step3-5"><a href="#Step3-5" class="headerlink" title="Step3.5"></a>Step3.5</h3><p>context 会从你的上层组件读取信息，所以你可以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LevelContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./LevelContext.js&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Section</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> level = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">LevelContext</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;section&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">LevelContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;level</span> + <span class="hljs-attr">1</span>&#125;&gt;</span></span><br><span class="language-xml">        &#123;&quot; &quot;&#125;</span><br><span class="language-xml">        //直接加一</span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">LevelContext.Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Context 是很好使用，但是你不该滥用。在你使用之前请考虑以下两点：</strong></p><ul><li>从传递 props 开始</li><li>抽象组件并将 JSX 作为 children 传递给他们<br>当以上两点都不适合你，你再考虑使用 Context</li></ul><p><strong>Context 的使用场景</strong></p><ul><li><p>主题： 如果你的应用允许用户更改其外观（例如暗夜模式），你可以在应用顶层放一个 context provider，并在需要调整其外观的组件中使用该 context。</p></li><li><p>当前账户： 许多组件可能需要知道当前登录的用户信息。将它放到 context 中可以方便地在树中的任何位置读取它。某些应用还允许你同时操作多个账户（例如，以不同用户的身份发表评论）。在这些情况下，将 UI 的一部分包裹到具有不同账户数据的 provider 中会很方便。</p></li><li><p>路由： 大多数路由解决方案在其内部使用 context 来保存当前路由。这就是每个链接“知道”它是否处于活动状态的方式。如果你创建自己的路由库，你可能也会这么做。</p></li><li><p>状态管理： 随着你的应用的增长，最终在靠近应用顶部的位置可能会有很多 state。许多遥远的下层组件可能想要修改它们。通常 将 reducer 与 context 搭配使用来管理复杂的状态并将其传递给深层的组件来避免过多的麻烦。</p></li></ul><h3 id="摘要-2"><a href="#摘要-2" class="headerlink" title="摘要"></a>摘要</h3><ul><li>Context 使组件向其下方的整个树提供信息。</li><li>传递 Context 的方法:<ul><li>通过 export const MyContext = createContext(defaultValue) 创建并导出 context。</li><li>在无论层级多深的任何子组件中，把 context 传递给 useContext(MyContext) Hook 来读取它。</li><li>在父组件中把 children 包在<code>&lt;MyContext.Provider value=&#123;...&#125;&gt;</code>中来提供 context。</li></ul></li><li>Context 会穿过中间的任何组件。</li><li>Context 可以让你写出 “较为通用” 的组件。</li><li>在使用 context 之前，先试试传递 props 或者将 JSX 作为 children 传递。</li></ul><h2 id="使用-ref-引用值"><a href="#使用-ref-引用值" class="headerlink" title="使用 ref 引用值"></a>使用 ref 引用值</h2><p>当你希望你的组件“记住”某些信息，但又不想让这些信息触发新的渲染，你可以使用 ref</p><p>首先你得导入 ref，就像导入 state 一样，<code>import &#123;useRef&#125; from &#39;React&#39;</code><br>然后创建一个 ref，<code>const ref = useRef(0)</code><br>useRef 将返回一个这样的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">current</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">// 你向 useRef 传入的值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当然你也可以传入字符串，对象，甚至是函数</p><p>你可以通过 ref.current 属性访问 ref 当前的值，你既可以读取也可以修改这个值</p><p>记住：修改 ref 不会让 React 重新渲染<br><strong>实例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//一个秒表</span><br><span class="hljs-keyword">import</span> &#123; useState, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Stopwatch</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [startTime, setStartTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [now, setNow] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> intervalRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleStart</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setStartTime</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br>    <span class="hljs-title function_">setNow</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br><br>    <span class="hljs-built_in">clearInterval</span>(intervalRef.<span class="hljs-property">current</span>);<br>    intervalRef.<span class="hljs-property">current</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setNow</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br>    &#125;, <span class="hljs-number">10</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleStop</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">clearInterval</span>(intervalRef.<span class="hljs-property">current</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> secondsPassed = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (startTime != <span class="hljs-literal">null</span> &amp;&amp; now != <span class="hljs-literal">null</span>) &#123;<br>    secondsPassed = (now - startTime) / <span class="hljs-number">1000</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>时间过去了： &#123;secondsPassed.toFixed(3)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleStart&#125;</span>&gt;</span>开始<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleStop&#125;</span>&gt;</span>停止<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子中使用 ref 传入了一个 setInterval,并且实现了 clearInterval，这下就可以不重新渲染 React 的情况下停止这个秒表了</p><h3 id="何时使用-ref"><a href="#何时使用-ref" class="headerlink" title="何时使用 ref"></a>何时使用 ref</h3><p>通常，当你的组件需要“跳出” React 并与外部 API 通信时，你会用到 ref —— 通常是不会影响组件外观的浏览器 API。以下是这些罕见情况中的几个：</p><ul><li>存储 timeout ID</li><li>存储和操作 DOM 元素</li><li>存储不需要被用来计算 JSX 的其他对象</li></ul><p>如果你的组件需要存储一些值，但不影响渲染逻辑，请选择 ref</p><h3 id="ref-的最佳实践"><a href="#ref-的最佳实践" class="headerlink" title="ref 的最佳实践"></a>ref 的最佳实践</h3><ul><li>将 ref 视为应急方案</li><li>不要在渲染过程中读取或写入 ref.current</li></ul><h2 id="使用-ref-操作-Dom"><a href="#使用-ref-操作-Dom" class="headerlink" title="使用 ref 操作 Dom"></a>使用 ref 操作 Dom</h2><p>一般来说，React 会自动处理并且渲染 DOM 以匹配你的渲染输出，因此你在组件中不需要操作 DOM<br>但有的时候你可能需要访问 React 管理的组件，因此你可以利用 ref 来操作 Dom</p><h3 id="获取指向节点的-ref"><a href="#获取指向节点的-ref" class="headerlink" title="获取指向节点的 ref"></a>获取指向节点的 ref</h3><p>首先你需要引入 ref<br><code>import &#123; useRef &#125; from &#39;React&#39;;</code></p><p>其次声明一个 ref<br><code>const myRef = useRef(null);</code></p><p>最后将其传递给 Dom 节点<br><code>&lt;div ref=&#123;myRef&#125;&gt;</code></p><p>这样当 React 为这个 div 元素创建一个 Dom 节点的时候，就会将该节点的引用放入 myRef.current 中<br>你就可以通过事件处理访问到这个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 你可以使用任意浏览器 API，例如：</span><br>myRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">scrollIntoView</span>();<br></code></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>聚焦输入框<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用-ref-访问另一个组件的-Dom-节点"><a href="#用-ref-访问另一个组件的-Dom-节点" class="headerlink" title="用 ref 访问另一个组件的 Dom 节点"></a>用 ref 访问另一个组件的 Dom 节点</h3><p>React 不允许你使用 ref 在自己创建的组件中<br>但是你可以将 ref’转发’给一个子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; forwardRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyInput</span> = <span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> &#123;<span class="hljs-attr">...props</span>&#125; <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> /&gt;</span></span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>它是这样工作的:</p><ol><li><MyInput ref={inputRef} /> 告诉 React 将对应的 DOM 节点放入 inputRef.current 中。但是，这取决于 MyInput 组件是否允许这种行为， 默认情况下是不允许的。</li><li>MyInput 组件是使用 forwardRef 声明的。 这让从上面接收的 inputRef 作为第二个参数 ref 传入组件，第一个参数是 props 。</li><li>MyInput 组件将自己接收到的 ref 传递给它内部的<code>&lt;input&gt;</code>。</li></ol><h3 id="一些存在的问题"><a href="#一些存在的问题" class="headerlink" title="一些存在的问题"></a>一些存在的问题</h3><p>有的时候 React 对 Dom 的更改不是立即的，所以使用 Ref 改变 Dom 的时候会发生错误，所以你需要让 Dom 更改立即执行<br>你需要利用 flushSync 将更改立即执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; flushSync &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><span class="hljs-title function_">flushSync</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setTodos</span>([...todos, newTodo]);<br>&#125;);<br>listRef.<span class="hljs-property">current</span>.<span class="hljs-property">lastChild</span>.<span class="hljs-title function_">scrollIntoView</span>();<br></code></pre></td></tr></table></figure><h3 id="使用-ref-操作-Dom-的最佳实践"><a href="#使用-ref-操作-Dom-的最佳实践" class="headerlink" title="使用 ref 操作 Dom 的最佳实践"></a>使用 ref 操作 Dom 的最佳实践</h3><p>Refs 是一个应急方案。你应该只在你必须“跳出 React”时使用它们。这方面的常见示例包括管理焦点、滚动位置或调用 React 未暴露的浏览器 API。<br>如果你只是使用聚焦，滚动等非破坏性的操作，那并没有什么大碍。<br>但是如果尝试手动修改 Dom 元素，很可能 React 不知道你做了什么操作从而出现问题<br>所以你只能<strong>修改 React 没有理由更新的部分 DOM。</strong></p><h3 id="摘要-3"><a href="#摘要-3" class="headerlink" title="摘要"></a>摘要</h3><ul><li>Refs 是一个通用概念，但大多数情况下你会使用它们来保存 DOM 元素。</li><li>你通过传递 <div ref={myRef}> 指示 React 将 DOM 节点放入 myRef.current。</li><li>通常，你会将 refs 用于非破坏性操作，例如聚焦、滚动或测量 DOM 元素。</li><li>默认情况下，组件不暴露其 DOM 节点。 您可以通过使用 forwardRef 并将第二个 ref 参数传递给特定节点来暴露 DOM 节点。</li><li>使用 flushSync 立即更新 Dom</li><li>避免更改由 React 管理的 DOM 节点。</li><li>如果你确实修改了 React 管理的 DOM 节点，请修改 React 没有理由更新的部分。</li></ul><h2 id="使用-Effects-让你的-React-和-React-以外的内容同步"><a href="#使用-Effects-让你的-React-和-React-以外的内容同步" class="headerlink" title="使用 Effects 让你的 React 和 React 以外的内容同步"></a>使用 Effects 让你的 React 和 React 以外的内容同步</h2><p>Effects 让你在渲染后运行一些代码，这样你就可以将你的组件与 React 之外的一些系统同步。</p><h3 id="如何编写-Effect"><a href="#如何编写-Effect" class="headerlink" title="如何编写 Effect"></a>如何编写 Effect</h3><p><strong>Step1：声明一个 Effect</strong><br>首先你得导入<br><code>import &#123; useEffect &#125; from &#39;react&#39;</code></p><p>其次在组件的顶层调用它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// Code here will run after *every* render</span><br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是一个播放器的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState, useRef, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">VideoPlayer</span>(<span class="hljs-params">&#123; src, isPlaying &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (isPlaying) &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">play</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">pause</span>();<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;src&#125;</span> <span class="hljs-attr">loop</span> <span class="hljs-attr">playsInline</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlaying, setIsPlaying] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsPlaying(!isPlaying)&#125;&gt;</span><br><span class="language-xml">        &#123;isPlaying ? &quot;Pause&quot; : &quot;Play&quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">VideoPlayer</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isPlaying</span>=<span class="hljs-string">&#123;isPlaying&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>在此示例中，您同步到 React 状态的“外部系统”是浏览器媒体 API。您可以使用类似的方法将遗留的非 React 代码（如 jQuery 插件）包装到声明性 React 组件中。</p><p><strong>Step2：精确你的 Effect 的依赖</strong><br>默认情况下，效果在每次渲染后运行。通常，这不是您想要的：</p><ul><li>有时，它很慢。与外部系统同步并不总是即时的，因此除非必要，否则您可能希望跳过它。例如，您不想在每次击键时都重新连接到聊天服务器</li><li>有时候，这是错误的。例如，您不想在每次击键时触发组件淡入动画。动画应该只在组件第一次出现时播放一次。</li></ul><p>所以你需要这样写<code>useEffect(() =&gt; &#123;&#125;，[dependencies]);</code><br>dependencies 是你需要作为判断的依赖<br>这是一个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">VideoPlayer</span>(<span class="hljs-params">&#123; src, isPlaying &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (isPlaying) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Calling video.play()&quot;</span>);<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">play</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Calling video.pause()&quot;</span>);<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">pause</span>();<br>    &#125;<br>  &#125;, [isPlaying]);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;src&#125;</span> <span class="hljs-attr">loop</span> <span class="hljs-attr">playsInline</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlaying, setIsPlaying] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setText(e.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsPlaying(!isPlaying)&#125;&gt;</span><br><span class="language-xml">        &#123;isPlaying ? &quot;Pause&quot; : &quot;Play&quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">VideoPlayer</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isPlaying</span>=<span class="hljs-string">&#123;isPlaying&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子中的 Effect 后面的[]中写入了 isplaying，所以如果第二次渲染中 isplaying 和第一次的 isplaying 一致，那么 Effect 就不会执行<br><strong>注意：</strong></p><ul><li>你的依赖项不能是‘稳定的对象’，比如说 ref 和 setState 等等具有稳定身份的对象</li></ul><p><strong>Step3：请清除 Effect</strong></p><p>假如你做了一个聊天室的组件，需要接入聊天室的时候连接一个聊天室<br>你也觉得每次重新渲染再接入聊天室很麻烦，所以添加的依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>  connection.<span class="hljs-title function_">connect</span>();<br>&#125;, []);<br></code></pre></td></tr></table></figure><p>但是想想看，ChatRoom 组件是具有许多不同屏幕的更大应用程序的一部分。用户在 ChatRoom 页面开始他们的旅程。该组件安装并调用 connection.connect() 。然后想象用户导航到另一个屏幕——例如，到“设置”页面。 ChatRoom 组件卸载。最后，用户单击“返回”， ChatRoom 再次挂载。这将建立第二个连接——但第一个连接从未被破坏！当用户在应用程序中导航时，连接会不断堆积。</p><blockquote><p>为了快速发现这个问题，React 在开发过程中会在初始安装后立即重新安装每个组件，也就是调用组件两次</p></blockquote><p>所以为了解决这个问题，你可以这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>  connection.<span class="hljs-title function_">connect</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;;<br>&#125;, []);<br></code></pre></td></tr></table></figure><p>每次 Effect 再次运行之前，React 都会调用你的清理函数</p><p>当你异步使用 Effect 获取内容的时候，你通常需要清除没用的东西<br>你需要使用 ingore</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (!ignore) &#123;<br>  <span class="hljs-title function_">setBio</span>(result);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>  ignore = <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这样当一个请求发送后，再次调用的时候将不会触发 Effect</p><h3 id="摘要-4"><a href="#摘要-4" class="headerlink" title="摘要"></a>摘要</h3><ul><li>与事件不同，效果是由渲染本身而不是特定交互引起的。</li><li>Effects 让您可以将组件与某些外部系统（第三方 API、网络等）同步。</li><li>默认情况下，效果在每次渲染后运行（包括初始渲染）。</li><li>如果 React 的所有依赖项都具有与上次渲染期间相同的值，则 React 将跳过 Effect。</li><li>你不能“选择”你的依赖。它们由 Effect 中的代码决定。</li><li>空依赖数组 ( [] ) 对应组件“挂载”，即被添加到屏幕。</li><li>在严格模式下，React 会两次挂载组件（仅在开发中！）以对您的 Effect 进行压力测试。</li><li>如果你的 Effect 因为重新挂载而中断，你需要实现一个清理功能。</li><li>React 将在 Effect 下次运行之前以及卸载期间调用您的清理函数。</li></ul><h2 id="你可能不需要-Effect"><a href="#你可能不需要-Effect" class="headerlink" title="你可能不需要 Effect"></a>你可能不需要 Effect</h2><ul><li>如果您可以在渲染期间计算某些东西，则不需要 Effect。</li><li>要缓存昂贵的计算，请添加 useMemo 而不是 useEffect 。</li><li>要重置整个组件树的状态，请将不同的 key 传递给它。<ul><li>根据 props 或其他 state 来调整 state 都会使数据流更难理解和调试</li></ul></li><li>要重置特定位的状态以响应道具更改，请在渲染期间设置它。</li><li>因为显示组件而运行的代码应该在 Effects 中，其余的应该在事件中。</li><li>如果您需要更新多个组件的状态，最好在单个事件期间执行。</li><li>每当您尝试同步不同组件中的状态变量时，请考虑提升状态。</li><li>您可以使用 Effects 获取数据，但您需要实施清理以避免<strong>竞争条件</strong>。</li></ul><p>如果你想看一下这里案例，请点击<a href="https://react.docschina.org/learn/you-might-not-need-an-effect">这里</a></p><h2 id="Effect-的反应周期和依赖项"><a href="#Effect-的反应周期和依赖项" class="headerlink" title="Effect 的反应周期和依赖项"></a>Effect 的反应周期和依赖项</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&quot;https://localhost:1234&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, [roomId]);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个简单的连接服务器的 Effect</p><p>它指定了什么时候开始同步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>connection.<span class="hljs-title function_">connect</span>();<br></code></pre></td></tr></table></figure><p>它也指定了如何停止同步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">connection.<span class="hljs-title function_">disconnect</span>();<br></code></pre></td></tr></table></figure><p>从直觉上我们会想这个组件只会在挂载和卸载的时候同步与取消同步<br><strong>但是实际上并不是这样</strong></p><p>这个组件每当 roomId 不同的时候都会重新同步你的 Effect<br>当然它不仅仅会同步新的 Effect，它也会清理旧的 Effect,就因为<code>connection.disconnect();</code></p><p>以前，您是从组件的角度思考的。当您从组件的角度来看时，很容易将 Effects 视为在特定时间触发的“回调”或“生命周期事件”，例如“渲染后”或“卸载前”。这种思维方式很快就会变得复杂，所以最好避免。</p><p><strong>相反，始终专注于一次启动/停止循环。组件是挂载、更新还是卸载都无关紧要。您需要做的就是描述如何开始同步以及如何停止同步。如果你做得好，你的 Effect 将能够根据需要多次启动和停止。</strong></p><h3 id="每个-Effect-代表一个单独的同步过程"><a href="#每个-Effect-代表一个单独的同步过程" class="headerlink" title="每个 Effect 代表一个单独的同步过程"></a>每个 Effect 代表一个单独的同步过程</h3><p><strong>代码中的每一个 Effect 都应该代表一个单独且独立的同步过程</strong></p><p>如果多个 Effect 不会相互影响，那么把他们分开是一个好的选择。<br>另一方面，如果将一个内聚的逻辑片段拆分成单独的 Effect，代码可能看起来“更干净”，但会更难维护。这就是为什么你应该考虑进程是相同的还是分开的，而不是代码是否看起来更清晰。</p><h3 id="关于依赖项"><a href="#关于依赖项" class="headerlink" title="关于依赖项"></a>关于依赖项</h3><p>具体的来说，你需要将依赖项得是<strong>反应性</strong>的<br>而传入 Effect 的组件主体中的所有变量都是<strong>反应性</strong>的，都应该作为依赖项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId, selectedServerUrl &#125;</span>) &#123;<br>  <span class="hljs-comment">// roomId is reactive</span><br>  <span class="hljs-keyword">const</span> settings = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">SettingsContext</span>); <span class="hljs-comment">// settings is reactive</span><br>  <span class="hljs-keyword">const</span> serverUrl = selectedServerUrl ?? settings.<span class="hljs-property">defaultServerUrl</span>; <span class="hljs-comment">// serverUrl is reactive</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId); <span class="hljs-comment">// Your Effect reads roomId and serverUrl</span><br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, [roomId, serverUrl]); <span class="hljs-comment">// So it needs to re-synchronize when either of them changes!</span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>比如说上面的 roomId 和 serverUrl<br>换句话说，Effects 对来自组件主体的所有值做出“反应”。</p><blockquote><p>React 会帮你检查是否将每个反应值指定为依赖项，叫做 lint 错误</p></blockquote><h4 id="不想同步怎么办"><a href="#不想同步怎么办" class="headerlink" title="不想同步怎么办"></a>不想同步怎么办</h4><p>如果 serverUrl 和 roomId 不依赖于渲染并且始终具有相同的值，则可以将它们移到组件之外。现在它们不需要是依赖项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&quot;https://localhost:1234&quot;</span>; <span class="hljs-comment">// serverUrl is not reactive</span><br><span class="hljs-keyword">const</span> roomId = <span class="hljs-string">&quot;general&quot;</span>; <span class="hljs-comment">// roomId is not reactive</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, []); <span class="hljs-comment">// ✅ All dependencies declared</span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>您也可以将它们移动到 Effect 中。它们不是在渲染过程中计算的，所以它们不是反应式的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&quot;https://localhost:1234&quot;</span>; <span class="hljs-comment">// serverUrl is not reactive</span><br>    <span class="hljs-keyword">const</span> roomId = <span class="hljs-string">&quot;general&quot;</span>; <span class="hljs-comment">// roomId is not reactive</span><br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, []); <span class="hljs-comment">// ✅ All dependencies declared</span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>你不能“选择”你的依赖。您的依赖项必须包括您在 Effect 中读取的每个反应值。 linter 强制执行此操作。有时这可能会导致无限循环等问题，并导致您的 Effect 过于频繁地重新同步。不要通过抑制 linter 来解决这些问题！以下是尝试的方法：</p><ul><li>检查您的 Effect 是否代表一个独立的同步过程。如果您的 Effect 不同步任何东西，它可能是不必要的。如果它同步几个独立的东西，把它分开。</li><li>如果你想读取道具或状态的最新值而不对其做出“反应”并重新同步效果，你可以将你的效果分成一个反应部分（你将保留在效果中）和一个非反应部分（您将提取到称为效果事件的东西中）。</li><li>避免依赖对象和函数作为依赖项。如果您在渲染期间创建对象和函数，然后从 Effect 中读取它们，则它们在每次渲染时都会不同。这将导致您的效果器每次都重新同步。</li></ul><p>总而言之，如果 Effect 使用了渲染过程中改变的值，就得将其放入依赖项</p><h3 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h3><ul><li>组件可以挂载、更新和卸载。</li></ul><ul><li>每个 Effect 都有一个独立于周围组件的生命周期。</li><li>每个 Effect 都描述了一个可以启动和停止的单独同步过程。</li><li>当您编写和阅读 Effects 时，请从每个单独的 Effect 的角度（如何开始和停止同步）而不是从组件的角度（它如何安装、更新或卸载）思考。</li><li>在组件体内声明的值是“反应性的”。</li><li>反应值应该重新同步效果，因为它们会随时间变化。</li><li>linter 验证 Effect 中使用的所有反应值是否都指定为依赖项。</li><li>linter 标记的所有错误都是合法的。总有一种方法可以修复代码以不违反规则。</li></ul><h2 id="事件处理程序与-Effect"><a href="#事件处理程序与-Effect" class="headerlink" title="事件处理程序与 Effect"></a>事件处理程序与 Effect</h2><p>事件处理程序是用户对应用有特殊的交互才执行的代码<br>Effect 是用户需要应用的时候就执行的代码</p><p>直观的说：事件处理程序总是“手动”触发的，效果器是“自动”的。</p><h3 id="从-Effect-中提取非反应性逻辑"><a href="#从-Effect-中提取非反应性逻辑" class="headerlink" title="从 Effect 中提取非反应性逻辑"></a>从 Effect 中提取非反应性逻辑</h3><p>试想一下，一个聊天室有 Id 和 theme 两个反应性变量，你运用 Effect 的时候必须将其都放入依赖项，可是你并不希望每次更换主题都重新链接一下聊天室<br>这个时候你就需要用到 useEffectEvent：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId, theme &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> onConnected = <span class="hljs-title function_">useEffectEvent</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">showNotification</span>(<span class="hljs-string">&quot;Connected!&quot;</span>, theme);<br>  &#125;);<br>  <span class="hljs-comment">//此处， onConnected 称为效果事件。它是 Effect 逻辑的一部分，但它的行为更像一个事件处理程序。它内部的逻辑不是反应式的，它总是“看到”你的道具和状态的最新值。</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;connected&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">onConnected</span>();<br>    &#125;);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId]); <span class="hljs-comment">// ✅ All dependencies declared</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个代码中，我们把 theme 放到了一个 useEffectEvent 的函数中，这样在 useEffect 中就可以触发，也不需要添加依赖项</p><p>Effect Events 让您可以修复许多您可能想要抑制依赖性 linter 的模式。</p><h3 id="useEffectEvent-使用非常有限"><a href="#useEffectEvent-使用非常有限" class="headerlink" title="useEffectEvent 使用非常有限"></a>useEffectEvent 使用非常有限</h3><ul><li>Only call them from inside Effects.</li><li>Never pass them to other components or Hooks.</li><li>始终直接在使用它们的 Effect 旁边声明效果事件</li></ul><h3 id="摘要-5"><a href="#摘要-5" class="headerlink" title="摘要"></a>摘要</h3><ul><li>事件处理程序运行以响应特定的交互。</li><li>您可以将非反应性逻辑从 Effects 移动到 Effect Events。</li><li>只要需要同步，效果就会运行</li><li>事件处理程序中的逻辑不是反应性的。</li><li>Effects 内部的逻辑是反应式的。</li><li>您可以将非反应性逻辑从 Effects 移动到 Effect Events。</li><li>仅从 Effects 内部调用 Effect Events。</li><li>不要将 Effect Events 传递给其他组件或 Hooks。</li></ul><h2 id="关于依赖项-1"><a href="#关于依赖项-1" class="headerlink" title="关于依赖项"></a>关于依赖项</h2><p>这里是一些关于依赖项的问题</p><ul><li>依赖项始终与代码匹配</li><li>当您对依赖项不满意时，您需要编辑的是代码。</li><li>抑制 linter 会导致非常混乱的错误，您应该始终避免它。</li><li>要删除依赖项，您需要向 linter“证明”它不是必需的。</li><li>如果某些代码应该运行以响应特定的交互，请将该代码移至事件处理程序。</li><li>如果您的 Effect 的不同部分因不同原因需要重新运行，请将其拆分为多个 Effect。</li><li>如果你想根据以前的状态更新一些状态，传递一个更新函数。</li><li>如果您想读取最新值而不对其进行“反应”，请从您的效果中提取一个效果事件。</li><li>在 JavaScript 中，如果对象和函数是在不同时间创建的，则它们被认为是不同的。</li><li>尽量避免对象和函数依赖。将它们移到组件外或 Effect 内</li></ul><p>具体实例可以查阅<a href="https://react.docschina.org/learn/removing-effect-dependencies">官方文档</a></p><h2 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h2><p><strong>自定义 Hook 让你可以在组件之间共享逻辑，将你组件相同的逻辑移到你的 Hook 中去</strong></p><p>这是一个自定义 Hook 的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useCounter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> id = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c + <span class="hljs-number">1</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">clearInterval</span>(id);<br>  &#125;, []);<br>  <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>记住你的 Hook 需要有一个返回值以便你在你的应用中可以使用</p><p>并且在你的 app.js 中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useCounter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useCounter.js&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">useCounter</span>();<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Seconds passed: &#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自定义 Hook 必须以 use 开头，就像 React 组件必须以大写字母开头</strong></p><p><strong>自定义 Hook 只共享状态逻辑而非状态本身，确保你的 Hook 目的明确</strong></p><p><strong>你可以将反应值从一个 Hook 传递到另一个 Hook，并且它们会保持最新。</strong></p><p><strong>每次您的组件重新渲染时，所有 Hooks 都会重新运行。</strong></p><p><strong>你的自定义 Hooks 的代码应该是纯净的，就像你的组件的代码一样</strong></p><p><strong>将自定义 Hook 接收到的事件处理程序包装到 Effect Events 中。</strong></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="useMemo-和-useCallback"><a href="#useMemo-和-useCallback" class="headerlink" title="useMemo 和 useCallback"></a>useMemo 和 useCallback</h3><blockquote><p>很少用并且也不推荐使用<br>但你还是得学</p></blockquote><p>useMemo 和 useCallback 都是 react 内部自带的 hook<br>用法大同小异：一个用于缓存值，一个用于缓存函数<br>但记住这两个只适用于性能优化，而不是实现功能<br><a href="https://react.docschina.org/reference/react/useMemo">useMemo</a><br><a href="https://react.docschina.org/reference/react/useCallback#updating-state-from-a-memoized-callback">useCallback</a></p><h3 id="update-function"><a href="#update-function" class="headerlink" title="update function"></a>update function</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">setAge</span>(age + <span class="hljs-number">1</span>); <span class="hljs-comment">// setAge(42 + 1)</span><br>  <span class="hljs-title function_">setAge</span>(age + <span class="hljs-number">1</span>); <span class="hljs-comment">// setAge(42 + 1)</span><br>  <span class="hljs-title function_">setAge</span>(age + <span class="hljs-number">1</span>); <span class="hljs-comment">// setAge(42 + 1)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>react 中这个结果其实是 43 而非 45</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">setAge</span>(<span class="hljs-function">(<span class="hljs-params">a</span>) =&gt;</span> a + <span class="hljs-number">1</span>); <span class="hljs-comment">// setAge(42 =&gt; 43)</span><br>  <span class="hljs-title function_">setAge</span>(<span class="hljs-function">(<span class="hljs-params">a</span>) =&gt;</span> a + <span class="hljs-number">1</span>); <span class="hljs-comment">// setAge(43 =&gt; 44)</span><br>  <span class="hljs-title function_">setAge</span>(<span class="hljs-function">(<span class="hljs-params">a</span>) =&gt;</span> a + <span class="hljs-number">1</span>); <span class="hljs-comment">// setAge(44 =&gt; 45)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>你可以向 setAge 传递一个 更新函数，而不是下一个状态<br>这样就是 45</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>自此，React 的初步内容学习完毕，前面简单后面难，并且写到后面肉眼可见的简陋（主要是自己也没看太懂）</p><p>参考内容<a href="https://react.docschina.org/learn">React 原文档</a></p><p>下一步继续深入 React，顺带学习学习 Next.js</p><h1 id="ReactRouter6"><a href="#ReactRouter6" class="headerlink" title="ReactRouter6"></a>ReactRouter6</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><blockquote><p>安装 npm install react-router-dom</p></blockquote><ol><li><p>React Router 以三个不同的包发布到 npm 上，它们分别为：</p><ol><li>react-router: 路由的核心库，提供了很多的：组件、钩子。</li><li><strong style="color:#dd4d40"><strong>react-router-dom:</strong></strong > <strong style="color:#dd4d40">包含 react-router 所有内容，并添加一些专门用于 DOM 的组件，例如 <code>&lt;BrowserRouter&gt;</code>等 </strong>。</li><li>react-router-native: 包括 react-router 所有内容，并添加一些专门用于 ReactNative 的 API，例如:<code>&lt;NativeRouter&gt;</code>等。</li></ol></li><li><p>与 React Router 5.x 版本相比，改变了什么？</p><ol><li><p>内置组件的变化：移除<code>&lt;Switch/&gt;</code> ，新增 <code>&lt;Routes/&gt;</code>等。</p></li><li><p>语法的变化：<code>component=&#123;About&#125;</code> 变为 <code>element=&#123;&lt;About/&gt;&#125;</code>等。</p></li><li><p>新增多个 hook：<code>useParams</code>、<code>useNavigate</code>、<code>useMatch</code>等。</p></li><li><p><strong style="color:#dd4d40">官方明确推荐函数式组件了！！！</strong></p><p>……</p></li></ol></li></ol><h2 id="2-Component"><a href="#2-Component" class="headerlink" title="2.Component"></a>2.Component</h2><h3 id="1-lt-BrowserRouter-gt"><a href="#1-lt-BrowserRouter-gt" class="headerlink" title="1. &lt;BrowserRouter&gt;"></a>1. <code>&lt;BrowserRouter&gt;</code></h3><ol><li><p>说明：<code>&lt;BrowserRouter&gt; </code>用于包裹整个应用。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span>&#123;/* 整体结构（通常为App组件） */&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span>,<br>  root<br>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-lt-HashRouter-gt"><a href="#2-lt-HashRouter-gt" class="headerlink" title="2. &lt;HashRouter&gt;"></a>2. <code>&lt;HashRouter&gt;</code></h3><ol><li>说明：作用与<code>&lt;BrowserRouter&gt;</code>一样，但<code>&lt;HashRouter&gt;</code>修改的是地址栏的 hash 值。</li><li>备注：6.x 版本中<code>&lt;HashRouter&gt;</code>、<code>&lt;BrowserRouter&gt; </code> 的用法与 5.x 相同。</li></ol><h3 id="3-lt-Routes-gt-与-lt-Route-gt"><a href="#3-lt-Routes-gt-与-lt-Route-gt" class="headerlink" title="3. &lt;Routes/&gt; 与 &lt;Route/&gt;"></a>3. <code>&lt;Routes/&gt; 与 &lt;Route/&gt;</code></h3><ol><li><p>v6 版本中移出了先前的<code>&lt;Switch&gt;</code>，引入了新的替代者：<code>&lt;Routes&gt;</code>。</p></li><li><p><code>&lt;Routes&gt;</code> 和 <code>&lt;Route&gt;</code>要配合使用，且必须要用<code>&lt;Routes&gt;</code>包裹<code>&lt;Route&gt;</code>。</p></li><li><p><code>&lt;Route&gt;</code> 相当于一个 if 语句，如果其路径与当前 URL 匹配，则呈现其对应的组件。</p></li><li><p><code>&lt;Route caseSensitive&gt;</code> 属性用于指定：匹配时是否区分大小写（默认为 false）。</p></li><li><p>当 URL 发生变化时，<code>&lt;Routes&gt; </code>都会查看其所有子<code> &lt;Route&gt;</code> 元素以找到最佳匹配并呈现组件 。</p></li><li><p><code>&lt;Route&gt;</code> 也可以嵌套使用，且可配合<code>useRoutes()</code>配置 “路由表” ，但需要通过 <code>&lt;Outlet&gt;</code> 组件来渲染其子路由。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Routes</span>&gt;<br>  <span class="hljs-comment">/*path属性用于定义路径，element属性用于定义当前路径所对应的组件*/</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Login</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br>  <span class="hljs-comment">/*用于定义嵌套路由，home是一级路由，对应的路径/home*/</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;home&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Home</span> /&gt;</span>&#125;&gt;</span><br><span class="language-xml">    /*test1 和 test2 是二级路由,对应的路径是/home/test1 或 /home/test2*/</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;test1&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Test</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;test2&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Test2</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br>  <span class="hljs-comment">//Route也可以不写element属性, 这时就是用于展示嵌套的路由 .所对应的路径是/users/xxx</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;users&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Demo</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Routes</span>&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-lt-Link-gt"><a href="#4-lt-Link-gt" class="headerlink" title="4. &lt;Link&gt;"></a>4. <code>&lt;Link&gt;</code></h3><ol><li><p>作用: 修改 URL，且不发送网络请求（路由链接）。</p></li><li><p>注意: 外侧需要用<code>&lt;BrowserRouter&gt;</code>或<code>&lt;HashRouter&gt;</code>包裹。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/路径&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="5-lt-NavLink-gt"><a href="#5-lt-NavLink-gt" class="headerlink" title="5. &lt;NavLink&gt;"></a>5. <code>&lt;NavLink&gt;</code></h3><ol><li><p>作用: 与<code>&lt;Link&gt;</code>组件类似，且可实现导航的“高亮”效果。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 注意: NavLink默认类名是active，下面是指定自定义的class</span><br><br><span class="hljs-comment">//自定义样式</span><br>&lt;<span class="hljs-title class_">NavLink</span><br>    to=<span class="hljs-string">&quot;login&quot;</span><br>    className=&#123;<span class="hljs-function">(<span class="hljs-params">&#123; isActive &#125;</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;home&#x27;</span>, isActive)<br>        <span class="hljs-keyword">return</span> isActive ? <span class="hljs-string">&#x27;base one&#x27;</span> : <span class="hljs-string">&#x27;base&#x27;</span><br>    &#125;&#125;<br>&gt;login&lt;/<span class="hljs-title class_">NavLink</span>&gt;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">默认情况下，当Home的子组件匹配成功，Home的导航也会高亮，</span><br><span class="hljs-comment">当NavLink上添加了end属性后，若Home的子组件匹配成功，则Home的导航没有高亮效果。</span><br><span class="hljs-comment">*/</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;home&quot;</span> <span class="hljs-attr">end</span> &gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol><h3 id="6-lt-Navigate-gt"><a href="#6-lt-Navigate-gt" class="headerlink" title="6. &lt;Navigate&gt;"></a>6. <code>&lt;Navigate&gt;</code></h3><ol><li><p>作用：只要<code>&lt;Navigate&gt;</code>组件被渲染，就会修改路径，切换视图。</p></li><li><p><code>replace</code>属性用于控制跳转模式（push 或 replace，默认是 push）。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigate</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [sum, setSum] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是Home的内容<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;/* 根据sum的值决定是否切换视图 */&#125;</span><br><span class="language-xml">      &#123;sum === 1 ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>sum的值为&#123;sum&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">replace</span>=<span class="hljs-string">&#123;true&#125;</span> /&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setSum(2)&#125;&gt;点我将sum变为2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="7-lt-Outlet-gt"><a href="#7-lt-Outlet-gt" class="headerlink" title="7. &lt;Outlet&gt;"></a>7. <code>&lt;Outlet&gt;</code></h3><ol><li><p>当<code>&lt;Route&gt;</code>产生嵌套时，渲染其对应的后续子路由。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//根据路由表生成对应的路由规则</span><br><span class="hljs-keyword">const</span> element = <span class="hljs-title function_">useRoutes</span>([<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">About</span> /&gt;</span></span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;news&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">News</span> /&gt;</span></span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;message&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Message</span> /&gt;</span></span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>]);<br><br><span class="hljs-comment">//Home.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavLink</span>, <span class="hljs-title class_">Outlet</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Home组件内容<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list-group-item&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span></span><br><span class="language-xml">              News</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list-group-item&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></span><br><span class="language-xml">              Message</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 指定路由组件呈现的位置 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3.Hooks"></a>3.Hooks</h2><h3 id="1-useRoutes"><a href="#1-useRoutes" class="headerlink" title="1. useRoutes()"></a>1. useRoutes()</h3><ol><li><p>作用：根据路由表，动态创建<code>&lt;Routes&gt;</code>和<code>&lt;Route&gt;</code>。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//路由表配置：src/routes/index.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/About&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Home&#x27;</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Navigate</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">About</span>/&gt;</span></span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span>/&gt;</span></span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br><span class="hljs-attr">element</span>:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>/&gt;</span></span><br>&#125;<br>]<br><br><span class="hljs-comment">//App.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">NavLink</span>,useRoutes&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./routes&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">//根据路由表生成对应的路由规则</span><br><span class="hljs-keyword">const</span> element = <span class="hljs-title function_">useRoutes</span>(routes)<br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">......</span><br><span class="language-xml">      &#123;/* 注册路由 */&#125;</span><br><span class="language-xml">      &#123;element&#125;</span><br><span class="language-xml">  ......</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-useNavigate"><a href="#2-useNavigate" class="headerlink" title="2. useNavigate()"></a>2. useNavigate()</h3><ol><li><p>作用：返回一个函数用来实现编程式导航。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handle</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-comment">//第一种使用方式：指定具体的路径</span><br>    <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/login&quot;</span>, &#123;<br>      <span class="hljs-attr">replace</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;,<br>    &#125;);<br>    <span class="hljs-comment">//第二种使用方式：传入数值进行前进或后退，类似于5.x中的 history.go()方法</span><br>    <span class="hljs-title function_">navigate</span>(-<span class="hljs-number">1</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handle&#125;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-useParams"><a href="#3-useParams" class="headerlink" title="3. useParams()"></a>3. useParams()</h3><ol><li><p>作用：回当前匹配路由的<code>params</code>参数，类似于 5.x 中的<code>match.params</code>。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Routes</span>, <span class="hljs-title class_">Route</span>, useParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./pages/User.jsx&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ProfilePage</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 获取URL中携带过来的params参数</span><br>  <span class="hljs-keyword">let</span> &#123; id &#125; = <span class="hljs-title function_">useParams</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;users/:id&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">User</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-useSearchParams"><a href="#4-useSearchParams" class="headerlink" title="4. useSearchParams()"></a>4. useSearchParams()</h3><ol><li><p>作用：用于读取和修改当前位置的 URL 中的查询字符串。</p></li><li><p>返回一个包含两个值的数组，内容分别为：当前的 seaech 参数、更新 search 的函数。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useSearchParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Detail</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [search, setSearch] = <span class="hljs-title function_">useSearchParams</span>();<br>  <span class="hljs-keyword">const</span> id = search.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;id&quot;</span>);<br>  <span class="hljs-keyword">const</span> title = search.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;title&quot;</span>);<br>  <span class="hljs-keyword">const</span> content = search.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;content&quot;</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setSearch(&quot;id=008&amp;title=哈哈&amp;content=嘻嘻&quot;)&#125;&gt;</span><br><span class="language-xml">          点我更新一下收到的search参数</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>消息编号：&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>消息标题：&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>消息内容：&#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="5-useLocation"><a href="#5-useLocation" class="headerlink" title="5. useLocation()"></a>5. useLocation()</h3><ol><li><p>作用：获取当前 location 信息，对标 5.x 中的路由组件的<code>location</code>属性。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useLocation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Detail</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> x = <span class="hljs-title function_">useLocation</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;@&quot;</span>, x);<br>  <span class="hljs-comment">// x就是location对象:</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">      hash: &quot;&quot;,</span><br><span class="hljs-comment">      key: &quot;ah9nv6sz&quot;,</span><br><span class="hljs-comment">      pathname: &quot;/login&quot;,</span><br><span class="hljs-comment">      search: &quot;?name=zs&amp;age=18&quot;,</span><br><span class="hljs-comment">      state: &#123;a: 1, b: 2&#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">*/</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>消息编号：&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>消息标题：&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>消息内容：&#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="6-useMatch"><a href="#6-useMatch" class="headerlink" title="6. useMatch()"></a>6. useMatch()</h3><ol><li><p>作用：返回当前匹配信息，对标 5.x 中的路由组件的<code>match</code>属性。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Route</span> path=<span class="hljs-string">&quot;/login/:page/:pageSize&quot;</span> element=&#123;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span> /&gt;</span></span>&#125;/&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login/1/10&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Login</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> match = <span class="hljs-title function_">useMatch</span>(<span class="hljs-string">&#x27;/login/:x/:y&#x27;</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(match) <span class="hljs-comment">//输出match对象</span><br>  <span class="hljs-comment">//match对象内容如下：</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  &#123;</span><br><span class="hljs-comment">      params: &#123;x: &#x27;1&#x27;, y: &#x27;10&#x27;&#125;</span><br><span class="hljs-comment">      pathname: &quot;/LoGin/1/10&quot;</span><br><span class="hljs-comment">      pathnameBase: &quot;/LoGin/1/10&quot;</span><br><span class="hljs-comment">      pattern: &#123;</span><br><span class="hljs-comment">      path: &#x27;/login/:x/:y&#x27;,</span><br><span class="hljs-comment">      caseSensitive: false,</span><br><span class="hljs-comment">      end: false</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="7-useInRouterContext"><a href="#7-useInRouterContext" class="headerlink" title="7. useInRouterContext()"></a>7. useInRouterContext()</h3><p>​ 作用：如果组件在 <code>&lt;Router&gt;</code> 的上下文中呈现，则 <code>useInRouterContext</code> 钩子返回 true，否则返回 false。</p><h3 id="8-useNavigationType"><a href="#8-useNavigationType" class="headerlink" title="8. useNavigationType()"></a>8. useNavigationType()</h3><ol><li>作用：返回当前的导航类型（用户是如何来到当前页面的）。</li><li>返回值：<code>POP</code>、<code>PUSH</code>、<code>REPLACE</code>。</li><li>备注：<code>POP</code>是指在浏览器中直接打开了这个路由组件（刷新页面）。</li></ol><h3 id="9-useOutlet"><a href="#9-useOutlet" class="headerlink" title="9. useOutlet()"></a>9. useOutlet()</h3><ol><li><p>作用：用来呈现当前组件中渲染的嵌套路由。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">useOutlet</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br><span class="hljs-comment">// 如果嵌套路由没有挂载,则result为null</span><br><span class="hljs-comment">// 如果嵌套路由已经挂载,则展示嵌套的路由对象</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="10-useResolvedPath"><a href="#10-useResolvedPath" class="headerlink" title="10.useResolvedPath()"></a>10.useResolvedPath()</h3><ol><li>作用：给定一个 URL 值，解析其中的：path、search、hash 值。</li></ol><h1 id="React-状态管理工具"><a href="#React-状态管理工具" class="headerlink" title="React 状态管理工具"></a>React 状态管理工具</h1><p><strong>React 自带：</strong> props,Context<br><strong>单向数据流：</strong>Flux(被 Redux 平替)，Redux(Redux-toolkit)<br><strong>双向数据绑定：</strong>Mobx<br><strong>原子型状态管理：</strong>Recoil、Jotai<br><strong>异步操作密集型：</strong>Rxjs</p><h2 id="Local-State-props"><a href="#Local-State-props" class="headerlink" title="Local State-props"></a>Local State-props</h2><p>React 原生自带的组件之间传递信息的方式，从父组件单向传递给子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">//Child1</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child1</span> = (<span class="hljs-params">&#123;name1, ...otherProps&#125;</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>&#123;name1&#125;<span class="hljs-tag">&lt;/&gt;</span></span><br>&#125;<br><span class="hljs-comment">//Child2 5491</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child2</span> = (<span class="hljs-params"> &#123;name2&#125;</span>)=&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>&#123;name2&#125;<span class="hljs-tag">&lt;/&gt;</span></span><br>&#125;<br><span class="hljs-comment">// Parent</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Parent</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><br>    <span class="hljs-keyword">const</span> [name1 ,setName1] = useState ( <span class="hljs-string">&quot;Tom&quot;</span><span class="hljs-string">&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    const [name2 ,setName2] = useState ( &quot;Jerry&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">return &lt;&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &lt;Child1 name1=&#123;name1&#125; name2=&#123;name2&#125;&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &lt;Child2 name2=&#123;name2&#125; /&gt;</span><br><span class="hljs-string">    &lt;/&gt;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>但是当父组件与子组件之间的层级关系过于多的时候，一层一层传递 props 显得过于臃肿<br>所以就引申出了 Context 这种状态管理<br>移步到<a href="/2023/04/15/React/index.html">React</a>查看如何编写一个 Context</p><p>但是 Context 也存在一些问题</p><ol><li>Context 相当于全局变量,难以追溯数据的变更情况</li><li>使用 Context 的组件内部耦合度太高，不利于组件的复用和单元测试</li><li>会产生不必要的更新(比如会穿透 memo 和 dependicies 等)</li><li>Context 只能存储单一值，无法存储多个各自拥有消费者的值的集合</li><li>粒度也不太好控制，不能细粒度的区分组件依赖了哪一个 Context</li><li>多个 Context 会存在层层嵌套的问题</li></ol><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>Redux 是由 Flux 演变而来的，Flux 是 Facebook 官方给出的应用架构，利用数据的单向流动的形式对公共状态进行管理，不过现在已经被 Redux 平替了。</p><p>Redux 比较适用用于大型 Web 项目，尤其是一些交互比较复杂，组件通信频繁的场景，状态可预测和回溯是非常有价值的。</p><p><a href="https://cn.redux.js.org/">Redux 中文官网</a></p><blockquote><p>推荐顺带学习 Redux-toolkit，是官方推荐的高效的 redux 状态管理工具集<br>能够简化 Redux 开发，包括配置 store，定义 reducer 等等，而且也提供了完整的 React hooks，可以方便 react 函数组件中使用 Redux toolkit</p></blockquote><h2 id="Redux-toolkit-中文官网"><a href="#Redux-toolkit-中文官网" class="headerlink" title="Redux-toolkit 中文官网"></a><a href="https://redux-toolkit.js.org/">Redux-toolkit 中文官网</a></h2><p>更新；可以去看看我的另一篇文章<a href="https://www.yygod0120.com/2023/06/05/Redux/">Redux</a></p><h2 id="Zustand"><a href="#Zustand" class="headerlink" title="Zustand"></a>Zustand</h2><p>Zustand 是主打轻量级的状态管理工具，没有 Redux 那样臃肿的设计，也没有兼容 React 类组件的历史包袱，Zustand 状态管理工具体积很小，所以很适合移动端的网页。</p><p>Zustand 的使用极其简单，初始化过程中，我们不仅可以保存状态，也能在初始化的时候制定方法和函数<br><img src="/zustand.png" alt="Zustand的案例"></p><p>Zustand 库的核心 API 和 Redux 极为相似，区别主要在于状态的更新，Redux 通过 dispatch 和 reducer 函数进行状态更新，而 Zustand 则是通过 setState 来直接修改状态</p><table><thead><tr><th></th><th>Redux</th><th>Zustand</th></tr></thead><tbody><tr><td>创建 Store</td><td><code>createStore(reducer,[preloadedState],[enhance])</code></td><td><code>createStore()</code></td></tr><tr><td>获取 state</td><td><code>getState()</code></td><td><code>getState()</code></td></tr><tr><td>监听 state 的变化</td><td><code>subscribe(listener)</code></td><td><code>subscribe(listener)</code></td></tr><tr><td>更新 state</td><td><code>dispatch(action)</code></td><td><code>setState()</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS常用方法</title>
    <link href="/2023/10/06/JS%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2023/10/06/JS%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>菜鸡轻喷</p></blockquote><h1 id="数字-and-字符串"><a href="#数字-and-字符串" class="headerlink" title="数字 and 字符串"></a>数字 and 字符串</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> number = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> string = number.<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">// &#x27;0&#x27;</span><br><span class="hljs-keyword">const</span> paresInt = <span class="hljs-built_in">parseInt</span>(<span class="hljs-number">1.5</span>); <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">const</span> abs = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(-<span class="hljs-number">1</span>); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>pop():删除数组尾部元素<br>shift():删除数组头部元素<br>push():从尾部增加元素<br>unshift():从头部增加元素<br>sort(fn):排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>nums.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">//[1,2,3]</span><br>nums.<span class="hljs-title function_">shift</span>(); <span class="hljs-comment">//[2,3,4]</span><br>nums.<span class="hljs-title function_">push</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">//[1,2,3,4,5]</span><br>nums.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//[0,1,2,3,4]</span><br></code></pre></td></tr></table></figure><blockquote><p>会改变原数组</p></blockquote><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>Object.keys():返回一个对象全部键的数组<br>Object.values():返回一个对象全部值的数组</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>长沙之旅</title>
    <link href="/2023/10/03/%E9%95%BF%E6%B2%99%E4%B9%8B%E6%97%85/"/>
    <url>/2023/10/03/%E9%95%BF%E6%B2%99%E4%B9%8B%E6%97%85/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下次记得国庆多呆一天</p></blockquote><h1 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h1><p>提前好几天约的师傅不知道是睡过头了还是不想接我这一单，并没有来接我，校门口的黄色法拉利也不见了，只剩下了黑车。一辆车 8 个人，好在价格也没有多离谱，也按时到了火车站</p><p>长沙比武汉近，6 个小时左右，在下午 3 点就到长沙了</p><p>这次吸取武汉的教训，把酒店定在了地铁旁边，还就在高铁站附近</p><img src="../长沙之旅/IMG_3860(20231003-183823).JPG" alt="房间" width="600" height="400"><p>中秋节晚上，五一广场的街上就已经爆满，到处都是网红店的宣传，可能就趁这几天涨涨业绩<br><img src="../长沙之旅/IMG_3630.JPG" alt="五一广场" width="600" height="400"></p><p>我们还是受不住各自宣传推销,走近了一家网红店吃小龙虾，但是最后选择了罗氏虾<br>不过味道实在一般，甚至不如我妈煮的味道。价格却不一般，差不多 4 道菜就花掉 300 大洋<br><img src="../长沙之旅/IMG_3861(20230929-190127).JPG" alt="靓虾二哥" width="600" height="400"><br><img src="../长沙之旅/IMG_3862(20230929-190008).JPG" alt="靓虾二哥" width="600" height="400"><br><img src="../长沙之旅/IMG_3863(20230929-194926).JPG" alt="靓虾二哥" width="600" height="400"><br>IMG_3662</p><hr><p>吃完饭，散散步，一路走到杜甫江阁<br>路上还被黑心手工艺人骗走 188，留下一幅<del>大众样</del>剪纸<br><img src="../长沙之旅/IMG_3662.JPG" alt="188的剪纸" width="600" height="400"></p><p>杜甫江阁有专门拍照的的，设备挺齐全，会教我们摆 pose，拍的照片质量高，价格还可以，和剪纸可以说是鲜明对比。</p><p>如果自己有相机，估计也能拍出这样的图<br><img src="../长沙之旅/IMG_3663(20231003-023127).JPG" alt="杜甫江阁" width="600" height="400"><br><img src="../长沙之旅/IMG_3643.JPG" alt="杜甫江阁" width="600" height="400"></p><h1 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h1><p>俩个人旅游，主打的就是睡到自然醒<br>早餐也不可能出酒店吃<br>早餐<br><img src="../长沙之旅/IMG_3836(20231003-023128).JPG" alt="10点的早餐" width="600" height="400"><br>中午逛完博物馆，其实也就看了两个展厅，反正门票不用钱<br>直接回酒店吃午餐（外卖）<br>午餐<br><img src="../长沙之旅/IMG_3842(20231003-023128).JPG" alt="主打的就是丰富" width="600" height="400"><br>休整一下</p><p>晚上去了杨帆夜市，唯二两顿不在酒店吃的正餐<br>全国美食街估计都这个味道，就只是去凑凑热闹<br><img src="../长沙之旅/IMG_3840(20231003-023128).JPG" alt="杨帆夜市" width="600" height="400"><br><img src="../长沙之旅/IMG_3841(20231003-023128).JPG" alt="杨帆夜市" width="600" height="400"><br><img src="../长沙之旅/IMG_3839(20231003-023128).JPG" alt="杨帆夜市" width="600" height="400"><br><img src="../长沙之旅/IMG_3721.JPG" alt="杨帆夜市" width="600" height="400"><br><img src="../长沙之旅/IMG_3725.JPG" alt="杨帆夜市" width="600" height="400"><br>逛完美食街还早，想着去渔人码头又太远，就又绕去五一广场了。<br>可惜文和友要排队而且人很多，在外面看了看，和福州的 M17 广场差不了太多，就算了</p><p>夜市没吃饱，少不了夜宵<br><img src="../长沙之旅/IMG_3837(20231003-023128).JPG" alt="一天四顿" width="600" height="400"></p><h1 id="day3"><a href="#day3" class="headerlink" title="day3"></a>day3</h1><p>早上出门晚 ，差点进不去橘子洲头,12 点的票，11 点 57 分进去<br><img src="../长沙之旅/IMG_3835(20231003-023128).JPG" alt="每个景区都少不了的纪念雪糕，不如武汉的好吃" width="600" height="400"></p><img src="../长沙之旅/IMG_3805.JPG" alt="江边健身道" width="600" height="400"><img src="../长沙之旅/IMG_3781.JPG" alt="青年毛" width="600" height="400"><p>走到腿断掉,果断选择酒店看电影</p><p>晚上的渔人码头，没有想象中的那么好，就是一个靠江边吃小龙虾的地方，甚至不如夜市，如果人多来聚一聚吃个龙虾也不错<br><img src="../长沙之旅/IMG_3828.JPG" alt="江边美女" width="600" height="400"></p><img src="../长沙之旅/IMG_3832(20231003-023128).JPG" alt="加了红糖的糍粑罢了" width="600" height="400"><h1 id="day4"><a href="#day4" class="headerlink" title="day4"></a>day4</h1><p>快乐的时光总是很短暂，离别从来都很伤感，四天三夜还是太快</p><p>8 天的假期，应该玩上 5 天 4 夜的</p><img src="../长沙之旅/IMG_3843.JPG" alt="最后一顿" width="600" height="400"><hr><p>其实长沙没武汉大，从地铁就能看出来，但我感觉玩的比武汉开心，可能在吃这一方面比上次武汉吃的多得多，基本每一天晚上都吃了夜宵<br>靠地铁近，不用每次都打车也省下了一笔交通费</p>]]></content>
    
    
    <categories>
      
      <category>旅游</category>
      
    </categories>
    
    
    <tags>
      
      <tag>玩!</tag>
      
      <tag>旅游</tag>
      
      <tag>长沙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TheFirstRedrockProject</title>
    <link href="/2023/09/18/TheFirstRedrockProject/"/>
    <url>/2023/09/18/TheFirstRedrockProject/</url>
    
    <content type="html"><![CDATA[<blockquote><p>第一个团队合作项目</p></blockquote><p>收获：</p><ul><li>git</li><li>团队协作<br><a href="http://fe-prod.redrock.cqupt.edu.cn/venue-application-backstage/">项目地址</a></li></ul><h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><ol><li>React</li><li>Typescript</li><li>Vite</li><li>Recoil</li><li>ANTD</li><li>Mock</li><li>module.less</li><li>pnpm</li></ol><h1 id="拆分模块"><a href="#拆分模块" class="headerlink" title="拆分模块"></a>拆分模块</h1><ol><li><p>其余场地申请</p><ul><li>申请列表</li><li>时间表</li></ul></li><li><p>科技会堂场地申请 - 申请列表 - 时间表</p></li></ol><p>二者差异不大，主要是在一些弹窗以及内容上的区别</p><h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><ul><li>申请列表：</li></ul><ol><li>接受后端传的 data，通过 ANTD 渲染表格。</li><li>不同状态的场地的筛选就是对 data 筛选完成为新的 data 通通过 ANTD 渲染。</li><li>搜索同理，注意就是搜索要在不同状态的场地筛选完的新 data 再搜索筛选。</li><li>详情弹窗就是点击详情将这一条数据传递给弹窗组件。</li></ol><ul><li>时间表：</li></ul><ol><li>时间表稍微有难度一点，首先是表格没有使用 ANTD，使用原生的 table 和 tr td 标签</li><li>将每块场地为每一行的行头，将当天的每一段时间作为每一列的列头。</li><li>然后是表格内容的数据的处理，以其余场地申请为例子，是通过日期查询当天的场地申请数据，然后进行数据的处理，将某块场地设为 parent，他全部时间段设为一个 children，里面的每一个 child 通过申请的或者待审批的就是被占用的，flag 为 ture，其余的为 flase，条件渲染到表格中。</li><li>再对每一个表格格子做一点动画，也以其余场地申请为例子，鼠标移入出现编辑图标，移除图标消失，点击图标出现编辑弹窗，传入选中时间以及场地，以及其他需要编辑的表单。</li><li>点击占用的部分，跳出详情弹窗，内容为当前格的数据</li><li>科技会堂申请的时间表有些许不同，每一行的行头是日期，列头也是每段时间，时间段也不同，只用对数据处理做一些修改。</li><li>鼠标移入移除动画也不同，是点击移动相应的表格颜色变化，松开跳出编辑弹窗。</li></ol><p>难点：<br>一个在于 ts 的运用，数据类型麻烦且多，需要仔细琢磨不然很容易出错<br>二个就是对原生表格的运用，时间表数据的处理也是一大难点</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Essay</title>
    <link href="/2023/08/24/%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81/"/>
    <url>/2023/08/24/%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81/</url>
    
    <content type="html"><![CDATA[<h1 id="因为-React-你忘记了（或者从来不知道）的事情"><a href="#因为-React-你忘记了（或者从来不知道）的事情" class="headerlink" title="因为 React 你忘记了（或者从来不知道）的事情"></a>因为 React 你忘记了（或者从来不知道）的事情</h1><blockquote><p>2023/08/23</p></blockquote><p><a href="https://joshcollinsworth.com/blog/antiquated-react#part-2-things-you-forgot-or-never-knew-because-of-react">原文地址</a></p><ul><li>React 导致很多东西只有围绕 React 构建才能够在其中使用，但这是不对的</li><li><code>Hook</code>不再是优势，而是基线</li><li>现代框架已经足够聪明，不再需要微观管理渲染(useMemo,useCallback,useEffect)</li><li>服务端渲染不再特别。SvelteKit,Nuxt,Fresh,SolidStart(Solid 的元框架)也加入了游戏</li><li>双向数据绑定并不难，也不是一个坏主意</li><li>Css 在其他框架中使用起来比 React 简单多了</li><li>如果你已经学了 React,其他框架学起来只会更简单</li><li>React 老生常谈的性能问题</li></ul><p>最后是作者推荐的其他框架：</p><ol><li>Svelte</li><li>Vue</li><li>Solid</li><li>Fresh</li><li>Astro</li><li>Preact</li></ol><h1 id="OpenTiny-前端组件库正式开源啦！面向未来，为开发者而生"><a href="#OpenTiny-前端组件库正式开源啦！面向未来，为开发者而生" class="headerlink" title="OpenTiny 前端组件库正式开源啦！面向未来，为开发者而生"></a>OpenTiny 前端组件库正式开源啦！面向未来，为开发者而生</h1><blockquote><p>2023/08/27</p></blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651263806&idx=1&sn=34adb5c6149eddeadf547259b3671229&chksm=bd48caba8a3f43ac29b2f381ee702a73d17632dc0423ed718244f6e8a7140901642ba6a293c3#rd">原文地址</a></p><p>这是一款适配多端的企业级组件库，支持 Vue2/Vue3/Angular 等技术栈，并提供了主题配置系统、中后台模板和 CLI 命令行等工具</p><ul><li>支持 vue2 和 vue3</li><li>一套代码支持 PC 和移动端</li><li>提供 Angular 组件库</li></ul><h1 id="2023-年大淘宝-Web-端技术概览"><a href="#2023-年大淘宝-Web-端技术概览" class="headerlink" title="2023 年大淘宝 Web 端技术概览"></a>2023 年大淘宝 Web 端技术概览</h1><blockquote><p>2023/08/28</p></blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NjM5NDQxMg==&mid=2247496406&idx=1&sn=d340aa971f67a9ebe2bd6f960cc2368d&chksm=ec47b915db30300353d78d3385adc22af41f4040b2a144b3072cf1dd2d5bad673ede30c1f485#rd">原文地址</a></p><p>挑几个感兴趣的写一下</p><p><strong>一、O2Space</strong><br>一站式 Web 研发交付平台，能力包括应用管理、变更及迭代发布操作、代码构建与静态扫描等。<br><img src="../文章摘要/O2Space.png" alt="" width="500" height="300"></p><blockquote><p>估计没开源，网上没找到、</p></blockquote><p><strong>二、O2code</strong><br>基于开源框架：OpenSumi 深度定制的 IDE，集合大量阿里巴巴前端基础设施<br><img src="../文章摘要/O2Code.png" alt="" width="500" height="300"></p><p><strong>三、ICE</strong><br>ICE 是一个开箱即用的终端应用研发体系，包含应用框架 (ice.js)、包开发 (ICE PKG)、微前端 (ICESTARK)、调试工具 (AppDevTools)、API 体系等。</p><ul><li><code>ice.js</code> 应用框架是整个体系的核心，它致力于提供开箱即用的框架能力，基于社区流行的 React 渲染，迄今已发布了两个大版本，并广泛服务于阿里内部和社区用户。内置工程配置、状态管理、数据请求、权限管理等最佳实践，让开发者可以更加专注于业务逻辑。同时面向不同场景沉淀了多种解决方案，包括但不限于多端小程序、中后台应用、Weex 2.0 应用、搭建等。</li><li><code>ICE PKG</code> 是面向 NPM 包开发的解决方案，提供 React 组件、Rax 组件、Node 模块、前端类库 等多场景 NPM 包的研发，提供标准的文档预览和打包能力，同时在大淘宝技术通过定义组件标准，打通搭建模块与源码组件的差异。</li><li><code>ICESTARK</code> 是面向大型 Web 应用的微前端解决方案，提供巨型应用的管理最佳实践。通过微应用的研发，解决多个开发团队协同问题，还带来了安全的沙箱、优秀的性能体验。</li><li><code>UNI API</code> 是面向跨多终端/容器的统一 API 体系，它致力于提供前端统一的跨容器（引擎）以及 Native 的桥通道能力。</li><li><code>AppDevTools</code> 是面向客户端本地调试的开发者工具，它致力于解决集团内 Web 技术栈开发者在 App 中无法调试，定位问题难，度量性能难的问题。</li></ul><img src="../文章摘要/ice.png" alt="" width="500" height="300"><h1 id="Astro-3-0-重磅来袭"><a href="#Astro-3-0-重磅来袭" class="headerlink" title="Astro 3.0 重磅来袭"></a>Astro 3.0 重磅来袭</h1><blockquote><p>2023/09/05</p></blockquote><p><a href="https://astro.build/blog/astro-3/">原文地址</a></p><p><strong>Astro</strong>是集多功能于一体的 Web 框架，用于构建快速、以内容为中心的网站。</p><p>主要是被 3.0 宣传的 View Transitions API 给吸引去了解一下这种框架</p><p>他的特点主要是：</p><ul><li>组件群岛：<br>每一个页面可以由多个不同的框架组件组成，不管是 Vue 还是 React，Preact，Svelte</li><li>功能齐全且了灵活:<br>Astro 是集多功能于一体的 Web 框架，提供了构建网站所需的一切 Astro 包括组件语法、基于文件的路由、静态资源处理、构建处理、捆绑、优化、数据获取等。你只使用 Astro 核心功能集就可构建出色的网站。</li><li>服务器优先：<br>Astro 尽可能利用服务器渲染而不是客户端渲染。</li><li>MPA：<br>和 SPA(单页面渲染)不同，Astro 是多页面应用</li></ul><h1 id="The-TSConfig-Cheat-Sheet"><a href="#The-TSConfig-Cheat-Sheet" class="headerlink" title="The TSConfig Cheat Sheet"></a>The TSConfig Cheat Sheet</h1><blockquote><p>2023/09/22</p></blockquote><blockquote><p>项目来不及做完了啊啊啊啊啊啊</p></blockquote><p><a href="https://www.totaltypescript.com/tsconfig-cheat-sheet">原文地址</a></p><p>这是一个懒人 tsconfig.json 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">/* Base Options: */</span><br>    <span class="hljs-attr">&quot;esModuleInterop&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipLibCheck&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es2022&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;verbatimModuleSyntax&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;allowJs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;resolveJsonModule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;moduleDetection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;force&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">/* Strictness */</span><br>    <span class="hljs-attr">&quot;strict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;noUncheckedIndexedAccess&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">/* If transpiling with TypeScript: */</span><br>    <span class="hljs-attr">&quot;moduleResolution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NodeNext&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NodeNext&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;outDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dist&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sourceMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">/* If NOT transpiling with TypeScript: */</span><br>    <span class="hljs-attr">&quot;moduleResolution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bundler&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESNext&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;noEmit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">/* If your code runs in the DOM: */</span><br>    <span class="hljs-attr">&quot;lib&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;es2022&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;dom&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;dom.iterable&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">/* If your code doesn&#x27;t run in the DOM: */</span><br>    <span class="hljs-attr">&quot;lib&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;es2022&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">/* If you&#x27;re building for a library: */</span><br>    <span class="hljs-attr">&quot;declaration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">/* If you&#x27;re building for a library in a monorepo: */</span><br>    <span class="hljs-attr">&quot;composite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;declarationMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>具体内容的分析可以直接到原作者博客上去看</p><h1 id="7-simple-habits-of-the-top-1-of-engineers"><a href="#7-simple-habits-of-the-top-1-of-engineers" class="headerlink" title="7 simple habits of the top 1% of engineers"></a>7 simple habits of the top 1% of engineers</h1><p><a href="https://engineercodex.substack.com/p/7-simple-habits-of-the-top-1-of-engineers">原文地址</a></p><blockquote><p>2023/09/27</p></blockquote><p>前 1%工程师的 7 个简单习惯</p><ol><li>成为一名工程师，而不应该是编码员</li><li>为人类而不是计算机编写代码</li><li>和代码本身分离</li><li>使用一致的标准</li><li>编写简单的代码</li><li>不要发生预测以外的事情</li><li>经常沟通</li><li>快速编码…而且速度慢</li><li>不要盲目循规蹈矩</li></ol><h1 id="Polyfill-变得流氓"><a href="#Polyfill-变得流氓" class="headerlink" title="Polyfill 变得流氓"></a>Polyfill 变得流氓</h1><p><a href="https://marvinh.dev/blog/speeding-up-javascript-ecosystem-part-6/">原文地址</a></p><blockquote><p>2023/09/27</p></blockquote><p>首先什么是 Polyfill,<br>Polyfill 是一个填充物，类似于 Babel(转译器)<br>Babel 能够为旧的浏览器不支持的新的语法进行转译从而能够在旧浏览器上跑通<br>但是如果遇到一个新的函数方法，并不能通过转译来实现,所以就需要用到 Polyfill 来进行对新函数的实现，从而在不支持的旧浏览器上使用</p><p>但是这篇文章讲的是 Polyfill 的滥用<br>在如今随便一个包越来越多的依赖下,每一个依赖都填充了 Polyfill,导致 Polyfill 的过多，而且在这些包中，Polyfill 似乎都是直接被调用而不是在需要的时候调用</p><p>其中 eslint 生态系统受到的影响最大</p><blockquote><p>按需载入 Polyfill js 使用的是 babel 的@babel/preset-env 插件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>   <span class="hljs-string">&quot;presets&quot;</span>: [<br>        [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>, &#123;<br>            <span class="hljs-string">&quot;targets&quot;</span>: <span class="hljs-string">&quot;&gt; 0.25%, not dead&quot;</span><br>        &#125;]<br>   ]<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>css 使用 postcss 的 postcss-preset-env 来做按需 prefix</p></blockquote><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><blockquote><p>2023/10/11</p></blockquote><p><a href="https://www.yuque.com/ant-design/design-pattern">原文地址</a></p><p>什么是一个网页，或者说一个 app 的设计模式，就是<strong>做出更符合用户的视图和功能，提高用户的体验和上手感</strong><br>这是一篇来自 ANTD 的体验设计师的对一些设计模式的总结，可惜好像停止更新了</p><h1 id="如何花两年时间去面试一个人"><a href="#如何花两年时间去面试一个人" class="headerlink" title="如何花两年时间去面试一个人"></a>如何花两年时间去面试一个人</h1><blockquote><p>2023/10/16</p></blockquote><p><a href="https://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/">原文地址</a></p><p>文章中提到，如今招聘压力变大的当下，其实雇主也越来越难找到真正的优秀的人</p><p>他提到，与其在简历上写<strong>精通 xxx，熟悉 yyy，掌握 zzz</strong>这些毫无意义的东西，不如去列一个自己看过的书的清单<br>微软高级开发工程师熊力就说过：<strong>“我当年毕业的时候总结了一个公式：第一份工作的月薪=大学四年买过的技术书籍价格的总和。”</strong></p><p>而书本只是基础知识，实战能力又在哪里能体现呢？ <a href="https://en.wikipedia.org/wiki/GitHub">Github</a><br><strong>从你的 GitHub 旅程开始，你就已经一脚踏进了真正的企业，而企业的面试也已经开始。</strong></p><h1 id="Visual-Copilot-简介：更好的从-Figma-到代码的工作流程"><a href="#Visual-Copilot-简介：更好的从-Figma-到代码的工作流程" class="headerlink" title="Visual Copilot 简介：更好的从 Figma 到代码的工作流程"></a>Visual Copilot 简介：更好的从 Figma 到代码的工作流程</h1><blockquote><p>2023/10/16</p></blockquote><p><a href="https://www.builder.io/c/docs/import-from-figma">教程</a></p><p>这篇文章介绍了 Visual Copilot，一个全新的 Figma-to-code 插件，旨在节省开发者将 Figma 设计转换为代码所需的 50-80% 的时间。</p><h1 id="2024-的-React-生态"><a href="#2024-的-React-生态" class="headerlink" title="2024 的 React 生态"></a>2024 的 React 生态</h1><blockquote><p>2023/10/26</p></blockquote><p><a href="https://dev.to/avinashvagh/react-ecosystem-in-2024-418k">React Ecosystem in 2024</a><br>随着 React 在 2024 年庆祝成立 11 周年，值得期待的是 React 生态系统中令人兴奋的发展。在这篇博客中，我们将探讨生态系统的各个方面，以 2023 年发生的事情以及您在来年可以期待的事情为基础。<br>挑几个<del>还没学的</del>常用的</p><ol><li>路由</li></ol><ul><li><a href="https://nextjs.org/">NextJs</a></li><li><a href="https://www.npmjs.com/package/react-query">React Query</a></li></ul><ol start="2"><li>状态管理</li></ol><ul><li><a href="https://redux-toolkit.js.org/">Redux</a></li><li><a href="https://github.com/pmndrs/zustand">Zustand</a></li></ul><ol start="3"><li>网络请求</li></ol><ul><li><a href="https://tanstack.com/query/latest">TankStack</a></li><li><a href="https://redux-toolkit.js.org/rtk-query/overview">RTK Query</a></li></ul><ol start="4"><li>测试</li></ol><ul><li><a href="https://vitest.dev/">ViTest</a></li><li><a href="https://testing-library.com/docs/react-testing-library/intro/">React Testing Library</a></li><li><a href="https://playwright.dev/">Playwright</a></li></ul><ol start="5"><li>Styling</li></ol><ul><li><a href="https://tailwindcss.com/">Tailwind</a></li><li><a href="https://styled-components.com/">Styled Components</a></li><li><a href="https://emotion.sh/docs/introduction">Emotion</a></li></ul><ol start="6"><li>UI</li></ol><ul><li><a href="https://mui.com/">Material-UI</a></li><li><a href="https://headlessui.com/">Headless</a></li></ul><ol start="7"><li>Animation</li></ol><ul><li><a href="https://www.react-spring.dev/">React Spring</a></li><li><a href="https://www.framer.com/motion/">Framer Motion</a></li></ul><ol start="8"><li>数据可视化</li></ol><ul><li><a href="https://react-chartjs-2.js.org/">React Chartjs 2</a></li></ul><h1 id="how-engineering-communicates"><a href="#how-engineering-communicates" class="headerlink" title="how-engineering-communicates"></a>how-engineering-communicates</h1><blockquote><p>2023/10/26</p></blockquote><p><a href="https://github.com/github/how-engineering-communicates/blob/main/how-github-engineering-communicates.md">原文地址</a></p><p>前半篇文章讲述了一个工程该如何沟通：</p><ul><li>首先是异步</li><li>把事情写下来</li><li>使工作可见</li><li>真实坦诚过度的沟通</li><li>注重培养维护文档的文化</li><li>记得使用表情</li></ul><p>后半篇文章讲述了如何有效沟通</p><h1 id="新版-React-文档中的九项最佳建议"><a href="#新版-React-文档中的九项最佳建议" class="headerlink" title="新版 React 文档中的九项最佳建议"></a>新版 React 文档中的九项最佳建议</h1><blockquote><p>2023/11/03</p></blockquote><p><a href="https://blog.testdouble.com/posts/2023-10-16-react-docs-recommendations/">原文链接</a></p><p>1.为循环中的元素选择键时，请使用对同一条目始终相同的标识符，而不是数组索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 🛑 WRONG</span><br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    &#123;items.map((item, index) =&gt; (</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span>…<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    ))&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>);<br><br><span class="hljs-comment">// 🟢 RIGHT, assuming item.id is a stable unique identifier</span><br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    &#123;items.map((item, index) =&gt; (</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>…<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    ))&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>2.定义组件时，应将其定义在文件/模块的顶层，而不是嵌套在其他组件或函数中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 🛑 WRONG</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ParentComponent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">ChildComponent</span>(<span class="hljs-params"></span>) &#123;…&#125;<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-comment">// 🟢 RIGHT</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChildComponent</span>(<span class="hljs-params"></span>) &#123;…&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ParentComponent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.决定在状态中存储什么内容时，存储可用于计算所需内容的最小表示形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 🛑 WRONG</span><br><span class="hljs-keyword">const</span> [allItems, setAllItems] = <span class="hljs-title function_">useState</span>([]);<br><span class="hljs-keyword">const</span> [urgentItems, setUrgentItems] = <span class="hljs-title function_">useState</span>([]);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSomeEvent</span>(<span class="hljs-params">newItems</span>) &#123;<br>  <span class="hljs-title function_">setAllItems</span>(newItems);<br>  <span class="hljs-title function_">setUrgentItems</span>(newItems.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">priority</span> === <span class="hljs-string">&quot;urgent&quot;</span>));<br>&#125;<br><br><span class="hljs-comment">// 🟢 RIGHT</span><br><span class="hljs-keyword">const</span> [allItems, setAllItems] = <span class="hljs-title function_">useState</span>([]);<br><span class="hljs-keyword">const</span> urgentItems = allItems.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">priority</span> === <span class="hljs-string">&quot;urgent&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSomeEvent</span>(<span class="hljs-params">newItems</span>) &#123;<br>  <span class="hljs-title function_">setAllItems</span>(newItems);<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在考虑是否使用 useMemo、useCallback 或 React.memo 进行缓存时，请推迟缓存，直到发现性能问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 🛑 WRONG</span><br><span class="hljs-keyword">const</span> [allItems, setAllItems] = <span class="hljs-title function_">useState</span>([]);<br><span class="hljs-keyword">const</span> urgentItems = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> (<br>  allItems.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;urgent&#x27;</span><br>), [allItems]);<br><br><span class="hljs-comment">// 🟢 RIGHT (until an observed performance problem)</span><br><span class="hljs-keyword">const</span> [allItems, setAllItems] = <span class="hljs-title function_">useState</span>([]);<br><span class="hljs-keyword">const</span> urgentItems = allItems.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">priority</span> === <span class="hljs-string">&#x27;urgent&#x27;</span>);<br></code></pre></td></tr></table></figure><ol start="5"><li>关于 use 前缀</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 🛑 WRONG</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useDateColumnConfig</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// will be subject to hooks restrictions</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;date&quot;</span>,<br>    <span class="hljs-attr">formatter</span>: prettyFormatDate,<br>    <span class="hljs-attr">editorComponent</span>: <span class="hljs-title class_">DateEditor</span>,<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">// 🟢 RIGHT</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getDateColumnConfig</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// can be called anywhere</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;date&quot;</span>,<br>    <span class="hljs-attr">formatter</span>: prettyFormatDate,<br>    <span class="hljs-attr">editorComponent</span>: <span class="hljs-title class_">DateEditor</span>,<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useNameColumnConfig</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// has to be a hook since it calls a hook: useTranslation</span><br>  <span class="hljs-keyword">const</span> &#123; t &#125; = <span class="hljs-title function_">useTranslation</span>();<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-title function_">t</span>(<span class="hljs-string">&quot;columns.name&quot;</span>),<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.当您需要根据道具变化调整状态时，请直接在组件函数中设置状态（在渲染过程中），而不是在效果中设置状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 🛑 WRONG</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; items &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [selection, setSelection] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setSelection</span>(<span class="hljs-literal">null</span>);<br>  &#125;, [items]);<br>  <span class="hljs-comment">//...</span><br>&#125;<br><br><span class="hljs-comment">// 🟢 RIGHT</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; items &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [prevItems, setPrevItems] = <span class="hljs-title function_">useState</span>(items);<br>  <span class="hljs-keyword">const</span> [selection, setSelection] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">if</span> (items !== prevItems) &#123;<br>    <span class="hljs-title function_">setPrevItems</span>(items);<br>    <span class="hljs-title function_">setSelection</span>(<span class="hljs-literal">null</span>);<br>  &#125;<br>  <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>7.当您需要获取数据时，请使用库而非使用效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 🛑 WRONG</span><br><span class="hljs-keyword">const</span> [items, setItems] = <span class="hljs-title function_">useState</span>();<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  api.<span class="hljs-title function_">loadItems</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">newItems</span>) =&gt;</span> <span class="hljs-title function_">setItems</span>(newItems));<br>&#125;, []);<br><br><span class="hljs-comment">// 🟢 RIGHT (one library option)</span><br><span class="hljs-keyword">import</span> &#123; useQuery &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tanstack/react-query&quot;</span>;<br><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: items &#125; = <span class="hljs-title function_">useQuery</span>([<span class="hljs-string">&quot;items&quot;</span>], <span class="hljs-function">() =&gt;</span> api.<span class="hljs-title function_">loadItems</span>());<br></code></pre></td></tr></table></figure><p>8.当需要对发生的事件做出响应时，应在事件处理程序中编写代码，而不是在 useEffect 中编写代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [savedData, setSavedData] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">const</span> [validationErrors, setValidationErrors] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">// 🛑 WRONG</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (savedData) &#123;<br>    <span class="hljs-title function_">setValidationErrors</span>(<span class="hljs-literal">null</span>);<br>  &#125;<br>&#125;, [savedData]);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">saveData</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> api.<span class="hljs-title function_">save</span>(data);<br>  <span class="hljs-title function_">setSavedData</span>(response.<span class="hljs-property">data</span>);<br>&#125;<br><br><span class="hljs-comment">// 🟢 RIGHT</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">saveData</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> api.<span class="hljs-title function_">save</span>(data);<br>  <span class="hljs-title function_">setSavedData</span>(response.<span class="hljs-property">data</span>);<br>  <span class="hljs-title function_">setValidationErrors</span>(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>9.当一个 useEffect 依赖关系导致了你不希望看到的重读（包括无限循环）时，不要只从数组中移除依赖关系：也要从效果函数中移除依赖关系</p><h1 id="经验如何塑造顶尖工程师"><a href="#经验如何塑造顶尖工程师" class="headerlink" title="经验如何塑造顶尖工程师"></a>经验如何塑造顶尖工程师</h1><blockquote><p>2023/11/03</p></blockquote><p><a href="https://addyosmani.com/blog/collect-experience/">原文链接</a></p><p>成为一名优秀的工程师需要不断积累经验。每个项目，哪怕是小项目，都是为你的工具箱添加新技术和工具的机会。当你能将在一个项目中学到的技术与在另一个项目中学到的工具相结合，从而解决问题时，这将带来更大的价值。这一切都会让你受益匪浅。</p><p>把你的工程技能想象成工具箱</p><p>匹配你的技术和工具</p><p>保持敏捷性和适应性</p><p>积累宝贵经验的实用技巧</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大一总结</title>
    <link href="/2023/08/16/%E5%A4%A7%E4%B8%80%E6%80%BB%E7%BB%93/"/>
    <url>/2023/08/16/%E5%A4%A7%E4%B8%80%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>实现一个目标最好的方法，就是定下这个目标并且坚定不移的向他出发</p></blockquote><h1 id="回顾大一"><a href="#回顾大一" class="headerlink" title="回顾大一"></a>回顾大一</h1><ul><li><strong>转专业</strong> ✔</li><li><strong>红岩网校</strong> ✔</li><li>没挂科 ✔</li><li>奖学金 ？</li><li>健身 ✔</li></ul><p>看到今年红岩招新群的这些 23 学弟，想到去年在贴吧上听说到红岩网校这个大名的时候，就决定大一无论如何都要挤进网校。也听说网校淘汰率高的吓人，1000 个新生最后剩 10 个，但<del>学姐</del>学长又说没基础也可以，所以我为啥不试一下呢。</p><p>转专业的话，其实当初只想转到计算机学院来，当初也觉得很难，但是其实只要你坚定目标并且不断地向前迈步，也没那么恐怖。最后也是决定以前端为主，转到一个应该不那么累的专业去。</p><h2 id="大一上"><a href="#大一上" class="headerlink" title="大一上"></a>大一上</h2><p>大一上的疫情也是诠释了什么叫假期比上课时间还多，9 月末去，12 月初回，中间上课甚至几乎都在寝室上课。<br>大一上对我的提升其实很少，基本都是从 0 到 1，比如喜欢上健身，前端技术上从 0 到 1，<del>老油条属性</del>。<br>疫情在寝室的上课，感谢我那五个<del>卷狗</del>舍友，可以说网课一节不落，学的比谁都认真，最后也是成功的一个寝室 6 个人转走 5 个<br>技术层面只能感谢学长领进门，从 0 到 1，甚至奠定了未来的方向，这一点我觉得是大一最重要的一节，就是目标。其实大一很多课都要求我们有个方向不要茫然，没有目标没有目的就很容易无所事事导致浪费一个学期甚至一年。而我在这方面就做得很好我觉得，<strong>有个明确的目标并且不断努力向他出发</strong>，结果一定是好的。<br>也许以后这个技术并不能让我吃上饭，但是技多不压身，很多开发技术都有相似的地方，到时候再说也来得及，总不能因为害怕失败就不去努力吧</p><h2 id="大一下"><a href="#大一下" class="headerlink" title="大一下"></a>大一下</h2><p>疫情没了，压力来了，经过寒假网校考核，难度更上一层楼，而且说实话大一下网校的课也不是那么有用，主要还是靠自己自学去了。React，typescript，antd，webpack，这些入门内容井喷式进入我的脑子，中途还和后端的一个哥们参加数据库大赛，能算是第一次和后端对接，虽然最后也只拿了二等奖 ，但是过程还是很宝贵的。<br>不过大一下学校的课程上的很水，差点还挂了高数下，只能说重心不在这边了，专业还是转了，看中得就是课少并且也是计院。<del>尊称我为计 ✌</del><br>反正就是学学学，敲敲敲，拿下红岩网校入场卷<br><img src="../大一总结/redrock.png" alt="redrock" width="500" height="300"></p><h1 id="展望大二"><a href="#展望大二" class="headerlink" title="展望大二"></a>展望大二</h1><p>其实现在也有点茫然，知道了大方向但是没有了那种小目标<br>大二找实习又有点早，但是不找又有点无所事事。<br>不管怎样，技术是要学的，代码质量是要提升的，感觉自己暑假接的项目接着学长学姐写的代码，像在别人的美味佳肴上扔了老鼠屎。</p><p>多读别人的好代码，多做总结多理解<br>多学新技术，多跟时代方向</p><blockquote><p>“写代码就像写作文，学习别人优美的句子是怎么写的，你才写得出来” - moon-ic</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git学习</title>
    <link href="/2023/07/23/git%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/07/23/git%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>马上要合作开发项目了，赶紧来补一补 git 的学习</p><h1 id="Git-基础命令"><a href="#Git-基础命令" class="headerlink" title="Git 基础命令"></a>Git 基础命令</h1><p><code>git init</code> 进入你想要的进行版本控制的目录，初始化一个.git 文件夹<br><code>git status</code> 查看哪些文件处于什么状态<br><code>git add filename</code> 跟踪一个文件 （<code>git add .</code> 跟踪没被忽略的全部文件）<br><code>git diff</code> 显示那些行发生了变化<br><code>git commit -m &quot;message&quot;</code> 提交代码<br><code>git rm</code> 从 git 中移除某个文件，如果要删除已经修改或者放入暂存区的文件需要加上<code>-f</code>,或者说你想把文件从 Git 仓库中删除，但仍然希望保留在当前工作目录中，可以使用<code>--cached</code> 选项<br><code>git log</code>查看提交历史<br><code>git reset HEAD &lt;file&gt;...</code>来取消暂存<br><code>git checkout -- &lt;file&gt;...</code>取消对文件的修改<br><code>git branch -d &lt;branch_name&gt;</code> 删除一个分支，但是得需要先合并该分支，或者使用<code>-D</code><br><code>git branch -m &lt;old_branch_name&gt; &lt;new_branch_name&gt;</code> 分支改名</p><h1 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h1><p><code>git remote</code> 查看已经配置的远程仓库<br>你也可以指定选项 -v，会显示读写远程仓库使用的 Git 保存的简写与其对应的 URL。<br><code>git remote add &lt;shortname&gt; &lt;url&gt;</code> 添加一个新的远程 Git 仓库，同时指定一个简写<br><code>git clone &lt;url&gt; &lt;分支&gt;</code> 克隆一个远程仓库<br><code>git fetch &lt;url&gt;</code> 会抓取克隆（或上一次抓取）后新推送的所有工作，但是，只会将数据下载到你的本地仓库，不会自动合并或修改，你必须手动将其合并入<br><code>git pull &lt;url&gt;</code> 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支</p><p>总结：</p><ul><li>git pull 从远程获取变更并自动合并到本地分支。</li><li>git fetch 从远程获取变更，但不会自动合并，需要你决定如何集成这些变更。</li><li>git clone 在本地创建一个远程仓库的完整副本，包括所有分支和历史记录，并设置本地工作副本。</li></ul><p><code>git push &lt;remote&gt; &lt;branch&gt;</code> 将分支推到远程仓库</p><p><code>git remote show &lt;remote&gt;</code> 命令列出了当你在特定的分支上执行 git push 会自动地推送到哪一个远程分支。 它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了， 还有当你执行 git pull 时哪些本地分支可以与它跟踪的远程分支自动合并。</p><p><code>git remote rename</code> 来修改一个远程仓库的简写名。<br><code>git remote remove</code> 或 <code>git remote rm</code> 移出一个远程仓库</p><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p><code>git tag</code> 在 Git 中列出已有的标签<br><code>git tag -a &lt;tag&gt; -m &lt;message&gt;</code> Git 中创建附注标签<br><code>git show</code> 查看标签和消息<br><code>git tag &lt;tag&gt;</code> Git 中创建轻量标签<br><code>git push origin &lt;tagname&gt;</code> 推送标签到远程仓库<br>如果想要一次性推送很多标签，也可以使用带有 –tags 选项的 git push 命令<br><code>git tag -d &lt;tagname&gt;</code> 删除标签</p><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p><code>git branch &lt;name&gt;</code> 创建一个分支<br>这会在当前所在的提交对象上创建一个指针。<br><img src="../git学习/1.png" alt="" width="500" height="300"><br>Git 通过一个名为 HEAD 的特殊指针指向当前所在的本地分支。 git branch 命令仅仅 创建 一个新分支，并不会自动切换到新分支中去。<br><img src="../git学习/2.png" alt="" width="500" height="300"></p><p><code>git checkout</code> 分支切换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout testing</span><br></code></pre></td></tr></table></figure><img src="../git学习/3.png" alt="" width="500" height="300"><p>此时，我们进行一次提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim test.rb</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -a -m <span class="hljs-string">&#x27;made a change&#x27;</span></span><br></code></pre></td></tr></table></figure><img src="../git学习/4.png" alt="" width="500" height="300"><p>如图所示， testing 分支向前移动了，但是 master 分支却没有，它仍然指向运行 git checkout 时所指的对象。现在我们切换回 master 分支看看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout master</span><br></code></pre></td></tr></table></figure><img src="../git学习/5.png" alt="" width="500" height="300"><p>这条命令做了两件事。 一是使 HEAD 指回 master 分支，二是将工作目录恢复成 master 分支所指向的快照内容。 也就是说，你现在做修改的话，项目将始于一个较旧的版本。 本质上来讲，这就是忽略 testing 分支所做的修改，以便于向另一个方向进行开发。</p><p>我们再稍微做些修改并提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim test.rb</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -a -m <span class="hljs-string">&#x27;made other changes&#x27;</span></span><br></code></pre></td></tr></table></figure><p>现在，这个项目的提交历史已经产生了分叉。 因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。 上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。</p><img src="../git学习/6.png" alt="" width="500" height="300"><hr><p><code>git checkout -b &lt;name&gt;</code> 新建一个分支并同时切换到那个分支<br><code>git merge &lt;name&gt;</code> 合并分支</p><hr><p>首先，我们假设你正在你的项目上工作，并且在 master 分支上已经有了一些提交。<br><img src="../git学习/7.png" alt="" width="500" height="300"><br>现在，假设你想要新建一个分支并同时切换到那个分支上，你可以运行一个带有 -b 参数的 git checkout 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -b iss53</span><br>Switched to a new branch &quot;iss53&quot;<br></code></pre></td></tr></table></figure><img src="../git学习/8.png" alt="" width="500" height="300"><p>随后，假设你在 iss53 分支上进行了一些提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim index.html</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -a -m <span class="hljs-string">&#x27;added a new footer [issue 53]&#x27;</span></span><br></code></pre></td></tr></table></figure><img src="../git学习/9.png" alt="" width="500" height="300"><p>现在，你切换回 master 分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout master</span><br>Switched to branch &#x27;master&#x27;<br></code></pre></td></tr></table></figure><p>这个时候，你的工作目录和新建 iss53 之前一模一样。<br>接下来，再建立一个 hotfix 分支，并进行一些提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -b hotfix</span><br>Switched to a new branch &#x27;hotfix&#x27;<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim index.html</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -a -m <span class="hljs-string">&#x27;fixed the broken email address&#x27;</span></span><br>[hotfix 1fb7853] fixed the broken email address<br> 1 file changed, 2 insertions(+)<br></code></pre></td></tr></table></figure><img src="../git学习/10.png" alt="" width="500" height="300"><p>我们将 hotfix 分支合并回 master 分支上。 可以使用 git merge 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout master</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git merge hotfix</span><br>Updating f42c576..3a0874c<br>Fast-forward<br> index.html | 2 ++<br> 1 file changed, 2 insertions(+)<br></code></pre></td></tr></table></figure><p>在合并的时候，你应该注意到了“快进（fast-forward）”这个词。 由于你想要合并的分支 hotfix 所指向的提交 C4 是你所在的提交 C2 的直接后继， 因此 Git 会直接将指针向前移动。<br><img src="../git学习/11.png" alt="" width="500" height="300"></p><p>现在，我们切回 iss53 分支，并再进行一个提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout iss53</span><br>Switched to branch &quot;iss53&quot;<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim index.html</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -a -m <span class="hljs-string">&#x27;finished the new footer [issue 53]&#x27;</span></span><br>[iss53 ad82d7a] finished the new footer [issue 53]<br>1 file changed, 1 insertion(+)<br></code></pre></td></tr></table></figure><img src="../git学习/12.png" alt="" width="500" height="300">你在 hotfix 分支上所做的工作并没有包含到 iss53 分支中。 如果你需要拉取 hotfix 所做的修改，你可以使用 git merge master 命令将 master 分支合并入 iss53 分支。<hr><p>假设你需要合并 iss53 分支到 master 分支，这和之前你合并 hotfix 分支所做的工作差不多。 你只需要检出到你想合并入的分支，然后运行 git merge 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout master</span><br>Switched to branch &#x27;master&#x27;<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git merge iss53</span><br>Merge made by the &#x27;recursive&#x27; strategy.<br>index.html |    1 +<br>1 file changed, 1 insertion(+)<br></code></pre></td></tr></table></figure><p>这和你之前合并 hotfix 分支的时候看起来有一点不一样。 在这种情况下，你的开发历史从一个更早的地方开始分叉开来（diverged）。 因为，master 分支所在提交并不是 iss53 分支所在提交的直接祖先，Git 不得不做一些额外的工作。 出现这种情况的时候，Git 会使用两个分支的末端所指的快照（C4 和 C5）以及这两个分支的公共祖先（C2），做一个简单的三方合并。<br><img src="../git学习/13.png" alt="" width="500" height="300"><br>和之前将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。 这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。<br><img src="../git学习/14.png" alt="" width="500" height="300"></p><h2 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h2><p>有的时候合并不会那么顺利，会产生冲突</p><p>Git 在产生冲突的时候就不会自动创建一个新合并提交，会等你解决完合并在提交。你可以使用 git status 命令来查看那些因包含合并冲突而处于未合并（unmerged）状态的文件</p><p>在你解决了所有文件里的冲突之后，对每个文件使用 git add 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。</p><p>等你退出合并工具之后，Git 会询问刚才的合并是否成功。 如果你回答是，Git 会暂存那些文件以表明冲突已解决： 你可以再次运行 git status 来确认所有的合并冲突都已被解决：</p><p>如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 git commit 来完成合并提交。</p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p><code>git branch</code> 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表</p><p><code>--merged</code> 与 <code>--no-merged</code> 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。<br>如果要查看哪些分支已经合并到当前分支，可以运行 <code>git branch --merged</code><br>查看所有包含未合并工作的分支，可以运行 <code>git branch --no-merged</code></p><p><code>git push &lt;remote&gt; &lt;branch&gt;</code> 远程推送分支<br><code>git push &lt;remote&gt; --delete &lt;branch&gt;</code> 删除远程分支。</p><h1 id="Commit-Message-规范"><a href="#Commit-Message-规范" class="headerlink" title="Commit Message 规范"></a>Commit Message 规范</h1><p>遵循 Angular Commit 规范，为了方便编写遵循规范的 commit message，我们使用 Commitizen 进行 git commit</p><ol><li>全局安装 commitizen</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pnpm add -g commitizen<br>yarn global add commitizen<br>npm install -g commitizen<br></code></pre></td></tr></table></figure><ol start="2"><li>你可以在本地仓库执行适配器局部安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">commitizen init cz-conventional-changelog --pnpm --save-dev --save-exact<br>commitizen init cz-conventional-changelog --yarn --dev --exact<br>commitizen init cz-conventional-changelog --save-dev --save-exact<br></code></pre></td></tr></table></figure><p>如有疑问，可参考<a href="https://github.com/commitizen/cz-cli">官网</a>进行配置<br>安装好以后，凡是用到 git commit 命令，一律改为使用 git cz。这时，就会出现选项，用来生成符合格式的 Commit message<br><img src="../git学习/15.png" alt="" width="500" height="300"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于期末周加考核逼死大学生这件事</title>
    <link href="/2023/06/24/%E5%85%B3%E4%BA%8E%E6%9C%9F%E6%9C%AB%E5%91%A8%E5%8A%A0%E8%80%83%E6%A0%B8%E9%80%BC%E6%AD%BB%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%BF%99%E4%BB%B6%E4%BA%8B/"/>
    <url>/2023/06/24/%E5%85%B3%E4%BA%8E%E6%9C%9F%E6%9C%AB%E5%91%A8%E5%8A%A0%E8%80%83%E6%A0%B8%E9%80%BC%E6%AD%BB%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%BF%99%E4%BB%B6%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>十六周拉的屎要在最后两周都吃完</p></blockquote><p><strong>问：</strong> 如何让一个 GitHub 常绿的大学生出现空挡？</p><p><strong>答：</strong> 期末周</p><p><strong>问：</strong> 那如果不想出现空挡呢？</p><p><strong>答：</strong> 考核</p><h1 id="考核内容"><a href="#考核内容" class="headerlink" title="考核内容"></a>考核内容</h1><h2 id="仿腾讯天气"><a href="#仿腾讯天气" class="headerlink" title="仿腾讯天气"></a>仿腾讯天气</h2><p><strong>两天时间(不到两天),使用三剑客(html <del>css</del> tailwindcss <del>javascript</del> tyscript)实现单页面</strong></p><h3 id="实现功能："><a href="#实现功能：" class="headerlink" title="实现功能："></a>实现功能：</h3><ul><li>顶部大图加今日天气和气温 ✔</li><li>24 小时内天气和气温 ✔</li><li>搜索功能以及历史记录 ✔</li><li>七日天气图表 ×</li><li>推荐和不推荐做的事情 ×</li></ul><h3 id="采用技术栈："><a href="#采用技术栈：" class="headerlink" title="采用技术栈："></a>采用技术栈：</h3><ul><li>Typescript<del>狗都不用</del></li><li>webpack</li><li>echart.js</li><li>tailwindcss</li></ul><h3 id="获奖感言"><a href="#获奖感言" class="headerlink" title="获奖感言"></a><del>获奖感言</del></h3><p>按使用的先后顺序来说：<br><strong>tailwindcss：</strong> 说实话和普通的 css 差别不大,稍微减少了代码量，帮你整合了一点 grid 布局。优势估计就在于不用自己起类名，避免类名重复，减少 css 文件数量。但相应的让标签更复杂，维护性大大降低。属于是可用可不用</p><p><strong>TS：</strong> 不熟练，比写 JS 麻烦，而且慢，但是定义了相应的类别以后在书写过程就能解决很多 bug 和粗心漏洞。写起来比 JS 优雅感觉，最大的痛点就是不知道为什么 export 出去的内容编译完后的 JS 内容中 export 不出去了，折磨我一个下午导致图表没花完。</p><p>对了 tmd 千万别 export 变量，bug 一堆。<br><strong>别 export 变量</strong>，<strong>别 export 变量</strong>，<strong>别 export 变量</strong></p><p><strong>Echart.js:</strong> 比 chart.js 好用，第一支持 TS，第二有中文，第三有案例，第四文档写得好，可惜本人蠢蛋写不明白</p><p><strong>webpack:</strong> 打包 TS，没啥好说的</p><p><strong>总的来说</strong>，用了新技术难免写的慢，也反应了基础确实不行，原生不太会用了。暑假还得加油</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue基础</title>
    <link href="/2023/06/08/Vue/"/>
    <url>/2023/06/08/Vue/</url>
    
    <content type="html"><![CDATA[<blockquote><p>npm init vue@latest</p></blockquote><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="创建一个应用实例"><a href="#创建一个应用实例" class="headerlink" title="创建一个应用实例"></a>创建一个应用实例</h2><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><p>每个 vue 应用都是通过 createAPP 函数创建一个新的应用实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-comment">/* 根组件选项 */</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>需要给 createApp 的对象实际上是一个组件,每个运用都需要一个”根组件”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-comment">// 从一个单文件组件中导入根组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br></code></pre></td></tr></table></figure><h3 id="挂载运用"><a href="#挂载运用" class="headerlink" title="挂载运用"></a>挂载运用</h3><p>应用实例必须在调用了 .mount() 方法后才会渲染出来。该方法接收一个“容器”参数，可以是一个实际的 DOM 元素或是一个 CSS 选择器字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><p>.mount() 方法应该始终在整个应用配置和资源注册完成后被调用。同时请注意，不同于其他资源注册方法，它的返回值是根组件实例而非应用实例。</p><h3 id="多个运用实例"><a href="#多个运用实例" class="headerlink" title="多个运用实例"></a>多个运用实例</h3><p>应用实例并不只限于一个。createApp API 允许你在同一个页面中创建多个共存的 Vue 应用，而且每个应用都拥有自己的用于配置和全局资源的作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app1 = <span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-comment">/* ... */</span><br>&#125;);<br>app1.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#container-1&quot;</span>);<br><br><span class="hljs-keyword">const</span> app2 = <span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-comment">/* ... */</span><br>&#125;);<br>app2.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#container-2&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。</p><h3 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h3><p>最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 (即双大括号)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;span&gt;Message: &#123;&#123; msg &#125;&#125;&lt;/span&gt;<br>&lt;span&gt;Message: &#123;&#123; number + 1 &#125;&#125;&lt;/span&gt; //11<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">export default &#123; data()&#123; return &#123; msg:&quot;xxx&quot;, number:&#x27;10&#x27; &#125; &#125; &#125;<br></code></pre></td></tr></table></figure><p>双大括号中也可以使用 JS 逻辑运算(需要有返回值)</p><h3 id="原始-template"><a href="#原始-template" class="headerlink" title="原始 template"></a>原始 template</h3><p>双大括号会将数据解释为纯文本，而不是 HTML。若想插入 HTML，你需要使用 v-html 指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;p&gt;Using text interpolation: &#123;&#123; rawHtml &#125;&#125;&lt;/p&gt;<br>&lt;p&gt;Using v-template directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;<br></code></pre></td></tr></table></figure><h3 id="Attribute-特性-绑定"><a href="#Attribute-特性-绑定" class="headerlink" title="Attribute(特性) 绑定"></a>Attribute(特性) 绑定</h3><p>双大括号不能在 HTML attributes 中使用。想要响应式地绑定一个 attribute，应该使用 v-bind 指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>可以简写为<code>:id</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div :id=&quot;dynamicId&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="布尔型-Attribute"><a href="#布尔型-Attribute" class="headerlink" title="布尔型 Attribute"></a>布尔型 Attribute</h4><p>布尔型 attribute 依据 true / false 值来决定 attribute 是否应该存在于该元素上。disabled 就是最常见的例子之一。<br>v-bind 在这种场景下的行为略有不同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;button :disabled=&quot;isButtonDisabled&quot;&gt;Button&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>当 isButtonDisabled 为真值或一个空字符串 (即 <code>&lt;button disabled=&quot;&quot;&gt;</code>) 时，元素会包含这个 disabled attribute。而当其为其他假值时 attribute 将被忽略。</p><h4 id="动态绑定多个值"><a href="#动态绑定多个值" class="headerlink" title="动态绑定多个值"></a>动态绑定多个值</h4><p>如果你有像这样的一个包含多个 attribute 的 JavaScript 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">objectOfAttrs</span>: &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;container&#x27;</span>,<br>      <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;wrapper&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过不带参数的 v-bind，你可以将它们绑定到单个元素上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div v-bind=&quot;objectOfAttrs&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="使用-JS-表达式"><a href="#使用-JS-表达式" class="headerlink" title="使用 JS 表达式"></a>使用 JS 表达式</h4><p>至此，我们仅在模板中绑定了一些简单的属性名。但是 Vue 实际上在所有的数据绑定中都支持完整的 JavaScript 表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&#123;&#123; number + 1 &#125;&#125; &#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125; &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)<br>&#125;&#125;<br><br>&lt;div :id=&quot;`list-$&#123;id&#125;`&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>这些表达式都会被作为 JavaScript ，以当前组件实例为作用域解析执行。</p><p>在 Vue 模板内，JavaScript 表达式可以被使用在如下场景上：</p><ul><li>在文本插值中 (双大括号)</li><li>在任何 Vue 指令 (以 v- 开头的特殊 attribute) attribute 的值中</li></ul><blockquote><p>每个绑定仅支持单一表达式，也就是一段能够被求值的 JavaScript 代码。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- 这是一个语句，而非表达式 --&gt;<br>&#123;&#123; var a = 1 &#125;&#125;<br><br>&lt;!-- 条件控制也不支持，请使用三元表达式 --&gt;<br>&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><p>可以在绑定的表达式中使用一个组件暴露的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;time :title=&quot;toTitleDate(date)&quot; :datetime=&quot;date&quot;&gt;<br>  &#123;&#123; formatDate(date) &#125;&#125;<br>&lt;/time&gt;<br></code></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>指令是带有 v- 前缀的特殊 attribute。Vue 提供了许多内置指令，包括上我们所介绍的 v-bind 和 v-template。<br>指令 attribute 的期望值为一个 JavaScript 表达式 (除了少数几个例外，即之后要讨论到的 v-for、v-on 和 v-slot)。一个指令的任务是在其表达式的值变化时响应式地更新 DOM。<br>以 v-if 为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;p v-if=&quot;seen&quot;&gt;Now you see me&lt;/p&gt;<br></code></pre></td></tr></table></figure><p>这里，v-if 指令会基于表达式 seen 的值的真假来移除/插入该 <code>&lt;p&gt;</code> 元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;p v-show=&quot;seen&quot;&gt;Now you see me&lt;/p&gt;<br></code></pre></td></tr></table></figure><h4 id="参数-Argument"><a href="#参数-Argument" class="headerlink" title="参数 Argument"></a>参数 Argument</h4><p>某些指令会需要一个“参数”，在指令名后通过一个冒号隔开做标识。例如用 v-bind 指令来响应式地更新一个 HTML attribute：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;a v-bind:href=&quot;url&quot;&gt; ... &lt;/a&gt;<br><br>&lt;!-- 简写 --&gt;<br>&lt;a :href=&quot;url&quot;&gt; ... &lt;/a&gt;<br></code></pre></td></tr></table></figure><p>另一个例子是 v-on 指令，它将监听 DOM 事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;a v-on:click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;<br><br>&lt;!-- 简写 --&gt;<br>&lt;a @click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;<br></code></pre></td></tr></table></figure><h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><p>同样在指令参数上也可以使用一个 JavaScript 表达式，需要包含在一对方括号内：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!--<br>注意，参数表达式有一些约束，<br>参见下面“动态参数值的限制”与“动态参数语法的限制”章节的解释<br>--&gt;<br>&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;<br><br>&lt;!-- 简写 --&gt;<br>&lt;a :[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;<br></code></pre></td></tr></table></figure><p>这里的 attributeName 会作为一个 JavaScript 表达式被动态执行，计算得到的值会被用作最终的参数。举例来说，如果你的组件实例有一个数据属性 attributeName，其值为 “href”，那么这个绑定就等价于 v-bind:href。</p><p>相似地，你还可以将一个函数绑定到动态的事件名称上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;a v-on:[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;<br><br>&lt;!-- 简写 --&gt;<br>&lt;a @[eventName]=&quot;doSomething&quot;&gt;&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>在此示例中，当 eventName 的值是 “focus” 时，v-on:[eventName] 就等价于 v-on:focus。</p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>修饰符是以点开头的特殊后缀，表明指令需要以一些特殊的方式被绑定。例如 .prevent 修饰符会告知 v-on 指令对触发的事件调用 event.preventDefault()：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;form @submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;<br></code></pre></td></tr></table></figure><h2 id="声明响应式状态"><a href="#声明响应式状态" class="headerlink" title="声明响应式状态"></a>声明响应式状态</h2><p>我们可以使用 reactive() 函数创建一个响应式对象或数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;);<br></code></pre></td></tr></table></figure><p>响应式对象其实是 JavaScript Proxy，其行为表现与一般对象相似。不同之处在于 Vue 能够跟踪对响应式对象属性的访问与更改操作。</p><p>要在组件模板中使用响应式状态，需要在 setup() 函数中定义并返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// `setup` 是一个专门用于组合式 API 的特殊钩子函数</span><br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;);<br><br>    <span class="hljs-comment">// 暴露 state 到模板</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      state,<br>    &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div&gt;&#123;&#123; state.count &#125;&#125;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>自然，我们也可以在同一个作用域下定义更新响应式状态的函数，并将他们作为方法与状态一起暴露出去：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;);<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>      state.<span class="hljs-property">count</span>++;<br>    &#125;<br><br>    <span class="hljs-comment">// 不要忘记同时暴露 increment 函数</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      state,<br>      increment,<br>    &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="lt-script-setup-gt"><a href="#lt-script-setup-gt" class="headerlink" title="&lt;script setup&gt;"></a><code>&lt;script setup&gt;</code></h3><p>在 setup() 函数中手动暴露大量的状态和方法非常繁琐。幸运的是，我们可以通过使用构建工具来简化该操作。当使用单文件组件（SFC）时，我们可以使用 <code>&lt;script setup&gt;</code> 来大幅度地简化代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;script setup&gt;<br>  import &#123; reactive &#125; from &quot;vue&quot;;<br><br>  const state = reactive(&#123; count: 0 &#125;);<br><br>  function increment() &#123;<br>    state.count++;<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;button @click=&quot;increment&quot;&gt;&#123;&#123; state.count &#125;&#125;&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="reactive-的局限性"><a href="#reactive-的局限性" class="headerlink" title="reactive()的局限性"></a><code>reactive()</code>的局限性</h3><p>reactive() API 有两条限制：</p><ol><li>仅对对象类型有效（对象、数组和 Map、Set 这样的集合类型），而对 string、number 和 boolean 这样的 原始类型 无效。</li><li>因为 Vue 的响应式系统是通过属性访问进行追踪的，因此我们必须始终保持对该响应式对象的相同引用。这意味着我们不可以随意地“替换”一个响应式对象，因为这将导致对初始引用的响应性连接丢失：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> state = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;);<br><br><span class="hljs-comment">// 上面的引用 (&#123; count: 0 &#125;) 将不再被追踪（响应性连接已丢失！）</span><br>state = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">1</span> &#125;);<br></code></pre></td></tr></table></figure><h3 id="用ref-定义响应式遍变量"><a href="#用ref-定义响应式遍变量" class="headerlink" title="用ref()定义响应式遍变量"></a>用<code>ref()</code>定义响应式遍变量</h3><p>为此，Vue 提供了一个 ref() 方法来允许我们创建可以使用任何值类型的响应式 ref：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>ref() 将传入参数的值包装为一个带 .value 属性的 ref 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count); <span class="hljs-comment">// &#123; value: 0 &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count.<span class="hljs-property">value</span>); <span class="hljs-comment">// 0</span><br><br>count.<span class="hljs-property">value</span>++;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count.<span class="hljs-property">value</span>); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p>简言之，ref() 让我们能创造一种对任意值的 “引用”，并能够在不丢失响应性的前提下传递这些引用。这个功能很重要，因为它经常用于将逻辑提取到 组合函数 中。</p><h3 id="ref在模板中的解包"><a href="#ref在模板中的解包" class="headerlink" title="ref在模板中的解包"></a><code>ref</code>在模板中的解包</h3><p>当 ref 在模板中作为顶层属性被访问时，它们会被自动“解包”，所以不需要使用 .value。下面是之前的计数器例子，用 ref() 代替：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref &#125; from &quot;vue&quot;;<br><br>const count = ref(0);<br><br>function increment() &#123;<br>  count.value++;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;button @click=&quot;increment&quot;&gt;<br>    &#123;&#123; count &#125;&#125;<br>    &lt;!-- 无需 .value --&gt;<br>  &lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><blockquote><p>请注意，仅当 ref 是模板渲染上下文的顶层属性时才适用自动“解包”。</p></blockquote><h3 id="ref在响应式对象中的解包"><a href="#ref在响应式对象中的解包" class="headerlink" title="ref在响应式对象中的解包"></a><code>ref</code>在响应式对象中的解包</h3><p>当一个 ref 被嵌套在一个响应式对象中，作为属性被访问或更改时，它会自动解包，因此会表现得和一般的属性一样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123;<br>  count,<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">count</span>); <span class="hljs-comment">// 0</span><br><br>state.<span class="hljs-property">count</span> = <span class="hljs-number">1</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count.<span class="hljs-property">value</span>); <span class="hljs-comment">// 1</span><br><span class="hljs-comment">//如果将一个新的 ref 赋值给一个关联了已有 ref 的属性，那么它会替换掉旧的 ref：</span><br><span class="hljs-keyword">const</span> otherCount = <span class="hljs-title function_">ref</span>(<span class="hljs-number">2</span>);<br><br>state.<span class="hljs-property">count</span> = otherCount;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">count</span>); <span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 原始 ref 现在已经和 state.count 失去联系</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count.<span class="hljs-property">value</span>); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="数组和集合类型的-ref-解包"><a href="#数组和集合类型的-ref-解包" class="headerlink" title="数组和集合类型的 ref 解包"></a>数组和集合类型的 ref 解包</h3><p>跟响应式对象不同，当 ref 作为响应式数组或像 Map 这种原生集合类型的元素被访问时，不会进行解包。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> books = <span class="hljs-title function_">reactive</span>([<span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;Vue 3 Guide&quot;</span>)]);<br><span class="hljs-comment">// 这里需要 .value</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(books[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>);<br><br><span class="hljs-keyword">const</span> map = <span class="hljs-title function_">reactive</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&quot;count&quot;</span>, <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)]]));<br><span class="hljs-comment">// 这里需要 .value</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;count&quot;</span>).<span class="hljs-property">value</span>);<br></code></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>模板中的表达式虽然方便，但也只能用来做简单的操作。如果在模板中写太多逻辑，会让模板变得臃肿，难以维护。比如说，我们有这样一个包含嵌套数组的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> author = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John Doe&quot;</span>,<br>  <span class="hljs-attr">books</span>: [<br>    <span class="hljs-string">&quot;Vue 2 - Advanced Guide&quot;</span>,<br>    <span class="hljs-string">&quot;Vue 3 - Basic Guide&quot;</span>,<br>    <span class="hljs-string">&quot;Vue 4 - The Mystery&quot;</span>,<br>  ],<br>&#125;);<br></code></pre></td></tr></table></figure><p>我们想根据 author 是否已有一些书籍来展示不同的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;p&gt;Has published books:&lt;/p&gt;<br>&lt;span&gt;&#123;&#123; author.books.length &gt; 0 ? &#x27;Yes&#x27; : &#x27;No&#x27; &#125;&#125;&lt;/span&gt;<br></code></pre></td></tr></table></figure><p>这里的模板看起来有些复杂。我们必须认真看好一会儿才能明白它的计算依赖于 author.books。更重要的是，如果在模板中需要不止一次这样的计算，我们可不想将这样的代码在模板里重复好多遍。</p><p>因此我们推荐使用计算属性来描述依赖响应式状态的复杂逻辑。这是重构后的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; reactive, computed &#125; from &quot;vue&quot;;<br><br>const author = reactive(&#123;<br>  name: &quot;John Doe&quot;,<br>  books: [<br>    &quot;Vue 2 - Advanced Guide&quot;,<br>    &quot;Vue 3 - Basic Guide&quot;,<br>    &quot;Vue 4 - The Mystery&quot;,<br>  ],<br>&#125;);<br><br>// 一个计算属性 ref<br>const publishedBooksMessage = computed(() =&gt; &#123;<br>  return author.books.length &gt; 0 ? &quot;Yes&quot; : &quot;No&quot;;<br>&#125;);<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;p&gt;Has published books:&lt;/p&gt;<br>  &lt;span&gt;&#123;&#123; publishedBooksMessage &#125;&#125;&lt;/span&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>我们在这里定义了一个计算属性 publishedBooksMessage。computed() 方法期望接收一个 getter 函数，返回值为一个计算属性 ref。和其他一般的 ref 类似，你可以通过 publishedBooksMessage.value 访问计算结果。计算属性 ref 也会在模板中自动解包，因此在模板表达式中引用时无需添加 .value。</p><h3 id="可写计算属性"><a href="#可写计算属性" class="headerlink" title="可写计算属性"></a>可写计算属性</h3><p>计算属性默认是只读的。当你尝试修改一个计算属性时，你会收到一个运行时警告。只在某些特殊场景中你可能才需要用到“可写”的属性，你可以通过同时提供 getter 和 setter 来创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref, computed &#125; from &quot;vue&quot;;<br><br>const firstName = ref(&quot;John&quot;);<br>const lastName = ref(&quot;Doe&quot;);<br><br>const fullName = computed(&#123;<br>  // getter<br>  get() &#123;<br>    return firstName.value + &quot; &quot; + lastName.value;<br>  &#125;,<br>  // setter<br>  set(newValue) &#123;<br>    // 注意：我们这里使用的是解构赋值语法<br>    [firstName.value, lastName.value] = newValue.split(&quot; &quot;);<br>  &#125;,<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><h4 id="Getter-不应该有副作用"><a href="#Getter-不应该有副作用" class="headerlink" title="Getter 不应该有副作用"></a>Getter 不应该有副作用</h4><p>计算属性的 getter 应只做计算而没有任何其他的副作用，这一点非常重要，请务必牢记。举例来说，<strong>不要在 getter 中做异步请求或者更改 DOM！</strong>一个计算属性的声明中描述的是如何根据其他值派生一个值。因此 getter 的职责应该仅为计算和返回该值。在之后的指引中我们会讨论如何使用监听器根据其他响应式状态的变更来创建副作用。</p><h4 id="避免直接修改计算属性值"><a href="#避免直接修改计算属性值" class="headerlink" title="避免直接修改计算属性值"></a>避免直接修改计算属性值</h4><p>从计算属性返回的值是派生状态。可以把它看作是一个“临时快照”，每当源状态发生变化时，就会创建一个新的快照。更改快照是没有意义的，因此计算属性的返回值应该被视为只读的，并且永远不应该被更改——应该更新它所依赖的源状态以触发新的计算。</p><h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><p>数据绑定的一个常见需求场景是操纵元素的 CSS class 列表和内联样式。</p><h3 id="绑定-HTML-class"><a href="#绑定-HTML-class" class="headerlink" title="绑定 HTML class"></a>绑定 HTML class</h3><h4 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h4><p>我们可以给 :class (v-bind:class 的缩写) 传递一个对象来动态切换 class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div :class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>上面的语法表示 active 是否存在取决于数据属性 isActive 的真假值。</p><p>你可以在对象中写多个字段来操作多个 class。此外，:class 指令也可以和一般的 class attribute 共存。举例来说，下面这样的状态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> isActive = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">const</span> hasError = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>配合以下模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div<br>  class=&quot;static&quot;<br>  :class=&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;<br>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>渲染的结果会是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div class=&quot;static active&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>绑定的对象并不一定需要写成内联字面量的形式，也可以直接绑定一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> classObject = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;text-danger&quot;</span>: <span class="hljs-literal">false</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div :class=&quot;classObject&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>我们也可以绑定一个返回对象的计算属性。这是一个常见且很有用的技巧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> isActive = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">const</span> error = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);<br><br><span class="hljs-keyword">const</span> classObject = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> (&#123;<br>  <span class="hljs-attr">active</span>: isActive.<span class="hljs-property">value</span> &amp;&amp; !error.<span class="hljs-property">value</span>,<br>  <span class="hljs-string">&quot;text-danger&quot;</span>: error.<span class="hljs-property">value</span> &amp;&amp; error.<span class="hljs-property">value</span>.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;fatal&quot;</span>,<br>&#125;));<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div :class=&quot;classObject&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="绑定数组"><a href="#绑定数组" class="headerlink" title="绑定数组"></a>绑定数组</h4><p>我们可以给 :class 绑定一个数组来渲染多个 CSS class：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> activeClass = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;active&quot;</span>);<br><span class="hljs-keyword">const</span> errorClass = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;text-danger&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div :class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>渲染的结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>如果你也想在数组中有条件地渲染某个 class，你可以使用三元表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div :class=&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>然而，这可能在有多个依赖条件的 class 时会有些冗长。因此也可以在数组中嵌套对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div :class=&quot;[&#123; active: isActive &#125;, errorClass]&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h3><h4 id="绑定对象-1"><a href="#绑定对象-1" class="headerlink" title="绑定对象"></a>绑定对象</h4><p>:style 支持绑定 JavaScript 对象值，对应的是 HTML 元素的 style 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> activeColor = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;red&quot;</span>);<br><span class="hljs-keyword">const</span> fontSize = <span class="hljs-title function_">ref</span>(<span class="hljs-number">30</span>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div :style=&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>尽管推荐使用 camelCase，但 :style 也支持 kebab-cased 形式的 CSS 属性 key (对应其 CSS 中的实际名称)，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div :style=&quot;&#123; &#x27;font-size&#x27;: fontSize + &#x27;px&#x27; &#125;&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>直接绑定一个样式对象通常是一个好主意，这样可以使模板更加简洁：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> styleObject = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>,<br>  <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;13px&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div :style=&quot;styleObject&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>同样的，如果样式对象需要更复杂的逻辑，也可以使用返回样式对象的计算属性。</p><h4 id="绑定数组-1"><a href="#绑定数组-1" class="headerlink" title="绑定数组"></a>绑定数组</h4><p>我们还可以给 :style 绑定一个包含多个样式对象的数组。这些对象会被合并后渲染到同一元素上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div :style=&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>v-if 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回真值时才被渲染。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;<br></code></pre></td></tr></table></figure><h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><p>你也可以使用 v-else 为 v-if 添加一个“else 区块”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;button @click=&quot;awesome = !awesome&quot;&gt;Toggle&lt;/button&gt;<br><br>&lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;<br>&lt;h1 v-else&gt;Oh no 😢&lt;/h1&gt;<br></code></pre></td></tr></table></figure><h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h3><p>顾名思义，v-else-if 提供的是相应于 v-if 的“else if 区块”。它可以连续多次重复使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div v-if=&quot;type === &#x27;A&#x27;&quot;&gt;A&lt;/div&gt;<br>&lt;div v-else-if=&quot;type === &#x27;B&#x27;&quot;&gt;B&lt;/div&gt;<br>&lt;div v-else-if=&quot;type === &#x27;C&#x27;&quot;&gt;C&lt;/div&gt;<br>&lt;div v-else&gt;Not A/B/C&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="lt-template-gt-上的-v-if"><a href="#lt-template-gt-上的-v-if" class="headerlink" title="&lt;template&gt; 上的 v-if"></a><code>&lt;template&gt;</code> 上的 v-if</h3><p>因为 v-if 是一个指令，他必须依附于某个元素。但如果我们想要切换不止一个元素呢？在这种情况下我们可以在一个 <code>&lt;template&gt;</code> 元素上使用 v-if，这只是一个不可见的包装器元素，最后渲染的结果并不会包含这个 <code>&lt;template&gt;</code> 元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;template v-if=&quot;ok&quot;&gt;<br>  &lt;h1&gt;Title&lt;/h1&gt;<br>  &lt;p&gt;Paragraph 1&lt;/p&gt;<br>  &lt;p&gt;Paragraph 2&lt;/p&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><blockquote><p>v-else 和 v-else-if 也可以在 <code>&lt;template&gt;</code> 上使用。</p></blockquote><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>另一个可以用来按条件显示一个元素的指令是 v-show。其用法基本一样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;<br></code></pre></td></tr></table></figure><p>不同之处在于 v-show 会在 DOM 渲染中保留该元素；v-show 仅切换了该元素上名为 display 的 CSS 属性。</p><p>v-show 不支持在 <code>&lt;template&gt;</code> 元素上使用，也不能和 v-else 搭配使用。</p><h3 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a><code>v-if</code> vs <code>v-show</code></h3><p>v-if 是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。</p><p>v-if 也是惰性的：如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染。</p><p>相比之下，v-show 简单许多，元素无论初始条件如何，始终会被渲染，只有 CSS display 属性会被切换。</p><p>总的来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要频繁切换，则使用 v-show 较好；如果在运行时绑定条件很少改变，则 v-if 会更合适。</p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>我们可以使用 v-for 指令基于一个数组来渲染一个列表。v-for 指令的值需要使用 item in items 形式的特殊语法，其中 items 是源数据的数组，而 item 是迭代项的别名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> items = <span class="hljs-title function_">ref</span>([&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Foo&quot;</span> &#125;, &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Bar&quot;</span> &#125;]);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;li v-for=&quot;item in items&quot;&gt;&#123;&#123; item.message &#125;&#125;&lt;/li&gt;<br></code></pre></td></tr></table></figure><p>在 v-for 块中可以完整地访问父作用域内的属性和变量。v-for 也支持使用可选的第二个参数表示当前项的位置索引。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parentMessage = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;Parent&quot;</span>);<br><span class="hljs-keyword">const</span> items = <span class="hljs-title function_">ref</span>([&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Foo&quot;</span> &#125;, &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Bar&quot;</span> &#125;]);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;li v-for=&quot;(item, index) in items&quot;&gt;<br>  &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;<br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><ul><li>Parent-0-Foo</li><li>Parent-1-Bar</li></ul><hr><p>你也可以在定义 v-for 的变量别名时使用解构，和解构函数参数类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;li v-for=&quot;&#123; message &#125; in items&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/li&gt;<br><br>&lt;!-- 有 index 索引时 --&gt;<br>&lt;li v-for=&quot;(&#123; message &#125;, index) in items&quot;&gt;&#123;&#123; message &#125;&#125; &#123;&#123; index &#125;&#125;&lt;/li&gt;<br></code></pre></td></tr></table></figure><p>对于多层嵌套的 v-for，作用域的工作方式和函数的作用域很类似。每个 v-for 作用域都可以访问到父级作用域：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;li v-for=&quot;item in items&quot;&gt;<br>  &lt;span v-for=&quot;childItem in item.children&quot;&gt;<br>    &#123;&#123; item.message &#125;&#125; &#123;&#123; childItem &#125;&#125;<br>  &lt;/span&gt;<br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><p>你也可以使用 of 作为分隔符来替代 in，这更接近 JavaScript 的迭代器语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="v-for-与对象"><a href="#v-for-与对象" class="headerlink" title="v-for 与对象"></a>v-for 与对象</h3><p>你也可以使用 v-for 来遍历一个对象的所有属性。遍历的顺序会基于对该对象调用 Object.keys() 的返回值来决定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myObject = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;How to do lists in Vue&quot;</span>,<br>  <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;Jane Doe&quot;</span>,<br>  <span class="hljs-attr">publishedAt</span>: <span class="hljs-string">&quot;2016-04-10&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;ul&gt;<br>  &lt;li v-for=&quot;value in myObject&quot;&gt;&#123;&#123; value &#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure><p>可以通过提供第二个参数表示属性名 (例如 key)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;li v-for=&quot;(value, key) in myObject&quot;&gt;&#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;&lt;/li&gt;<br></code></pre></td></tr></table></figure><p>第三个参数表示位置索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;li v-for=&quot;(value, key, index) in myObject&quot;&gt;<br>  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;<br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><h3 id="在-v-for-里使用范围值"><a href="#在-v-for-里使用范围值" class="headerlink" title="在 v-for 里使用范围值"></a>在 v-for 里使用范围值</h3><p>v-for 可以直接接受一个整数值。在这种用例中，会将该模板基于 1…n 的取值范围重复多次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;span v-for=&quot;n in 10&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/span&gt;<br></code></pre></td></tr></table></figure><blockquote><p>注意此处 n 的初值是从 1 开始而非 0</p></blockquote><h3 id="lt-template-gt-上的-v-for"><a href="#lt-template-gt-上的-v-for" class="headerlink" title="&lt;template&gt; 上的 v-for"></a><code>&lt;template&gt;</code> 上的 v-for</h3><p>与模板上的 v-if 类似，你也可以在 <code>&lt;template&gt;</code> 标签上使用 v-for 来渲染一个包含多个元素的块。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;ul&gt;<br>  &lt;template v-for=&quot;item in items&quot;&gt;<br>    &lt;li&gt;&#123;&#123; item.msg &#125;&#125;&lt;/li&gt;<br>    &lt;li class=&quot;divider&quot; role=&quot;presentation&quot;&gt;&lt;/li&gt;<br>  &lt;/template&gt;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure><h3 id="v-if-和-v-for"><a href="#v-if-和-v-for" class="headerlink" title="v-if 和 v-for"></a>v-if 和 v-for</h3><p>当它们同时存在于一个节点上时，v-if 比 v-for 的优先级更高。这意味着 v-if 的条件将无法访问到 v-for 作用域内定义的变量别名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!--<br> 这会抛出一个错误，因为属性 todo 此时<br> 没有在该实例上定义<br>--&gt;<br>&lt;li v-for=&quot;todo in todos&quot; v-if=&quot;!todo.isComplete&quot;&gt;&#123;&#123; todo.name &#125;&#125;&lt;/li&gt;<br></code></pre></td></tr></table></figure><p>在外新包装一层 <code>&lt;template&gt;</code> 再在其上使用 v-for 可以解决这个问题 (这也更加明显易读)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;template v-for=&quot;todo in todos&quot;&gt;<br>  &lt;li v-if=&quot;!todo.isComplete&quot;&gt;&#123;&#123; todo.name &#125;&#125;&lt;/li&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="通过-key-管理状态"><a href="#通过-key-管理状态" class="headerlink" title="通过 key 管理状态"></a>通过 key 管理状态</h3><p>Vue 默认按照“就地更新”的策略来更新通过 v-for 渲染的元素列表。当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新每个元素，确保它们在原本指定的索引位置上渲染。</p><p>默认模式是高效的，但<strong>只适用于列表渲染输出的结果不依赖子组件状态或者临时 DOM 状态 (例如表单输入值) 的情况。</strong></p><p>为了给 Vue 一个提示，以便它可以跟踪每个节点的标识，从而重用和重新排序现有的元素，你需要为每个元素对应的块提供一个唯一的 key attribute：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;<br>  &lt;!-- 内容 --&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>当你使用 <code>&lt;template v-for&gt;</code> 时，key 应该被放置在这个 <code>&lt;template&gt;</code> 容器上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;template v-for=&quot;todo in todos&quot; :key=&quot;todo.name&quot;&gt;<br>  &lt;li&gt;&#123;&#123; todo.name &#125;&#125;&lt;/li&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>推荐在任何可行的时候为 v-for 提供一个 key attribute，除非所迭代的 DOM 内容非常简单 (例如：不包含组件或有状态的 DOM 元素)，或者你想有意采用默认行为来提高性能。</p><h3 id="数组变化预测"><a href="#数组变化预测" class="headerlink" title="数组变化预测"></a>数组变化预测</h3><h4 id="变更方法"><a href="#变更方法" class="headerlink" title="变更方法"></a>变更方法</h4><p>Vue 能够侦听响应式数组的变更方法，并在它们被调用时触发相关的更新。这些变更方法包括：</p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><h4 id="替换一个数组"><a href="#替换一个数组" class="headerlink" title="替换一个数组"></a>替换一个数组</h4><p>变更方法，顾名思义，就是会对调用它们的原数组进行变更。相对地，也有一些不可变 (immutable) 方法，例如 filter()，concat() 和 slice()，这些都不会更改原数组，而总是返回一个新数组。当遇到的是非变更方法时，我们需要将旧的数组替换为新的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// `items` 是一个数组的 ref</span><br>items.<span class="hljs-property">value</span> = items.<span class="hljs-property">value</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">message</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/Foo/</span>));<br></code></pre></td></tr></table></figure><p>你可能认为这将导致 Vue 丢弃现有的 DOM 并重新渲染整个列表——幸运的是，情况并非如此。Vue 实现了一些巧妙的方法来最大化对 DOM 元素的重用，因此用另一个包含部分重叠对象的数组来做替换，仍会是一种非常高效的操作。</p><h3 id="展示过滤或排序后的结果"><a href="#展示过滤或排序后的结果" class="headerlink" title="展示过滤或排序后的结果"></a>展示过滤或排序后的结果</h3><p>有时，我们希望显示数组经过过滤或排序后的内容，而不实际变更或重置原始数据。在这种情况下，你可以创建返回已过滤或已排序数组的计算属性(使用 filter )。<br>在计算属性中使用 reverse() 和 sort() 的时候务必小心！这两个方法将变更原始数组，计算函数中不应该这么做。请在调用这些方法之前创建一个原数组的副本：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">- return numbers.reverse()</span><br><span class="hljs-addition">+ return [...numbers].reverse()</span><br></code></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h3><p>我们可以使用 v-on 指令 (简写为 @) 来监听 DOM 事件，并在事件触发时执行对应的 JavaScript。用法：<code>v-on:click=&quot;handler&quot;</code> 或 <code>@click=&quot;handler&quot;</code>。<br>事件处理器 (handler) 的值可以是：</p><ol><li><strong>内联事件处理器：</strong>事件被触发时执行的内联 JavaScript 语句 (与 onclick 类似)。</li><li><strong>方法事件处理器：</strong>一个指向组件上定义的方法的属性名或是路径。</li></ol><h4 id="内联事件处理器"><a href="#内联事件处理器" class="headerlink" title="内联事件处理器"></a>内联事件处理器</h4><p>内联事件处理器通常用于简单场景，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;button @click=&quot;count++&quot;&gt;Add 1&lt;/button&gt;<br>&lt;p&gt;Count is: &#123;&#123; count &#125;&#125;&lt;/p&gt;<br></code></pre></td></tr></table></figure><h4 id="方法事件处理器"><a href="#方法事件处理器" class="headerlink" title="方法事件处理器"></a>方法事件处理器</h4><p>随着事件处理器的逻辑变得愈发复杂，内联代码方式变得不够灵活。因此 v-on 也可以接受一个方法名或对某个方法的调用。</p><p>举例来说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> name = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;Vue.js&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">`Hello <span class="hljs-subst">$&#123;name.value&#125;</span>!`</span>);<br>  <span class="hljs-comment">// `event` 是 DOM 原生事件</span><br>  <span class="hljs-keyword">if</span> (event) &#123;<br>    <span class="hljs-title function_">alert</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">tagName</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- `greet` 是上面定义过的方法名 --&gt;<br>&lt;button @click=&quot;greet&quot;&gt;Greet&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>方法事件处理器会自动接收原生 DOM 事件并触发执行。在上面的例子中，我们能够通过被触发事件的 event.target.tagName 访问到该 DOM 元素。</p><h4 id="方法与内联事件判断"><a href="#方法与内联事件判断" class="headerlink" title="方法与内联事件判断"></a>方法与内联事件判断</h4><p>模板编译器会通过检查 v-on 的值是否是合法的 JavaScript 标识符或属性访问路径来断定是何种形式的事件处理器。举例来说，foo、foo.bar 和 foo[‘bar’] 会被视为方法事件处理器，而 foo() 和 count++ 会被视为内联事件处理器。</p><h3 id="在内联处理器中调用方法"><a href="#在内联处理器中调用方法" class="headerlink" title="在内联处理器中调用方法"></a>在内联处理器中调用方法</h3><p>除了直接绑定方法名，你还可以在内联事件处理器中调用方法。这允许我们向方法传入自定义参数以代替原生事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">say</span>(<span class="hljs-params">message</span>) &#123;<br>  <span class="hljs-title function_">alert</span>(message);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;button @click=&quot;say(&#x27;hello&#x27;)&quot;&gt;Say hello&lt;/button&gt;<br>&lt;button @click=&quot;say(&#x27;bye&#x27;)&quot;&gt;Say bye&lt;/button&gt;<br></code></pre></td></tr></table></figure><h3 id="在内联事件处理器中访问事件参数"><a href="#在内联事件处理器中访问事件参数" class="headerlink" title="在内联事件处理器中访问事件参数"></a>在内联事件处理器中访问事件参数</h3><p>有时我们需要在内联事件处理器中访问原生 DOM 事件。你可以向该处理器方法传入一个特殊的 $event 变量，或者使用内联箭头函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- 使用特殊的 $event 变量 --&gt;<br>&lt;button @click=&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;&gt;Submit&lt;/button&gt;<br><br>&lt;!-- 使用内联箭头函数 --&gt;<br>&lt;button @click=&quot;(event) =&gt; warn(&#x27;Form cannot be submitted yet.&#x27;, event)&quot;&gt;<br>  Submit<br>&lt;/button&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">warn</span>(<span class="hljs-params">message, event</span>) &#123;<br>  <span class="hljs-comment">// 这里可以访问原生事件</span><br>  <span class="hljs-keyword">if</span> (event) &#123;<br>    event.<span class="hljs-title function_">preventDefault</span>();<br>  &#125;<br>  <span class="hljs-title function_">alert</span>(message);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>在处理事件时调用 event.preventDefault() 或 event.stopPropagation() 是很常见的。尽管我们可以直接在方法内调用，但如果方法能更专注于数据逻辑而不用去处理 DOM 事件的细节会更好。</p><p>为解决这一问题，Vue 为 v-on 提供了事件修饰符。修饰符是用 . 表示的指令后缀，包含以下这些：</p><ul><li>.stop</li><li>.prevent</li><li>.self</li><li>.capture</li><li>.once</li><li>.passive</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- 单击事件将停止传递 --&gt;<br>&lt;a @click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;<br><br>&lt;!-- 提交事件将不再重新加载页面 --&gt;<br>&lt;form @submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;<br><br>&lt;!-- 修饰语可以使用链式书写 --&gt;<br>&lt;a @click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;<br><br>&lt;!-- 也可以只有修饰符 --&gt;<br>&lt;form @submit.prevent&gt;&lt;/form&gt;<br><br>&lt;!-- 仅当 event.target 是元素本身时才会触发事件处理器 --&gt;<br>&lt;!-- 例如：事件处理器不来自子元素 --&gt;<br>&lt;div @click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><p>使用修饰符时需要注意调用顺序，因为相关代码是以相同的顺序生成的。因此使用 @click.prevent.self 会阻止元素及其子元素的所有点击事件的默认行为，而 @click.self.prevent 则只会阻止对元素本身的点击事件的默认行为。</p></blockquote><p>.capture、.once 和 .passive 修饰符与原生 addEventListener 事件相对应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- 添加事件监听器时，使用 `capture` 捕获模式 --&gt;<br>&lt;!-- 例如：指向内部元素的事件，在被内部元素处理前，先被外部处理 --&gt;<br>&lt;div @click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;<br><br>&lt;!-- 点击事件最多被触发一次 --&gt;<br>&lt;a @click.once=&quot;doThis&quot;&gt;&lt;/a&gt;<br><br>&lt;!-- 滚动事件的默认行为 (scrolling) 将立即发生而非等待 `onScroll` 完成 --&gt;<br>&lt;!-- 以防其中包含 `event.preventDefault()` --&gt;<br>&lt;div @scroll.passive=&quot;onScroll&quot;&gt;...&lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><p>.passive 修饰符一般用于触摸事件的监听器，可以用来改善移动端设备的滚屏性能。</p></blockquote><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><p>在监听键盘事件时，我们经常需要检查特定的按键。Vue 允许在 v-on 或 @ 监听按键事件时添加按键修饰符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- 仅在 `key` 为 `Enter` 时调用 `submit` --&gt;<br>&lt;input @keyup.enter=&quot;submit&quot; /&gt;<br></code></pre></td></tr></table></figure><p>你可以直接使用 KeyboardEvent.key 暴露的按键名称作为修饰符，但需要转为 kebab-case 形式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- 仅在 `key` 为 `Enter` 时调用 `submit` --&gt;<br>&lt;input @keyup.page-down=&quot;onPageDown&quot; /&gt;<br></code></pre></td></tr></table></figure><h4 id="按键别名"><a href="#按键别名" class="headerlink" title="按键别名"></a>按键别名</h4><p>Vue 为一些常用的按键提供了别名：</p><ul><li>.enter</li><li>.tab</li><li>.delete (捕获“Delete”和“Backspace”两个按键)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li></ul><h4 id="系统按键修饰符"><a href="#系统按键修饰符" class="headerlink" title="系统按键修饰符"></a>系统按键修饰符</h4><p>你可以使用以下系统按键修饰符来触发鼠标或键盘事件监听器，只有当按键被按下时才会触发。</p><ul><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta</li></ul><p>举例来说：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- Alt + Enter --&gt;<br>&lt;input @keyup.alt.enter=&quot;clear&quot; /&gt;<br><br>&lt;!-- Ctrl + 点击 --&gt;<br>&lt;div @click.ctrl=&quot;doSomething&quot;&gt;Do something&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title=".exact 修饰符"></a>.exact 修饰符</h4><p>.exact 修饰符允许控制触发一个事件所需的确定组合的系统按键修饰符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- 当按下 Ctrl 时，即使同时按下 Alt 或 Shift 也会触发 --&gt;<br>&lt;button @click.ctrl=&quot;onClick&quot;&gt;A&lt;/button&gt;<br><br>&lt;!-- 仅当按下 Ctrl 且未按任何其他键时才会触发 --&gt;<br>&lt;button @click.ctrl.exact=&quot;onCtrlClick&quot;&gt;A&lt;/button&gt;<br><br>&lt;!-- 仅当没有按下任何系统按键时触发 --&gt;<br>&lt;button @click.exact=&quot;onClick&quot;&gt;A&lt;/button&gt;<br></code></pre></td></tr></table></figure><h3 id="鼠标按键修饰符"><a href="#鼠标按键修饰符" class="headerlink" title="鼠标按键修饰符"></a>鼠标按键修饰符</h3><ul><li>.left</li><li>.right</li><li>.middle</li></ul><p>这些修饰符将处理程序限定为由特定鼠标按键触发的事件。</p><h2 id="表单输入输出"><a href="#表单输入输出" class="headerlink" title="表单输入输出"></a>表单输入输出</h2><p>在前端处理表单时，我们常常需要将表单输入框的内容同步给 JavaScript 中相应的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;input :value=&quot;text&quot; @input=&quot;event =&gt; text = event.target.value&quot; /&gt;<br></code></pre></td></tr></table></figure><p>v-model 指令帮我们简化了这一步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;input v-model=&quot;text&quot; /&gt;<br></code></pre></td></tr></table></figure><p>另外，v-model 还可以用于各种不同类型的输入，<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code> 元素。它会根据所使用的元素自动使用对应的 DOM 属性和事件组合：</p><ul><li>文本类型的 <code>&lt;input&gt;</code> 和 <code>&lt;textarea&gt;</code> 元素会绑定 value property 并侦听 input 事件；</li><li><code>&lt;input type=&quot;checkbox&quot;&gt;</code> 和 <code>&lt;input type=&quot;radio&quot;&gt;</code> 会绑定 checked property 并侦听 change 事件；</li><li><code>&lt;select&gt;</code> 会绑定 value property 并侦听 change 事件。</li></ul><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt;<br>&lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot; /&gt;<br></code></pre></td></tr></table></figure><h4 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;span&gt;Multiline message is:&lt;/span&gt;<br>&lt;p style=&quot;white-space: pre-line;&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;<br>&lt;textarea v-model=&quot;message&quot; placeholder=&quot;add multiple lines&quot;&gt;&lt;/textarea&gt;<br></code></pre></td></tr></table></figure><p>注意在 <code>&lt;textarea&gt;</code> 中是不支持插值表达式的。请使用 v-model 来替代：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- 错误 --&gt;<br>&lt;textarea&gt;&#123;&#123; text &#125;&#125;&lt;/textarea&gt;<br><br>&lt;!-- 正确 --&gt;<br>&lt;textarea v-model=&quot;text&quot;&gt;&lt;/textarea&gt;<br></code></pre></td></tr></table></figure><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><p>单一的复选框，绑定布尔类型值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot; /&gt;<br>&lt;label for=&quot;checkbox&quot;&gt;&#123;&#123; checked &#125;&#125;&lt;/label&gt;<br></code></pre></td></tr></table></figure><p>我们也可以将多个复选框绑定到同一个数组或集合的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> checkedNames = <span class="hljs-title function_">ref</span>([]);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div&gt;Checked names: &#123;&#123; checkedNames &#125;&#125;&lt;/div&gt;<br><br>&lt;input type=&quot;checkbox&quot; id=&quot;jack&quot; value=&quot;Jack&quot; v-model=&quot;checkedNames&quot; /&gt;<br>&lt;label for=&quot;jack&quot;&gt;Jack&lt;/label&gt;<br><br>&lt;input type=&quot;checkbox&quot; id=&quot;john&quot; value=&quot;John&quot; v-model=&quot;checkedNames&quot; /&gt;<br>&lt;label for=&quot;john&quot;&gt;John&lt;/label&gt;<br><br>&lt;input type=&quot;checkbox&quot; id=&quot;mike&quot; value=&quot;Mike&quot; v-model=&quot;checkedNames&quot; /&gt;<br>&lt;label for=&quot;mike&quot;&gt;Mike&lt;/label&gt;<br></code></pre></td></tr></table></figure><p>在这个例子中，checkedNames 数组将始终包含所有当前被选中的框的值。</p><h4 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div&gt;Picked: &#123;&#123; picked &#125;&#125;&lt;/div&gt;<br><br>&lt;input type=&quot;radio&quot; id=&quot;one&quot; value=&quot;One&quot; v-model=&quot;picked&quot; /&gt;<br>&lt;label for=&quot;one&quot;&gt;One&lt;/label&gt;<br><br>&lt;input type=&quot;radio&quot; id=&quot;two&quot; value=&quot;Two&quot; v-model=&quot;picked&quot; /&gt;<br>&lt;label for=&quot;two&quot;&gt;Two&lt;/label&gt;<br></code></pre></td></tr></table></figure><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p>单个选择器的示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/div&gt;<br><br>&lt;select v-model=&quot;selected&quot;&gt;<br>  &lt;option disabled value=&quot;&quot;&gt;Please select one&lt;/option&gt;<br>  &lt;option&gt;A&lt;/option&gt;<br>  &lt;option&gt;B&lt;/option&gt;<br>  &lt;option&gt;C&lt;/option&gt;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>多选 (值绑定到一个数组)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/div&gt;<br><br>&lt;select v-model=&quot;selected&quot; multiple&gt;<br>  &lt;option&gt;A&lt;/option&gt;<br>  &lt;option&gt;B&lt;/option&gt;<br>  &lt;option&gt;C&lt;/option&gt;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>选择器的选项可以使用 v-for 动态渲染：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> selected = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br><br><span class="hljs-keyword">const</span> options = <span class="hljs-title function_">ref</span>([<br>  &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;One&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;A&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Two&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;B&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Three&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;C&#x27;</span> &#125;<br>])<span class="hljs-string">``</span><span class="hljs-string">`</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;select v-model=&quot;selected&quot;&gt;<br>  &lt;option v-for=&quot;option in options&quot; :value=&quot;option.value&quot;&gt;<br>    &#123;&#123; option.text &#125;&#125;<br>  &lt;/option&gt;<br>&lt;/select&gt;<br><br>&lt;div&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h3><p>对于单选按钮，复选框和选择器选项，v-model 绑定的值通常是静态的字符串 (或者对复选框是布尔值)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- `picked` 在被选择时是字符串 &quot;a&quot; --&gt;<br>&lt;input type=&quot;radio&quot; v-model=&quot;picked&quot; value=&quot;a&quot; /&gt;<br><br>&lt;!-- `toggle` 只会为 true 或 false --&gt;<br>&lt;input type=&quot;checkbox&quot; v-model=&quot;toggle&quot; /&gt;<br><br>&lt;!-- `selected` 在第一项被选中时为字符串 &quot;abc&quot; --&gt;<br>&lt;select v-model=&quot;selected&quot;&gt;<br>  &lt;option value=&quot;abc&quot;&gt;ABC&lt;/option&gt;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>但有时我们可能希望将该值绑定到当前组件实例上的动态数据。这可以通过使用 v-bind 来实现。此外，使用 v-bind 还使我们可以将选项值绑定为非字符串的数据类型。</p><h4 id="复选框-1"><a href="#复选框-1" class="headerlink" title="复选框"></a>复选框</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;input type=&quot;checkbox&quot; v-model=&quot;toggle&quot; true-value=&quot;yes&quot; false-value=&quot;no&quot; /&gt;<br></code></pre></td></tr></table></figure><p>true-value 和 false-value 是 Vue 特有的 attributes，仅支持和 v-model 配套使用。这里 toggle 属性的值会在选中时被设为 ‘yes’，取消选择时设为 ‘no’。你同样可以通过 v-bind 将其绑定为其他动态值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;input<br>  type=&quot;checkbox&quot;<br>  v-model=&quot;toggle&quot;<br>  :true-value=&quot;dynamicTrueValue&quot;<br>  :false-value=&quot;dynamicFalseValue&quot;<br>/&gt;<br></code></pre></td></tr></table></figure><h4 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;input type=&quot;radio&quot; v-model=&quot;pick&quot; :value=&quot;first&quot; /&gt;<br>&lt;input type=&quot;radio&quot; v-model=&quot;pick&quot; :value=&quot;second&quot; /&gt;<br></code></pre></td></tr></table></figure><p>pick 会在第一个按钮选中时被设为 first，在第二个按钮选中时被设为 second。</p><h4 id="选择器选项"><a href="#选择器选项" class="headerlink" title="选择器选项"></a>选择器选项</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;select v-model=&quot;selected&quot;&gt;<br>  &lt;!-- 内联对象字面量 --&gt;<br>  &lt;option :value=&quot;&#123; number: 123 &#125;&quot;&gt;123&lt;/option&gt;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>v-model 同样也支持非字符串类型的值绑定！在上面这个例子中，当某个选项被选中，selected 会被设为该对象字面量值 { number: 123 }。</p><h3 id="修饰符-1"><a href="#修饰符-1" class="headerlink" title="修饰符"></a>修饰符</h3><h4 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h4><p>默认情况下，v-model 会在每次 input 事件后更新数据 (IME 拼字阶段的状态例外)。你可以添加 lazy 修饰符来改为在每次 change 事件后更新数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- 在 &quot;change&quot; 事件后同步更新而不是 &quot;input&quot; --&gt;<br>&lt;input v-model.lazy=&quot;msg&quot; /&gt;<br></code></pre></td></tr></table></figure><h4 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h4><p>如果你想让用户输入自动转换为数字，你可以在 v-model 后添加 .number 修饰符来管理输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;input v-model.number=&quot;age&quot; /&gt;<br></code></pre></td></tr></table></figure><p>如果该值无法被 parseFloat() 处理，那么将返回原始值。</p><p>number 修饰符会在输入框有 type=”number” 时自动启用。</p><h4 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h4><p>如果你想要默认自动去除用户输入内容中两端的空格，你可以在 v-model 后添加 .trim 修饰符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;input v-model.trim=&quot;msg&quot; /&gt;<br></code></pre></td></tr></table></figure><h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><p>每个 Vue 组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到 DOM，以及在数据改变时更新 DOM。在此过程中，它也会运行被称为生命周期钩子的函数，让开发者有机会在特定阶段运行自己的代码。</p><h3 id="注册周期钩子"><a href="#注册周期钩子" class="headerlink" title="注册周期钩子"></a>注册周期钩子</h3><p>举例来说，onMounted 钩子可以用来在组件完成初始渲染并创建 DOM 节点后运行代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;script setup&gt;<br>  import &#123; onMounted &#125; from &quot;vue&quot;;<br><br>  onMounted(() =&gt; &#123;<br>    console.log(`the component is now mounted.`);<br>  &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>当调用 onMounted 时，Vue 会自动将回调函数注册到当前正被初始化的组件实例上。这意味着这些钩子应当在组件初始化时被同步注册。例如，请不要这样做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 异步注册时当前组件实例已丢失</span><br>    <span class="hljs-comment">// 这将不会正常工作</span><br>  &#125;);<br>&#125;, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>注意这并不意味着对 onMounted 的调用必须放在 setup() 或 <code>&lt;script setup&gt;</code> 内的词法上下文中。<code>onMounted()</code> 也可以在一个外部函数中调用，只要调用栈是同步的，且最终起源自 <code>setup()</code> 就可以。</p><h3 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h3><img src="../Vue/life_round_api.png" alt="生命周期" width="500" height="500"><p>想了解更多生命周期钩子 api 的用法，请参考<a href="https://cn.vuejs.org/api/composition-api-lifecycle.template">生命周期钩子 API 索引</a></p><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><p>在组合式 API 中，我们可以使用 watch 函数在每次响应式状态发生变化时触发回调函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref, watch &#125; from &quot;vue&quot;;<br><br>const question = ref(&quot;&quot;);<br>const answer = ref(&quot;Questions usually contain a question mark. ;-)&quot;);<br><br>// 可以直接侦听一个 ref<br>watch(question, async (newQuestion, oldQuestion) =&gt; &#123;<br>  if (newQuestion.indexOf(&quot;?&quot;) &gt; -1) &#123;<br>    answer.value = &quot;Thinking...&quot;;<br>    try &#123;<br>      const res = await fetch(&quot;https://yesno.wtf/api&quot;);<br>      answer.value = (await res.json()).answer;<br>    &#125; catch (error) &#123;<br>      answer.value = &quot;Error! Could not reach the API. &quot; + error;<br>    &#125;<br>  &#125;<br>&#125;);<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;p&gt;<br>    Ask a yes/no question:<br>    &lt;input v-model=&quot;question&quot; /&gt;<br>  &lt;/p&gt;<br>  &lt;p&gt;&#123;&#123; answer &#125;&#125;&lt;/p&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>现在可能还看不懂这些代码，先往下读</p><h3 id="侦听数据源类型"><a href="#侦听数据源类型" class="headerlink" title="侦听数据源类型"></a>侦听数据源类型</h3><p>watch 的第一个参数可以是不同形式的“数据源”：它可以是一个 ref (包括计算属性)、一个响应式对象、一个 getter 函数、或多个数据源组成的数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> x = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">const</span> y = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 单个 ref</span><br><span class="hljs-title function_">watch</span>(x, <span class="hljs-function">(<span class="hljs-params">newX</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`x is <span class="hljs-subst">$&#123;newX&#125;</span>`</span>);<br>&#125;);<br><br><span class="hljs-comment">// getter 函数</span><br><span class="hljs-title function_">watch</span>(<br>  <span class="hljs-function">() =&gt;</span> x.<span class="hljs-property">value</span> + y.<span class="hljs-property">value</span>,<br>  <span class="hljs-function">(<span class="hljs-params">sum</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`sum of x + y is: <span class="hljs-subst">$&#123;sum&#125;</span>`</span>);<br>  &#125;<br>);<br><br><span class="hljs-comment">// 多个来源组成的数组</span><br><span class="hljs-title function_">watch</span>([x, <span class="hljs-function">() =&gt;</span> y.<span class="hljs-property">value</span>], <span class="hljs-function">(<span class="hljs-params">[newX, newY]</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`x is <span class="hljs-subst">$&#123;newX&#125;</span> and y is <span class="hljs-subst">$&#123;newY&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>注意，你不能直接侦听响应式对象的属性值，例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;);<br><br><span class="hljs-comment">// 错误，因为 watch() 得到的参数是一个 number</span><br><span class="hljs-title function_">watch</span>(obj.<span class="hljs-property">count</span>, <span class="hljs-function">(<span class="hljs-params">count</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`count is: <span class="hljs-subst">$&#123;count&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这里需要用一个返回该属性的 getter 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 提供一个 getter 函数</span><br><span class="hljs-title function_">watch</span>(<br>  <span class="hljs-function">() =&gt;</span> obj.<span class="hljs-property">count</span>,<br>  <span class="hljs-function">(<span class="hljs-params">count</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`count is: <span class="hljs-subst">$&#123;count&#125;</span>`</span>);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h3 id="深层监听器"><a href="#深层监听器" class="headerlink" title="深层监听器"></a>深层监听器</h3><p>直接给 watch() 传入一个响应式对象，会隐式地创建一个深层侦听器——该回调函数在所有嵌套的变更时都会被触发：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;);<br><br><span class="hljs-title function_">watch</span>(obj, <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 在嵌套的属性变更时触发</span><br>  <span class="hljs-comment">// 注意：`newValue` 此处和 `oldValue` 是相等的</span><br>  <span class="hljs-comment">// 因为它们是同一个对象！</span><br>&#125;);<br><br>obj.<span class="hljs-property">count</span>++;<br></code></pre></td></tr></table></figure><p>相比之下，一个返回响应式对象的 getter 函数，只有在返回不同的对象时，才会触发回调：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">watch</span>(<br>  <span class="hljs-function">() =&gt;</span> state.<span class="hljs-property">someObject</span>,<br>  <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 仅当 state.someObject 被替换时触发</span><br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>你也可以给上面这个例子显式地加上 deep 选项，强制转成深层侦听器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">watch</span>(<br>  <span class="hljs-function">() =&gt;</span> state.<span class="hljs-property">someObject</span>,<br>  <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 注意：`newValue` 此处和 `oldValue` 是相等的</span><br>    <span class="hljs-comment">// *除非* state.someObject 被整个替换了</span><br>  &#125;,<br>  &#123; <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> &#125;<br>);<br></code></pre></td></tr></table></figure><blockquote><p>深度侦听需要遍历被侦听对象中的所有嵌套的属性，当用于大型数据结构时，开销很大。因此请只在必要时才使用它，并且要留意性能。</p></blockquote><h3 id="即时回调的监听器"><a href="#即时回调的监听器" class="headerlink" title="即时回调的监听器"></a>即时回调的监听器</h3><p>有的时候我们需要先请求一些数据，然后再进行监听<br>但 <code>watch</code> 默认是懒执行的<br>我们可以通过传入 immediate: true 选项来强制侦听器的回调立即执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">watch</span>(<br>  source,<br>  <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 立即执行，且当 `source` 改变时再次执行</span><br>  &#125;,<br>  &#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> &#125;<br>);<br></code></pre></td></tr></table></figure><h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect()"></a>watchEffect()</h3><p>侦听器的回调使用与源完全相同的响应式状态是很常见的。例如下面的代码，在每当 todoId 的引用发生变化时使用侦听器来加载一个远程资源：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> todoId = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">const</span> data = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);<br><br><span class="hljs-title function_">watch</span>(<br>  todoId,<br>  <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>      <span class="hljs-string">`https://jsonplaceholder.typicode.com/todos/<span class="hljs-subst">$&#123;todoId.value&#125;</span>`</span><br>    );<br>    data.<span class="hljs-property">value</span> = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br>  &#125;,<br>  &#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> &#125;<br>);<br></code></pre></td></tr></table></figure><p>我们可以用 watchEffect 函数 来简化上面的代码。watchEffect() 允许我们自动跟踪回调的响应式依赖。上面的侦听器可以重写为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">watchEffect</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>    <span class="hljs-string">`https://jsonplaceholder.typicode.com/todos/<span class="hljs-subst">$&#123;todoId.value&#125;</span>`</span><br>  );<br>  data.<span class="hljs-property">value</span> = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p>这个例子中，回调会立即执行，不需要指定 immediate: true。在执行期间，它会自动追踪 todoId.value 作为依赖（和计算属性类似）。每当 todoId.value 变化时，回调会再次执行。有了 watchEffect()，我们不再需要明确传递 todoId 作为源值。</p><blockquote><p>watchEffect 仅会在其同步执行期间，才追踪依赖。在使用异步回调时，只有在第一个 await 正常工作前访问到的属性才会被追踪。</p></blockquote><h3 id="watch-vs-watchEffect"><a href="#watch-vs-watchEffect" class="headerlink" title="watch vs. watchEffect"></a>watch vs. watchEffect</h3><p><code>watch</code> 和 <code>watchEffect</code> 都能响应式地执行有副作用的回调。它们之间的主要区别是追踪响应式依赖的方式：</p><ul><li><p><code>watch</code> 只追踪明确侦听的数据源。它不会追踪任何在回调中访问到的东西。另外，仅在数据源确实改变时才会触发回调。watch 会避免在发生副作用时追踪依赖，因此，我们能更加精确地控制回调函数的触发时机。</p></li><li><p><code>watchEffect</code> ，则会在副作用发生期间追踪依赖。它会在同步执行过程中，自动追踪所有能访问到的响应式属性。这更方便，而且代码往往更简洁，但有时其响应性依赖关系会不那么明确。</p></li></ul><h3 id="回调的触发时机"><a href="#回调的触发时机" class="headerlink" title="回调的触发时机"></a>回调的触发时机</h3><p>默认情况下，用户创建的侦听器回调，都会在 Vue 组件更新之前被调用。这意味着你在侦听器回调中访问的 DOM 将是被 Vue 更新之前的状态。</p><p>如果想在侦听器回调中能访问被 Vue 更新之后的 DOM，你需要指明 flush: ‘post’ 选项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">watch</span>(source, callback, &#123;<br>  <span class="hljs-attr">flush</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>&#125;);<br><br><span class="hljs-title function_">watchEffect</span>(callback, &#123;<br>  <span class="hljs-attr">flush</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>后置刷新的 watchEffect() 有个更方便的别名 watchPostEffect()：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; watchPostEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-title function_">watchPostEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">/* 在 Vue 更新后执行 */</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="异步监听器"><a href="#异步监听器" class="headerlink" title="异步监听器"></a>异步监听器</h3><p>注意，需要异步创建侦听器的情况很少，请尽可能选择同步创建。如果需要等待一些异步数据，你可以使用条件式的侦听逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 需要异步请求得到的数据</span><br><span class="hljs-keyword">const</span> data = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);<br><br><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (data.<span class="hljs-property">value</span>) &#123;<br>    <span class="hljs-comment">// 数据加载后执行某些操作...</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="模板引用"><a href="#模板引用" class="headerlink" title="模板引用"></a>模板引用</h2><p>虽然 Vue 的声明性渲染模型为你抽象了大部分对 DOM 的直接操作，但在某些情况下，我们仍然需要直接访问底层 DOM 元素。要实现这一点，我们可以使用特殊的 ref attribute：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;input ref=&quot;input&quot; /&gt;<br></code></pre></td></tr></table></figure><h3 id="访问模板引用"><a href="#访问模板引用" class="headerlink" title="访问模板引用"></a>访问模板引用</h3><p>为了通过组合式 API 获得该模板引用，我们需要声明一个同名的 ref：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref, onMounted &#125; from &quot;vue&quot;;<br><br>// 声明一个 ref 来存放该元素的引用<br>// 必须和模板里的 ref 同名<br>const input = ref(null);<br><br>onMounted(() =&gt; &#123;<br>  input.value.focus();<br>&#125;);<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;input ref=&quot;input&quot; /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>如果不使用 <code>&lt;script setup&gt;</code>，需确保从 <code>setup()</code> 返回 ref：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> input = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      input,<br>    &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>注意，你只可以在组件挂载后才能访问模板引用。如果你想在模板中的表达式上访问 input，在初次渲染时会是 null。这是因为在初次渲染前这个元素还不存在呢！</p><h3 id="v-for-中的模板引用"><a href="#v-for-中的模板引用" class="headerlink" title="v-for 中的模板引用"></a>v-for 中的模板引用</h3><p>当在 v-for 中使用模板引用时，对应的 ref 中包含的值是一个数组，它将在元素被挂载后包含对应整个列表的所有元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref, onMounted &#125; from &quot;vue&quot;;<br><br>const list = ref([<br>  /* ... */<br>]);<br><br>const itemRefs = ref([]);<br><br>onMounted(() =&gt; console.log(itemRefs.value));<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for=&quot;item in list&quot; ref=&quot;itemRefs&quot;&gt;<br>      &#123;&#123; item &#125;&#125;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><blockquote><p>注意：ref 数组并不保证与源数组相同的顺序。</p></blockquote><h3 id="函数模板引用"><a href="#函数模板引用" class="headerlink" title="函数模板引用"></a>函数模板引用</h3><p>除了使用字符串值作名字，ref attribute 还可以绑定为一个函数，会在每次组件更新时都被调用。该函数会收到元素引用作为其第一个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;input :ref=&quot;(el) =&gt; &#123; /* 将 el 赋值给一个数据属性或 ref 变量 */ &#125;&quot; /&gt;<br></code></pre></td></tr></table></figure><p>注意我们这里需要使用动态的 :ref 绑定才能够传入一个函数。当绑定的元素被卸载时，函数也会被调用一次，此时的 el 参数会是 null。你当然也可以绑定一个组件方法而不是内联函数。</p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>Vue 路由其实和 React 差不多，也是监听 url 然后通过路由表来切换渲染组件<br><a href="https://router.vuejs.org/zh/guide/">本文参考文档</a></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router@4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello App!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--使用 router-link 组件进行导航 --&gt;</span><br>    <span class="hljs-comment">&lt;!--通过传递 `to` 来指定链接 --&gt;</span><br>    <span class="hljs-comment">&lt;!--`&lt;router-link&gt;` 将呈现一个带有正确 `href` 属性的 `&lt;a&gt;` 标签--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Go to Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>Go to About<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 路由出口 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>router-link</code>类似于<code>&lt;Link&gt;</code>组件<br><code>router-view</code>类似于<code>&lt;Outlet&gt;</code>组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//router.js</span><br><span class="hljs-comment">// 1. 定义路由组件.</span><br><span class="hljs-comment">// 也可以从其他文件导入</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;Home&lt;/div&gt;&quot;</span> &#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">About</span> = &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;About&lt;/div&gt;&quot;</span> &#125;;<br><br><span class="hljs-comment">// 2. 定义一些路由</span><br><span class="hljs-comment">// 每个路由都需要映射到一个组件。</span><br><span class="hljs-comment">// 我们后面再讨论嵌套路由。</span><br><span class="hljs-keyword">const</span> routes = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span> &#125;,<br>];<br><br><span class="hljs-comment">// 3. 创建路由实例并传递 `routes` 配置</span><br><span class="hljs-comment">// 你可以在这里输入更多的配置，但我们在这里</span><br><span class="hljs-comment">// 暂时保持简单</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title class_">VueRouter</span>.<span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-comment">// 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。</span><br>  <span class="hljs-attr">history</span>: <span class="hljs-title class_">VueRouter</span>.<span class="hljs-title function_">createWebHashHistory</span>(),<br>  routes, <span class="hljs-comment">// `routes: routes` 的缩写</span><br>&#125;);<br><br><span class="hljs-comment">// 5. 创建并挂载根实例</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;&#125;);<br><span class="hljs-comment">//确保 _use_ 路由实例使</span><br><span class="hljs-comment">//整个应用支持路由。</span><br>app.<span class="hljs-title function_">use</span>(router);<br><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br><br><span class="hljs-comment">// 现在，应用已经启动了！</span><br></code></pre></td></tr></table></figure><p>通过调用 app.use(router)，我们会触发第一次导航且可以在任意组件中以 this.$router 的形式访问它，并且以 this.$route 的形式访问当前路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Home.vue</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-title function_">username</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 我们很快就会看到 `params` 是什么</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">username</span>;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">goToDashboard</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (isAuthenticated) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/dashboard&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/login&quot;</span>);<br>      &#125;<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>和 react 写法差不多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-comment">// 当 /user/:id/profile 匹配成功</span><br>        <span class="hljs-comment">// UserProfile 将被渲染到 User 的 &lt;router-view&gt; 内部</span><br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;profile&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserProfile</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 当 /user/:id/posts 匹配成功</span><br>        <span class="hljs-comment">// UserPosts 将被渲染到 User 的 &lt;router-view&gt; 内部</span><br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;posts&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserPosts</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><h3 id="导航到不同的位置"><a href="#导航到不同的位置" class="headerlink" title="导航到不同的位置"></a>导航到不同的位置</h3><p>注意：在 Vue 实例中，你可以通过 $router 访问路由实例。因此你可以调用 this.$router.push。</p><p>想要导航到不同的 URL，可以使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，会回到之前的 URL。</p><p>当你点击 <code>&lt;router-link&gt;</code> 时，内部会调用这个方法，所以点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code> 相当于调用 router.push(…) ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 字符串路径</span><br>router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/users/eduardo&quot;</span>);<br><br><span class="hljs-comment">// 带有路径的对象</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/users/eduardo&quot;</span> &#125;);<br><br><span class="hljs-comment">// 命名的路由，并加上参数，让路由建立 url</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;eduardo&quot;</span> &#125; &#125;);<br><br><span class="hljs-comment">// 带查询参数，结果是 /register?plan=private</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/register&quot;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">plan</span>: <span class="hljs-string">&quot;private&quot;</span> &#125; &#125;);<br><br><span class="hljs-comment">// 带 hash，结果是 /about#team</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>, <span class="hljs-attr">hash</span>: <span class="hljs-string">&quot;#team&quot;</span> &#125;);<br></code></pre></td></tr></table></figure><h3 id="替换当前位置"><a href="#替换当前位置" class="headerlink" title="替换当前位置"></a>替换当前位置</h3><p><code>router.replace()</code><br>它的作用类似于 router.push，唯一不同的是，它在导航时不会向 history 添加新记录，正如它的名字所暗示的那样——它取代了当前的条目。</p><h3 id="横跨历史"><a href="#横跨历史" class="headerlink" title="横跨历史"></a>横跨历史</h3><p>该方法采用一个整数作为参数，表示在历史堆栈中前进或后退多少步，类似于 window.history.go(n)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 向前移动一条记录，与 router.forward() 相同</span><br>router.<span class="hljs-title function_">go</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 返回一条记录，与 router.back() 相同</span><br>router.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 前进 3 条记录</span><br>router.<span class="hljs-title function_">go</span>(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">// 如果没有那么多记录，静默失败</span><br>router.<span class="hljs-title function_">go</span>(-<span class="hljs-number">100</span>);<br>router.<span class="hljs-title function_">go</span>(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>除了 path 之外，你还可以为任何路由提供 name。这有以下优点：</p><ul><li>没有硬编码的 URL</li><li>params 的自动编码/解码。</li><li>防止你在 url 中出现打字错误。</li><li>绕过路径排序（如显示一个）</li></ul><p>要链接到一个命名的路由，可以向 router-link 组件的 to 属性传递一个对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;user&#x27;, params: &#123; username: &#x27;erina&#x27; &#125;&#125;&quot;</span>&gt;</span><br>  User<br><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h2><p>有时候想同时 (同级) 展示多个视图，而不是嵌套展示，例如创建一个布局，有 sidebar (侧导航) 和 main (主内容) 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;view left-sidebar&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LeftSidebar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;view main-content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;view right-sidebar&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RightSidebar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件。确保正确使用 components 配置 (带上 s)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHashHistory</span>(),<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>      <span class="hljs-attr">components</span>: &#123;<br>        <span class="hljs-attr">default</span>: <span class="hljs-title class_">Home</span>,<br>        <span class="hljs-comment">// LeftSidebar: LeftSidebar 的缩写</span><br>        <span class="hljs-title class_">LeftSidebar</span>,<br>        <span class="hljs-comment">// 它们与 `&lt;router-view&gt;` 上的 `name` 属性匹配</span><br>        <span class="hljs-title class_">RightSidebar</span>,<br>      &#125;,<br>    &#125;,<br>  ],<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="嵌套命名视图"><a href="#嵌套命名视图" class="headerlink" title="嵌套命名视图"></a>嵌套命名视图</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/settings&#x27;</span>,<br>  <span class="hljs-comment">// 你也可以在顶级路由就配置命名视图</span><br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserSettings</span>,<br>  <span class="hljs-attr">children</span>: [&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;emails&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserEmailsSubscriptions</span><br>  &#125;, &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;profile&#x27;</span>,<br>    <span class="hljs-attr">components</span>: &#123;<br>      <span class="hljs-attr">default</span>: <span class="hljs-title class_">UserProfile</span>,<br>      <span class="hljs-attr">helper</span>: <span class="hljs-title class_">UserProfilePreview</span><br>    &#125;<br>  &#125;]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>重定向也是通过 routes 配置来完成，下面例子是从 /home 重定向到 /：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/&quot;</span> &#125;];<br></code></pre></td></tr></table></figure><p>重定向的目标也可以是一个命名的路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-attr">redirect</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;homepage&quot;</span> &#125; &#125;];<br></code></pre></td></tr></table></figure><p>甚至是一个方法，动态返回重定向目标：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-comment">// /search/screens -&gt; /search?q=screens</span><br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/search/:searchText&quot;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-function">(<span class="hljs-params">to</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 方法接收目标路由作为参数</span><br>      <span class="hljs-comment">// return 重定向的字符串路径/路径对象</span><br>      <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/search&quot;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">q</span>: to.<span class="hljs-property">params</span>.<span class="hljs-property">searchText</span> &#125; &#125;;<br>    &#125;,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/search&quot;</span>,<br>    <span class="hljs-comment">// ...</span><br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p>请注意，导航守卫并没有应用在跳转路由上，而仅仅应用在其目标上。在上面的例子中，在 /home 路由中添加 beforeEnter 守卫不会有任何效果。</p><p>在写 redirect 的时候，可以省略 component 配置，因为它从来没有被直接访问过，所以没有组件要渲染。唯一的例外是嵌套路由：如果一个路由记录有 children 和 redirect 属性，它也应该有 component 属性。</p><h2 id="路由组件传参"><a href="#路由组件传参" class="headerlink" title="路由组件传参"></a>路由组件传参</h2><p>在你的组件中使用 $route 会与路由紧密耦合，这限制了组件的灵活性，因为它只能用于特定的 URL。虽然这不一定是件坏事，但我们可以通过 props 配置来解除这种行为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = &#123;<br>  <span class="hljs-comment">// 请确保添加一个与路由参数完全相同的 prop 名</span><br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;id&quot;</span>],<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;User &#123;&#123; id &#125;&#125;&lt;/div&gt;&quot;</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> routes = [&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span>, <span class="hljs-attr">props</span>: <span class="hljs-literal">true</span> &#125;];<br></code></pre></td></tr></table></figure><p>这样的代码允许你在任何地方使用该组件，使得该组件更容易重用和测试。</p><p>对于有命名视图的路由，你必须为每个命名视图定义 props 配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:id&quot;</span>,<br>    <span class="hljs-attr">components</span>: &#123; <span class="hljs-attr">default</span>: <span class="hljs-title class_">User</span>, <span class="hljs-attr">sidebar</span>: <span class="hljs-title class_">Sidebar</span> &#125;,<br>    <span class="hljs-attr">props</span>: &#123; <span class="hljs-attr">default</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">sidebar</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p>你可以创建一个返回 props 的函数。这允许你将参数转换为其他类型，将静态值与基于路由的值相结合等等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/search&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">SearchUser</span>,<br>    <span class="hljs-attr">props</span>: <span class="hljs-function">(<span class="hljs-params">route</span>) =&gt;</span> (&#123; <span class="hljs-attr">query</span>: route.<span class="hljs-property">query</span>.<span class="hljs-property">q</span> &#125;),<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><h2 id="不同的历史模式"><a href="#不同的历史模式" class="headerlink" title="不同的历史模式"></a>不同的历史模式</h2><p>在创建路由器实例时，history 配置允许我们在不同的历史模式中进行选择。</p><h3 id="Hash-模式"><a href="#Hash-模式" class="headerlink" title="Hash 模式"></a>Hash 模式</h3><p>hash 模式是用 createWebHashHistory() 创建的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHashHistory</span>(),<br>  <span class="hljs-attr">routes</span>: [<br>    <span class="hljs-comment">//...</span><br>  ],<br>&#125;);<br></code></pre></td></tr></table></figure><p>它在内部传递的实际 URL 之前使用了一个哈希字符（#）。由于这部分 URL 从未被发送到服务器，所以它不需要在服务器层面上进行任何特殊处理。不过，它在 SEO 中确实有不好的影响。如果你担心这个问题，可以使用 HTML5 模式。</p><h3 id="HTML5-模式"><a href="#HTML5-模式" class="headerlink" title="HTML5 模式"></a>HTML5 模式</h3><p>用 createWebHistory() 创建 HTML5 模式，推荐使用这个模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(),<br>  <span class="hljs-attr">routes</span>: [<br>    <span class="hljs-comment">//...</span><br>  ],<br>&#125;);<br></code></pre></td></tr></table></figure><p>当使用这种历史模式时，URL 会看起来很 “正常”，例如 <a href="https://example.com/user/id%E3%80%82%E6%BC%82%E4%BA%AE">https://example.com/user/id。漂亮</a>!</p><p>不过，问题来了。由于我们的应用是一个单页的客户端应用，如果没有适当的服务器配置，用户在浏览器中直接访问 <a href="https://example.com/user/id%EF%BC%8C%E5%B0%B1%E4%BC%9A%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA">https://example.com/user/id，就会得到一个</a> 404 错误。这就尴尬了。</p><p>不用担心：要解决这个问题，你需要做的就是在你的服务器上添加一个简单的回退路由。如果 URL 不匹配任何静态资源，它应提供与你的应用程序中的 index.html 相同的页面。漂亮依旧!<br><a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html">服务器配置示例</a></p><p>更多高阶内容，请查阅<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">官方文档</a></p><h1 id="Vue-组件"><a href="#Vue-组件" class="headerlink" title="Vue 组件"></a>Vue 组件</h1><h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><p>与 React 相同，Vue 也是由一个个组件构成一个大的项目，但是与 React 又有些许不同</p><h3 id="组件的注册"><a href="#组件的注册" class="headerlink" title="组件的注册"></a>组件的注册</h3><p>一个 Vue 组件在使用前需要先被“注册”，这样 Vue 才能在渲染模板时找到其对应的实现。组件注册有两种方式：全局注册和局部注册。</p><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><p>我们可以使用 Vue 应用实例的 <code>app.component()</code> 方法，让组件在当前 Vue 应用中全局可用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123;&#125;);<br><br>app.<span class="hljs-title function_">component</span>(<br>  <span class="hljs-comment">// 注册的名字</span><br>  <span class="hljs-string">&quot;MyComponent&quot;</span>,<br>  <span class="hljs-comment">// 组件的实现</span><br>  &#123;<br>    <span class="hljs-comment">/* ... */</span><br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>如果使用单文件组件，你可以注册被导入的 .vue 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyComponent</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><br>app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;MyComponent&quot;</span>, <span class="hljs-title class_">MyComponent</span>);<br></code></pre></td></tr></table></figure><p>全局注册的组件可以在此应用的任意组件的模板中使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- 这在当前应用的任意组件中都可用 --&gt;<br>&lt;ComponentA /&gt;<br>&lt;ComponentB /&gt;<br>&lt;ComponentC /&gt;<br></code></pre></td></tr></table></figure><p>所有的子组件也可以使用全局注册的组件，这意味着这三个组件也都可以在彼此内部使用。</p><h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><p>全局注册虽然很方便，但有以下几个问题：</p><ul><li><p>全局注册，但并没有被使用的组件无法在生产打包时被自动移除 (也叫“tree-shaking”)。如果你全局注册了一个组件，即使它并没有被实际使用，它仍然会出现在打包后的 JS 文件中。</p></li><li><p>全局注册在大型项目中使项目的依赖关系变得不那么明确。在父组件中使用子组件时，不太容易定位子组件的实现。和使用过多的全局变量一样，这可能会影响应用长期的可维护性。</p></li></ul><p>相比之下，局部注册的组件需要在使用它的父组件中显式导入，并且只能在该父组件中使用。它的优点是使组件之间的依赖关系更加明确，并且对 tree-shaking 更加友好。<br>在使用 <code>&lt;script setup&gt;</code> 的单文件组件中，导入的组件可以直接在模板中使用，无需注册：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import ComponentA from &quot;./ComponentA.vue&quot;;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;ComponentA /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>如果没有使用 <code>&lt;script setup&gt;</code>，则需要使用 components 选项来显式注册：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ComponentA</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./ComponentA.js&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-title class_">ComponentA</span>, <span class="hljs-comment">//等价于ComponentA: ComponentA</span><br>  &#125;,<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>请注意：<strong>局部注册的组件在后代组件中并不可用</strong>。在这个例子中，ComponentA 注册后仅在当前组件可用，而在任何的子组件或更深层的子组件中都不可用。</p><h3 id="组件名"><a href="#组件名" class="headerlink" title="组件名"></a>组件名</h3><p>采用首字母大写的驼峰式命名，如 PascalCase，MyComponent 等等</p><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><h3 id="Props-声明"><a href="#Props-声明" class="headerlink" title="Props 声明"></a>Props 声明</h3><p>一个组件需要显式声明它所接受的 props。<br>在使用 <code>&lt;script setup&gt;</code> 的单文件组件中，props 可以使用 defineProps() 宏来声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>const props = defineProps([&quot;foo&quot;]);<br><br>console.log(props.foo);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>在没有使用 <code>&lt;script setup&gt;</code> 的组件中，prop 可以使用 props 选项来声明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;foo&quot;</span>],<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-comment">// setup() 接收 props 作为第一个参数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props.<span class="hljs-property">foo</span>);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>除了使用字符串数组来声明 prop 外，还可以使用对象的形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用 &lt;script setup&gt;</span><br><span class="hljs-title function_">defineProps</span>(&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-title class_">String</span>,<br>  <span class="hljs-attr">likes</span>: <span class="hljs-title class_">Number</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 非 &lt;script setup&gt;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">likes</span>: <span class="hljs-title class_">Number</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>对于以对象形式声明中的每个属性，key 是 prop 的名称，而值则是该 prop 预期类型的构造函数。比如，如果要求一个 prop 的值是 number 类型，则可使用 Number 构造函数作为其声明的值。</p><h3 id="传递-props-的细节"><a href="#传递-props-的细节" class="headerlink" title="传递 props 的细节"></a>传递 props 的细节</h3><h4 id="Prop-名字格式"><a href="#Prop-名字格式" class="headerlink" title="Prop 名字格式"></a>Prop 名字格式</h4><p>如果一个 prop 的名字很长，应使用 camelCase 形式，因为它们是合法的 JavaScript 标识符，可以直接在模板的表达式中使用，也可以避免在作为属性 key 名时必须加上引号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">defineProps</span>(&#123;<br>  <span class="hljs-attr">greetingMessage</span>: <span class="hljs-title class_">String</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;span&gt;&#123;&#123; greetingMessage &#125;&#125;&lt;/span&gt;<br></code></pre></td></tr></table></figure><p>虽然理论上你也可以在向子组件传递 props 时使用 camelCase 形式 (使用 DOM 模板时例外)，但实际上为了和 HTML attribute 对齐，我们通常会将其写为 kebab-case 形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;MyComponent greeting-message=&quot;hello&quot; /&gt;<br></code></pre></td></tr></table></figure><p>对于组件名我们推荐使用 PascalCase，因为这提高了模板的可读性，能帮助我们区分 Vue 组件和原生 HTML 元素。然而对于传递 props 来说，使用 camelCase 并没有太多优势，因此我们推荐更贴近 HTML 的书写风格。</p><h4 id="静态-vs-动态-Prop"><a href="#静态-vs-动态-Prop" class="headerlink" title="静态 vs. 动态 Prop"></a>静态 vs. 动态 Prop</h4><p>至此，你已经见过了很多像这样的静态值形式的 props：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;BlogPost title=&quot;My journey with Vue&quot; /&gt;<br></code></pre></td></tr></table></figure><p>相应地，还有使用 v-bind 或缩写 : 来进行动态绑定的 props：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- 根据一个变量的值动态传入 --&gt;<br>&lt;BlogPost :title=&quot;post.title&quot; /&gt;<br><br>&lt;!-- 根据一个更复杂表达式的值动态传入 --&gt;<br>&lt;BlogPost :title=&quot;post.title + &#x27; by &#x27; + post.author.name&quot; /&gt;<br></code></pre></td></tr></table></figure><h4 id="传递不同值的类型"><a href="#传递不同值的类型" class="headerlink" title="传递不同值的类型"></a>传递不同值的类型</h4><p>在上述的两个例子中，我们只传入了字符串值，但实际上任何类型的值都可以作为 props 的值被传递。</p><h4 id="使用一个对象绑定多个-prop"><a href="#使用一个对象绑定多个-prop" class="headerlink" title="使用一个对象绑定多个 prop"></a>使用一个对象绑定多个 prop</h4><p>如果你想要将一个对象的所有属性都当作 props 传入，你可以使用没有参数的 v-bind，即只使用 v-bind 而非 :prop-name。例如，这里有一个 post 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> post = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;My Journey with Vue&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>以及下面的模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;BlogPost v-bind=&quot;post&quot; /&gt;<br>&lt;!-- 等价于<br>&lt;BlogPost :id=&quot;post.id&quot; :title=&quot;post.title&quot; /&gt;<br>--&gt;<br></code></pre></td></tr></table></figure><h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><p>所有的 props 都遵循着单向绑定原则，props 因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。</p><p>导致你想要更改一个 prop 的需求通常来源于以下两种场景：</p><ol><li><strong>prop 被用于传入初始值；而子组件想在之后将其作为一个局部数据属性</strong> 在这种情况下，最好是新定义一个局部数据属性，从 props 上获取初始值即可：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>([<span class="hljs-string">&quot;initialCounter&quot;</span>]);<br><br><span class="hljs-comment">// 计数器只是将 props.initialCounter 作为初始值</span><br><span class="hljs-comment">// 像下面这样做就使 prop 和后续更新无关了</span><br><span class="hljs-keyword">const</span> counter = <span class="hljs-title function_">ref</span>(props.<span class="hljs-property">initialCounter</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>需要对传入的 prop 值做进一步的转换。</strong>在这种情况中，最好是基于该 prop 值定义一个计算属性：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>([<span class="hljs-string">&quot;size&quot;</span>]);<br><br><span class="hljs-comment">// 该 prop 变更时计算属性也会自动更新</span><br><span class="hljs-keyword">const</span> normalizedSize = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> props.<span class="hljs-property">size</span>.<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">toLowerCase</span>());<br></code></pre></td></tr></table></figure><h3 id="Boolean-类型转换"><a href="#Boolean-类型转换" class="headerlink" title="Boolean 类型转换"></a>Boolean 类型转换</h3><p>为了更贴近原生 boolean attributes 的行为，声明为 Boolean 类型的 props 有特别的类型转换规则。以带有如下声明的 <code>&lt;MyComponent&gt;</code> 组件为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">defineProps</span>(&#123;<br>  <span class="hljs-attr">disabled</span>: <span class="hljs-title class_">Boolean</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>该组件可以被这样使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- 等同于传入 :disabled=&quot;true&quot; --&gt;<br>&lt;MyComponent disabled /&gt;<br><br>&lt;!-- 等同于传入 :disabled=&quot;false&quot; --&gt;<br>&lt;MyComponent /&gt;<br></code></pre></td></tr></table></figure><p>当一个 prop 被声明为允许多种类型时，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">defineProps</span>(&#123;<br>  <span class="hljs-attr">disabled</span>: [<span class="hljs-title class_">Boolean</span>, <span class="hljs-title class_">Number</span>],<br>&#125;);<br></code></pre></td></tr></table></figure><p>无论声明类型的顺序如何，Boolean 类型的特殊转换规则都会被应用。</p><h2 id="监听事件-1"><a href="#监听事件-1" class="headerlink" title="监听事件"></a>监听事件</h2><p>有的时候我们的子组件需要和父组件进行交互,可以通过事件来进行交互</p><h3 id="触发与监听事件"><a href="#触发与监听事件" class="headerlink" title="触发与监听事件"></a>触发与监听事件</h3><p>父组件通过<code>v-on</code>或者<code>@</code>来选择性地监听子组件上抛的事件，就像监听原生 DOM 事件一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;BlogPost<br>  ...<br>  @enlarge-text=&quot;postFontSize += 0.1&quot;<br> /&gt;<br></code></pre></td></tr></table></figure><p>子组件可以通过调用内置的 $emit 方法，通过传入事件名称来抛出一个事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- BlogPost.vue, 省略了 &lt;script&gt; --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;blog-post&quot;&gt;<br>    &lt;h4&gt;&#123;&#123; title &#125;&#125;&lt;/h4&gt;<br>    &lt;button @click=&quot;$emit(&#x27;enlarge-text&#x27;)&quot;&gt;Enlarge text&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="事件参数"><a href="#事件参数" class="headerlink" title="事件参数"></a>事件参数</h3><p>有时候我们会需要在触发事件时附带一个特定的值。举例来说，我们想要 <code>&lt;BlogPost&gt;</code> 组件来管理文本会缩放得多大。在这个场景下，我们可以给 $emit 提供一个额外的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;button @click=&quot;$emit(&#x27;increaseBy&#x27;, 1)&quot;&gt;<br>  Increase by 1<br>&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>然后我们在父组件中监听事件，我们可以先简单写一个内联的箭头函数作为监听器，此函数会接收到事件附带的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;MyButton @increase-by=&quot;(n) =&gt; count += n&quot; /&gt;<br></code></pre></td></tr></table></figure><p>或者，也可以用一个组件方法来作为事件处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;MyButton @increase-by=&quot;increaseCount&quot; /&gt;<br></code></pre></td></tr></table></figure><p>该方法也会接收到事件所传递的参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">increaseCount</span>(<span class="hljs-params">n</span>) &#123;<br>  count.<span class="hljs-property">value</span> += n;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="声明触发的事件"><a href="#声明触发的事件" class="headerlink" title="声明触发的事件"></a>声明触发的事件</h3><p>我们可以通过 defineEmits 宏来声明需要抛出的事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- BlogPost.vue --&gt;<br>&lt;script setup&gt;<br>defineProps([&quot;title&quot;]);<br>defineEmits([&quot;enlarge-text&quot;]);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>这声明了一个组件可能触发的所有事件，还可以对事件的参数进行验证。同时，这还可以让 Vue 避免将它们作为原生事件监听器隐式地应用于子组件的根元素。</p><p>和 defineProps 类似，defineEmits 仅可用于 <code>&lt;script setup&gt;</code> 之中，并且不需要导入，它返回一个等同于 $emit 方法的 emit 函数。它可以被用于在组件的 <code>&lt;script setup&gt;</code> 中抛出事件，因为此处无法直接访问 $emit：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>const emit = defineEmits([&quot;enlarge-text&quot;]);<br><br>emit(&quot;enlarge-text&quot;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>如果你没有在使用 <code>&lt;script setup&gt;</code>，你可以通过 emits 选项定义组件会抛出的事件。你可以从 setup() 函数的第二个参数，即 setup 上下文对象上访问到 emit 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">emits</span>: [<span class="hljs-string">&quot;inFocus&quot;</span>, <span class="hljs-string">&quot;submit&quot;</span>],<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props, ctx</span>) &#123;<br>    ctx.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;submit&quot;</span>);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>与 setup() 上下文对象中的其他属性一样，emit 可以安全地被解构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">emits</span>: [<span class="hljs-string">&quot;inFocus&quot;</span>, <span class="hljs-string">&quot;submit&quot;</span>],<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props, &#123; emit &#125;</span>) &#123;<br>    <span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;submit&quot;</span>);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="事件检验"><a href="#事件检验" class="headerlink" title="事件检验"></a>事件检验</h3><p>和对 props 添加类型校验的方式类似，所有触发的事件也可以使用对象形式来描述。</p><p>要为事件添加校验，那么事件可以被赋值为一个函数，接受的参数就是抛出事件时传入 emit 的内容，返回一个布尔值来表明事件是否合法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>const emit = defineEmits(&#123;<br>  // 没有校验<br>  click: null,<br><br>  // 校验 submit 事件<br>  submit: (&#123; email, password &#125;) =&gt; &#123;<br>    if (email &amp;&amp; password) &#123;<br>      return true;<br>    &#125; else &#123;<br>      console.warn(&quot;Invalid submit event payload!&quot;);<br>      return false;<br>    &#125;<br>  &#125;,<br>&#125;);<br><br>function submitForm(email, password) &#123;<br>  emit(&quot;submit&quot;, &#123; email, password &#125;);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="组件中的-v-model"><a href="#组件中的-v-model" class="headerlink" title="组件中的 v-model"></a>组件中的 v-model</h2><p>v-model 组件也可以使用在组件上</p><p>当使用在一个组件上时，v-model 会被展开为如下的形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;CustomInput<br>  :modelValue=&quot;searchText&quot;<br>  @update:modelValue=&quot;newValue =&gt; searchText = newValue&quot;<br>/&gt;<br></code></pre></td></tr></table></figure><p>要让这个例子实际工作起来，<code>&lt;CustomInput&gt;</code> 组件内部需要做两件事：</p><ol><li>将内部原生 <code>&lt;input&gt;</code> 元素的 value attribute 绑定到 modelValue prop</li><li>当原生的 input 事件触发时，触发一个携带了新值的 update:modelValue 自定义事件</li></ol><p>这里是相应的代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- CustomInput.vue --&gt;<br>&lt;script setup&gt;<br>defineProps([&quot;modelValue&quot;]);<br>defineEmits([&quot;update:modelValue&quot;]);<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;input<br>    :value=&quot;modelValue&quot;<br>    @input=&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;<br>  /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>现在 v-model 可以在这个组件上正常工作了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;CustomInput v-model=&quot;searchText&quot; /&gt;<br></code></pre></td></tr></table></figure><h3 id="v-model-的参数"><a href="#v-model-的参数" class="headerlink" title="v-model 的参数"></a>v-model 的参数</h3><p>默认情况下，v-model 在组件上都是使用 modelValue 作为 prop，并以 update:modelValue 作为对应的事件。我们可以通过给 v-model 指定一个参数来更改这些名字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;MyComponent v-model:title=&quot;bookTitle&quot; /&gt;<br></code></pre></td></tr></table></figure><p>在这个例子中，子组件应声明一个 title prop，并通过触发 update:title 事件更新父组件值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- MyComponent.vue --&gt;<br>&lt;script setup&gt;<br>defineProps([&quot;title&quot;]);<br>defineEmits([&quot;update:title&quot;]);<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;input<br>    type=&quot;text&quot;<br>    :value=&quot;title&quot;<br>    @input=&quot;$emit(&#x27;update:title&#x27;, $event.target.value)&quot;<br>  /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="多个-v-model-绑定"><a href="#多个-v-model-绑定" class="headerlink" title="多个 v-model 绑定"></a>多个 v-model 绑定</h3><p>利用刚才在 v-model 参数小节中学到的指定参数与事件名的技巧，我们可以在单个组件实例上创建多个 v-model 双向绑定。</p><p>组件上的每一个 v-model 都会同步不同的 prop，而无需额外的选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;UserName<br>  v-model:first-name=&quot;first&quot;<br>  v-model:last-name=&quot;last&quot;<br>/&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>defineProps(&#123;<br>  firstName: String,<br>  lastName: String,<br>&#125;);<br><br>defineEmits([&quot;update:firstName&quot;, &quot;update:lastName&quot;]);<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;input<br>    type=&quot;text&quot;<br>    :value=&quot;firstName&quot;<br>    @input=&quot;$emit(&#x27;update:firstName&#x27;, $event.target.value)&quot;<br>  /&gt;<br>  &lt;input<br>    type=&quot;text&quot;<br>    :value=&quot;lastName&quot;<br>    @input=&quot;$emit(&#x27;update:lastName&#x27;, $event.target.value)&quot;<br>  /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="处理-v-model-修饰符"><a href="#处理-v-model-修饰符" class="headerlink" title="处理 v-model 修饰符"></a>处理 v-model 修饰符</h3><p>在学习输入绑定时，我们知道了 v-model 有一些内置的修饰符，例如 .trim，.number 和 .lazy。在某些场景下，你可能想要一个自定义组件的 v-model 支持自定义的修饰符。</p><p>我们来创建一个自定义的修饰符 capitalize，它会自动将 v-model 绑定输入的字符串值第一个字母转为大写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;MyComponent v-model.capitalize=&quot;myText&quot; /&gt;<br></code></pre></td></tr></table></figure><p>组件的 v-model 上所添加的修饰符，可以通过 modelModifiers prop 在组件内访问到。在下面的组件中，我们声明了 modelModifiers 这个 prop，它的默认值是一个空对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>const props = defineProps(&#123;<br>  modelValue: String,<br>  modelModifiers: &#123; default: () =&gt; (&#123;&#125;) &#125;,<br>&#125;);<br><br>defineEmits([&quot;update:modelValue&quot;]);<br><br>console.log(props.modelModifiers); // &#123; capitalize: true &#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;input<br>    type=&quot;text&quot;<br>    :value=&quot;modelValue&quot;<br>    @input=&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;<br>  /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>注意这里组件的 <code>modelModifiers</code> prop 包含了 <code>capitalize</code> 且其值为 true，因为它在模板中的 v-model 绑定 <code>v-model.capitalize=&quot;myText&quot;</code> 上被使用了。</p><p>有了这个 prop，我们就可以检查 <code>modelModifiers</code> 对象的键，并编写一个处理函数来改变抛出的值。在下面的代码里，我们就是在每次 <code>&lt;input /&gt;</code> 元素触发 input 事件时将值的首字母大写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>const props = defineProps(&#123;<br>  modelValue: String,<br>  modelModifiers: &#123; default: () =&gt; (&#123;&#125;) &#125;,<br>&#125;);<br><br>const emit = defineEmits([&quot;update:modelValue&quot;]);<br><br>function emitValue(e) &#123;<br>  let value = e.target.value;<br>  if (props.modelModifiers.capitalize) &#123;<br>    value = value.charAt(0).toUpperCase() + value.slice(1);<br>  &#125;<br>  emit(&quot;update:modelValue&quot;, value);<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;input type=&quot;text&quot; :value=&quot;modelValue&quot; @input=&quot;emitValue&quot; /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>有些时候需要在两个组件中来回切换<br>这个时候就需要 vue 的<code>&lt;component&gt;</code>和<code>is</code>属性来实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- currentTab 改变时组件也改变 --&gt;<br>&lt;component :is=&quot;tabComponent&quot;&gt;&lt;/component&gt;<br></code></pre></td></tr></table></figure><p>在上面的例子中，被传给 :is 的值可以是以下几种：</p><ul><li>被注册的组件名</li><li>导入的组件对象<br>你也可以使用 <code>is</code> <code>attribute</code> 来创建一般的 HTML 元素。</li></ul><p>当使用 <code>&lt;component :is=&quot;...&quot;&gt;</code> 来在多个组件间作切换时，被切换掉的组件会被卸载。我们可以通过 <code>&lt;KeepAlive&gt;</code> 组件强制被切换掉的组件仍然保持“存活”的状态。</p><h2 id="透传-Attributes"><a href="#透传-Attributes" class="headerlink" title="透传 Attributes"></a>透传 Attributes</h2><h3 id="Attributes-继承"><a href="#Attributes-继承" class="headerlink" title="Attributes 继承"></a>Attributes 继承</h3><p>“透传 attribute”指的是传递给一个组件，却没有被该组件声明为 props 或 emits 的 attribute 或者 v-on 事件监听器。最常见的例子就是 class、style 和 id。</p><p>当一个组件以单个元素为根作渲染时，透传的 attribute 会自动被添加到根元素上。举例来说，假如我们有一个 <code>&lt;MyButton&gt;</code> 组件，它的模板长这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- &lt;MyButton&gt; 的模板 --&gt;<br>&lt;button&gt;click me&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>一个父组件使用了这个组件，并且传入了 class：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;MyButton class=&quot;large&quot; /&gt;<br></code></pre></td></tr></table></figure><p>最后渲染出的 DOM 结果是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;large&quot;</span>&gt;</span>click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里，<code>&lt;MyButton&gt;</code> 并没有将 class 声明为一个它所接受的 prop，所以 class 被视作透传 attribute，自动透传到了 <code>&lt;MyButton&gt;</code> 的根元素上。</p><h4 id="对-class-和-style-的合并"><a href="#对-class-和-style-的合并" class="headerlink" title="对 class 和 style 的合并"></a>对 class 和 style 的合并</h4><p>如果一个子组件的根元素已经有了 class 或 style attribute，它会和从父组件上继承的值合并。如果我们将之前的 <code>&lt;MyButton&gt;</code> 组件的模板改成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- &lt;MyButton&gt; 的模板 --&gt;<br>&lt;button class=&quot;btn&quot;&gt;click me&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>则最后渲染出的 DOM 结果会变成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn large&quot;</span>&gt;</span>click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="v-on-监听器继承"><a href="#v-on-监听器继承" class="headerlink" title="v-on 监听器继承"></a>v-on 监听器继承</h4><p>同样的规则也适用于 v-on 事件监听器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;MyButton @click=&quot;onClick&quot; /&gt;<br></code></pre></td></tr></table></figure><p>click 监听器会被添加到 <code>&lt;MyButton&gt;</code> 的根元素，即那个原生的 <code>&lt;button&gt;</code> 元素之上。当原生的 <code>&lt;button&gt;</code> 被点击，会触发父组件的 onClick 方法。同样的，如果原生 button 元素自身也通过 v-on 绑定了一个事件监听器，则这个监听器和从父组件继承的监听器都会被触发。</p><h4 id="深层组件继承"><a href="#深层组件继承" class="headerlink" title="深层组件继承"></a>深层组件继承</h4><p>有些情况下一个组件会在根节点上渲染另一个组件。例如，我们重构一下 <code>&lt;MyButton&gt;</code>，让它在根节点上渲染 <code>&lt;BaseButton&gt;</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- &lt;MyButton/&gt; 的模板，只是渲染另一个组件 --&gt;<br>&lt;BaseButton /&gt;<br></code></pre></td></tr></table></figure><p>此时 <code>&lt;MyButton&gt;</code> 接收的透传 <code>attribute</code> 会直接继续传给 <code>&lt;BaseButton&gt;</code>。</p><p>请注意：</p><ul><li><p>透传的 attribute 不会包含 <code>&lt;MyButton&gt;</code> 上声明过的 props 或是针对 emits 声明事件的 v-on 侦听函数，换句话说，声明过的 props 和侦听函数被 <code>&lt;MyButton&gt;</code>“消费”了。</p></li><li><p>透传的 attribute 若符合声明，也可以作为 props 传入 <BaseButton>。</p></li></ul><h3 id="禁用-Attributes-继承"><a href="#禁用-Attributes-继承" class="headerlink" title="禁用 Attributes 继承"></a>禁用 Attributes 继承</h3><p>如果你不想要一个组件自动地继承 attribute，你可以在组件选项中设置 <code>inheritAttrs: false</code><br>如果你使用了 <code>&lt;script setup&gt;</code>，你需要一个额外的 <code>&lt;script&gt;</code> 块来书写这个选项声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>// 使用普通的 &lt;script&gt; 来声明选项<br>export default &#123;<br>  inheritAttrs: false,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;script setup&gt;<br>// ...setup 部分逻辑<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>从 3.3 开始你也可以直接在 <code>&lt;script setup&gt;</code> 中使用 defineOptions：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>defineOptions(&#123;<br>  inheritAttrs: false,<br>&#125;);<br>// ...setup 逻辑<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>最常见的需要禁用 attribute 继承的场景就是 attribute 需要应用在根节点以外的其他元素上。通过设置 inheritAttrs 选项为 false，你可以完全控制透传进来的 attribute 被如何使用。</p><p>这些透传进来的 attribute 可以在模板的表达式中直接用 $attrs 访问到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;span&gt;Fallthrough attribute: &#123;&#123; $attrs &#125;&#125;&lt;/span&gt;<br></code></pre></td></tr></table></figure><p>这个 $attrs 对象包含了除组件所声明的 props 和 emits 之外的所有其他 attribute，例如 class，style，v-on 监听器等等。</p><p>有几点需要注意：</p><ul><li><p>和 props 有所不同，透传 attributes 在 JavaScript 中保留了它们原始的大小写，所以像 foo-bar 这样的一个 attribute 需要通过 <code>$attrs[&#39;foo-bar&#39;]</code> 来访问。</p></li><li><p>像 @click 这样的一个 v-on 事件监听器将在此对象下被暴露为一个函数 $attrs.onClick。</p></li></ul><p>现在我们要再次使用一下之前小节中的 <code>&lt;MyButton&gt;</code> 组件例子。有时候我们可能为了样式，需要在 <code>&lt;button&gt;</code> 元素外包装一层 <code>&lt;div&gt;</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;btn-wrapper&quot;&gt;<br>  &lt;button class=&quot;btn&quot;&gt;click me&lt;/button&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>我们想要所有像 class 和 v-on 监听器这样的透传 attribute 都应用在内部的 <code>&lt;button&gt;</code> 上而不是外层的 <code>&lt;div&gt;</code> 上。我们可以通过设定 inheritAttrs: false 和使用 <code>v-bind=&quot;$attrs&quot;</code> 来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div class=&quot;btn-wrapper&quot;&gt;<br>  &lt;button class=&quot;btn&quot; v-bind=&quot;$attrs&quot;&gt;click me&lt;/button&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><p>小提示：没有参数的 v-bind 会将一个对象的所有属性都作为 attribute 应用到目标元素上。</p></blockquote><h3 id="多根节点的-Attributes-继承"><a href="#多根节点的-Attributes-继承" class="headerlink" title="多根节点的 Attributes 继承"></a>多根节点的 Attributes 继承</h3><p>和单根节点组件有所不同，有着多个根节点的组件没有自动 attribute 透传行为。如果 $attrs 没有被显式绑定，将会抛出一个运行时警告。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;CustomLayout id=&quot;custom-layout&quot; @click=&quot;changeValue&quot; /&gt;<br></code></pre></td></tr></table></figure><p>如果 <code>&lt;CustomLayout&gt;</code> 有下面这样的多根节点模板，由于 Vue 不知道要将 attribute 透传到哪里，所以会抛出一个警告。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;header&gt;...&lt;/header&gt;<br>&lt;main&gt;...&lt;/main&gt;<br>&lt;footer&gt;...&lt;/footer&gt;<br></code></pre></td></tr></table></figure><p>如果 $attrs 被显式绑定，则不会有警告：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;header&gt;...&lt;/header&gt;<br>&lt;main v-bind=&quot;$attrs&quot;&gt;...&lt;/main&gt;<br>&lt;footer&gt;...&lt;/footer&gt;<br></code></pre></td></tr></table></figure><h3 id="在-JavaScript-中访问透传-Attributes"><a href="#在-JavaScript-中访问透传-Attributes" class="headerlink" title="在 JavaScript 中访问透传 Attributes"></a>在 JavaScript 中访问透传 Attributes</h3><p>如果需要，你可以在 <code>&lt;script setup&gt;</code> 中使用 useAttrs() API 来访问一个组件的所有透传 attribute：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; useAttrs &#125; from &quot;vue&quot;;<br><br>const attrs = useAttrs();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>如果没有使用 <code>&lt;script setup&gt;</code>，attrs 会作为 setup() 上下文对象的一个属性暴露：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props, ctx</span>) &#123;<br>    <span class="hljs-comment">// 透传 attribute 被暴露为 ctx.attrs</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ctx.<span class="hljs-property">attrs</span>);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>需要注意的是，虽然这里的 attrs 对象总是反映为最新的透传 attribute，但它并不是响应式的 (考虑到性能因素)。你不能通过侦听器去监听它的变化。如果你需要响应性，可以使用 prop。或者你也可以使用 onUpdated() 使得在每次更新时结合最新的 attrs 执行副作用。</p><h2 id="插槽内容与出口"><a href="#插槽内容与出口" class="headerlink" title="插槽内容与出口"></a>插槽内容与出口</h2><p>在之前的章节中，我们已经了解到组件能够接收任意类型的 JavaScript 值作为 props，但组件要如何接收模板内容呢？在某些场景中，我们可能想要为子组件传递一些模板片段，让子组件在它们的组件中渲染这些片段。</p><p>举例来说，这里有一个 <code>&lt;FancyButton&gt;</code> 组件，可以像这样使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;FancyButton&gt;<br>  Click me! &lt;!-- 插槽内容 --&gt;<br>&lt;/FancyButton&gt;<br></code></pre></td></tr></table></figure><p>而 <code>&lt;FancyButton&gt;</code> 的模板是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;button class=&quot;fancy-btn&quot;&gt;<br>  &lt;slot&gt;&lt;/slot&gt; &lt;!-- 插槽出口 --&gt;<br>&lt;/button&gt;<br></code></pre></td></tr></table></figure><p><code>&lt;slot&gt;</code> 元素是一个插槽出口 (slot outlet)，标示了父元素提供的插槽内容 (slot content) 将在哪里被渲染。</p><p>最终渲染出的 DOM 是这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fancy-btn&quot;</span>&gt;</span>Click me!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>插槽内容可以是任意合法的模板内容，不局限于文本。例如我们可以传入多个元素，甚至是组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;FancyButton&gt;<br>  &lt;span style=&quot;color:red&quot;&gt;Click me!&lt;/span&gt;<br>  &lt;AwesomeIcon name=&quot;plus&quot; /&gt;<br>&lt;/FancyButton&gt;<br></code></pre></td></tr></table></figure><h3 id="渲染作用域"><a href="#渲染作用域" class="headerlink" title="渲染作用域"></a>渲染作用域</h3><p>插槽内容可以访问到父组件的数据作用域，因为插槽内容本身是在父组件模板中定义的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;<br>&lt;FancyButton&gt;&#123;&#123; message &#125;&#125;&lt;/FancyButton&gt;<br></code></pre></td></tr></table></figure><p>这里的两个  插值表达式渲染的内容都是一样的。</p><blockquote><p>父组件模板中的表达式只能访问父组件的作用域；子组件模板中的表达式只能访问子组件的作用域。</p></blockquote><h3 id="默认内容"><a href="#默认内容" class="headerlink" title="默认内容"></a>默认内容</h3><p>在外部没有提供任何内容的情况下，可以为插槽指定默认内容。比如有这样一个 <code>&lt;SubmitButton&gt;</code> 组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;button type=&quot;submit&quot;&gt;<br>  &lt;slot&gt;&lt;/slot&gt;<br>&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>如果我们想在父组件没有提供任何插槽内容时在 <code>&lt;button&gt;</code> 内渲染“Submit”，只需要将“Submit”写在 <code>&lt;slot&gt;</code> 标签之间来作为默认内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;button type=&quot;submit&quot;&gt;<br>  &lt;slot&gt;<br>    Submit &lt;!-- 默认内容 --&gt;<br>  &lt;/slot&gt;<br>&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>现在，当我们在父组件中使用 <code>&lt;SubmitButton&gt;</code> 且没有提供任何插槽内容时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;SubmitButton /&gt;<br></code></pre></td></tr></table></figure><p>“Submit”将会被作为默认内容渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但如果我们提供了插槽内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Save<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>有时在一个组件中包含多个插槽出口是很有用的。举例来说，在一个 <code>&lt;BaseLayout&gt;</code> 组件中，有如下模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div class=&quot;container&quot;&gt;<br>  &lt;header&gt;<br>    &lt;!-- 标题内容放这里 --&gt;<br>  &lt;/header&gt;<br>  &lt;main&gt;<br>    &lt;!-- 主要内容放这里 --&gt;<br>  &lt;/main&gt;<br>  &lt;footer&gt;<br>    &lt;!-- 底部内容放这里 --&gt;<br>  &lt;/footer&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>对于这种场景，<code>&lt;slot&gt;</code> 元素可以有一个特殊的 attribute name，用来给各个插槽分配唯一的 ID，以确定每一处要渲染的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div class=&quot;container&quot;&gt;<br>  &lt;header&gt;<br>    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;<br>  &lt;/header&gt;<br>  &lt;main&gt;<br>    &lt;slot&gt;&lt;/slot&gt;<br>  &lt;/main&gt;<br>  &lt;footer&gt;<br>    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;<br>  &lt;/footer&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>这类带 name 的插槽被称为具名插槽 (named slots)。没有提供 name 的 <code>&lt;slot&gt;</code> 出口会隐式地命名为“default”。</p><p>在父组件中使用 <code>&lt;BaseLayout&gt;</code> 时，我们需要一种方式将多个插槽内容传入到各自目标插槽的出口。此时就需要用到具名插槽了：</p><p>要为具名插槽传入内容，我们需要使用一个含 v-slot 指令的 <code>&lt;template&gt;</code> 元素，并将目标插槽的名字传给该指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;BaseLayout&gt;<br>  &lt;template v-slot:header&gt;<br>    &lt;!-- header 插槽的内容放这里 --&gt;<br>  &lt;/template&gt;<br>&lt;/BaseLayout&gt;<br></code></pre></td></tr></table></figure><p>v-slot 有对应的简写 #，因此 <code>&lt;template v-slot:header&gt;</code> 可以简写为 <code>&lt;template #header&gt;</code>。其意思就是“将这部分模板片段传入子组件的 header 插槽中”。</p><p>下面我们给出完整的、向 <code>&lt;BaseLayout&gt;</code> 传递插槽内容的代码，指令均使用的是缩写形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;BaseLayout&gt;<br>  &lt;template #header&gt;<br>    &lt;h1&gt;Here might be a page title&lt;/h1&gt;<br>  &lt;/template&gt;<br><br>  &lt;template #default&gt;<br>    &lt;p&gt;A paragraph for the main content.&lt;/p&gt;<br>    &lt;p&gt;And another one.&lt;/p&gt;<br>  &lt;/template&gt;<br><br>  &lt;template #footer&gt;<br>    &lt;p&gt;Here&#x27;s some contact info&lt;/p&gt;<br>  &lt;/template&gt;<br>&lt;/BaseLayout&gt;<br></code></pre></td></tr></table></figure><p>当一个组件同时接收默认插槽和具名插槽时，所有位于顶级的非 <code>&lt;template&gt;</code> 节点都被隐式地视为默认插槽的内容。所以上面也可以写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;BaseLayout&gt;<br>  &lt;template #header&gt;<br>    &lt;h1&gt;Here might be a page title&lt;/h1&gt;<br>  &lt;/template&gt;<br><br>  &lt;!-- 隐式的默认插槽 --&gt;<br>  &lt;p&gt;A paragraph for the main content.&lt;/p&gt;<br>  &lt;p&gt;And another one.&lt;/p&gt;<br><br>  &lt;template #footer&gt;<br>    &lt;p&gt;Here&#x27;s some contact info&lt;/p&gt;<br>  &lt;/template&gt;<br>&lt;/BaseLayout&gt;<br></code></pre></td></tr></table></figure><p>现在 <code>&lt;template&gt;</code> 元素中的所有内容都将被传递到相应的插槽。最终渲染出的 HTML 如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="动态插槽名"><a href="#动态插槽名" class="headerlink" title="动态插槽名"></a>动态插槽名</h3><p>动态指令参数在 v-slot 上也是有效的，即可以定义下面这样的动态插槽名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;base-layout&gt;<br>  &lt;template v-slot:[dynamicSlotName]&gt;<br>    ...<br>  &lt;/template&gt;<br><br>  &lt;!-- 缩写为 --&gt;<br>  &lt;template #[dynamicSlotName]&gt;<br>    ...<br>  &lt;/template&gt;<br>&lt;/base-layout&gt;<br></code></pre></td></tr></table></figure><p>注意这里的表达式和动态指令参数受相同的语法限制。</p><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>插槽的内容无法访问到子组件的状态<br>但是我们可以向一个插槽的出口上传递 <code>attributes</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- &lt;MyComponent&gt; 的模板 --&gt;<br>&lt;div&gt;<br>  &lt;slot :text=&quot;greetingMessage&quot; :count=&quot;1&quot;&gt;&lt;/slot&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>当需要接收插槽 props 时，默认插槽和具名插槽的使用方式有一些小区别。下面我们将先展示默认插槽如何接受 props，通过子组件标签上的 v-slot 指令，直接接收到了一个插槽 props 对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;MyComponent v-slot=&quot;slotProps&quot;&gt;<br>  &#123;&#123; slotProps.text &#125;&#125; &#123;&#123; slotProps.count &#125;&#125;<br>&lt;/MyComponent&gt;<br></code></pre></td></tr></table></figure><h2 id="Prop-逐级透传问题"><a href="#Prop-逐级透传问题" class="headerlink" title="Prop 逐级透传问题"></a>Prop 逐级透传问题</h2><p>通常情况下，当我们需要从父组件向子组件传递数据时，会使用 props。想象一下这样的结构：有一些多层级嵌套的组件，形成了一颗巨大的组件树，而某个深层的子组件需要一个较远的祖先组件中的部分数据。在这种情况下，如果仅使用 props 则必须将其沿着组件链逐级传递下去，这会非常麻烦：</p><p><img src="/provide1.png" alt="逐级传递"></p><p>注意，虽然这里的 <code>&lt;Footer&gt;</code> 组件可能根本不关心这些 props，但为了使 <code>&lt;DeepChild&gt;</code> 能访问到它们，仍然需要定义并向下传递。如果组件链路非常长，可能会影响到更多这条路上的组件。这一问题被称为“prop 逐级透传”，显然是我们希望尽量避免的情况。</p><p><code>provide</code> 和 <code>inject</code> 可以帮助我们解决这一问题。一个父组件相对于其所有的后代组件，会作为<strong>依赖提供者</strong>。任何后代的组件树，无论层级有多深，都可以注入由父组件提供给整条链路的依赖。<br><img src="/provide2.png" alt="依赖注入"></p><h3 id="1-Provide-提供"><a href="#1-Provide-提供" class="headerlink" title="1.Provide(提供)"></a>1.Provide(提供)</h3><p>要为组件后代提供数据，需要使用到 <code>provide()</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; provide &#125; from &quot;vue&quot;;<br><br>provide(/* 注入名 */ &quot;message&quot;, /* 值 */ &quot;hello!&quot;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>如果不使用 <code>&lt;script setup&gt;</code>，请确保 provide() 是在 setup() 同步调用的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; provide &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">provide</span>(<span class="hljs-comment">/* 注入名 */</span> <span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-comment">/* 值 */</span> <span class="hljs-string">&quot;hello!&quot;</span>);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>provide() 函数接收两个参数。第一个参数被称为注入名，可以是一个字符串或是一个 Symbol。后代组件会用注入名来查找期望注入的值。一个组件可以多次调用 provide()，使用不同的注入名，注入不同的依赖值。</p><p>第二个参数是提供的值，值可以是任意类型，包括响应式的状态，比如一个 ref：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; ref, provide &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_">provide</span>(<span class="hljs-string">&quot;key&quot;</span>, count);<br></code></pre></td></tr></table></figure><p>提供的响应式状态使后代组件可以由此和提供者建立响应式的联系。</p><h4 id="应用层-Provide"><a href="#应用层-Provide" class="headerlink" title="应用层 Provide"></a>应用层 Provide</h4><p>除了在一个组件中提供依赖，我们还可以在整个应用层面提供依赖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123;&#125;);<br><br>app.<span class="hljs-title function_">provide</span>(<span class="hljs-comment">/* 注入名 */</span> <span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-comment">/* 值 */</span> <span class="hljs-string">&quot;hello!&quot;</span>);<br></code></pre></td></tr></table></figure><p>在应用级别提供的数据在该应用内的所有组件中都可以注入。这在你编写插件时会特别有用，因为插件一般都不会使用组件形式来提供值。</p><h3 id="2-Inject-注入"><a href="#2-Inject-注入" class="headerlink" title="2.Inject(注入)"></a>2.Inject(注入)</h3><p>要注入上层组件提供的数据，需使用 inject() 函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; inject &#125; from &quot;vue&quot;;<br><br>const message = inject(&quot;message&quot;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>如果提供的值是一个 ref，注入进来的会是该 ref 对象，而<strong>不会</strong>自动解包为其内部的值。这使得注入方组件能够通过 ref 对象保持了和供给方的响应性链接。<br>同样的，如果没有使用 <code>&lt;script setup&gt;</code>，inject() 需要在 setup() 内同步调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; inject &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> message = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&quot;message&quot;</span>);<br>    <span class="hljs-keyword">return</span> &#123; message &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="和响应式数据配合使用"><a href="#和响应式数据配合使用" class="headerlink" title="和响应式数据配合使用"></a>和响应式数据配合使用</h3><p>当提供 / 注入响应式的数据时，<strong>建议尽可能将任何对响应式状态的变更都保持在供给方组件中</strong>。这样可以确保所提供状态的声明和变更操作都内聚在同一个组件内，使其更容易维护。</p><p>有的时候，我们可能需要在注入方组件中更改数据。在这种情况下，我们推荐在供给方组件内声明并提供一个更改数据的方法函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 在供给方组件内 --&gt;<br>&lt;script setup&gt;<br>import &#123; provide, ref &#125; from &quot;vue&quot;;<br><br>const location = ref(&quot;North Pole&quot;);<br><br>function updateLocation() &#123;<br>  location.value = &quot;South Pole&quot;;<br>&#125;<br><br>provide(&quot;location&quot;, &#123;<br>  location,<br>  updateLocation,<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 在注入方组件 --&gt;<br>&lt;script setup&gt;<br>import &#123; inject &#125; from &quot;vue&quot;;<br><br>const &#123; location, updateLocation &#125; = inject(&quot;location&quot;);<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;button @click=&quot;updateLocation&quot;&gt;&#123;&#123; location &#125;&#125;&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>最后，如果你想确保提供的数据不能被注入方的组件更改，你可以使用 readonly() 来包装提供的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref, provide, readonly &#125; from &quot;vue&quot;;<br><br>const count = ref(0);<br>provide(&quot;read-only-count&quot;, readonly(count));<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="使用-Symbol-作注入名"><a href="#使用-Symbol-作注入名" class="headerlink" title="使用 Symbol 作注入名"></a>使用 Symbol 作注入名</h3><p>至此，我们已经了解了如何使用字符串作为注入名。但如果你正在构建大型的应用，包含非常多的依赖提供，或者你正在编写提供给其他开发者使用的组件库，建议最好使用 Symbol 来作为注入名以避免潜在的冲突。</p><p>我们通常推荐在一个单独的文件中导出这些注入名 Symbol：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// keys.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> myInjectionKey = <span class="hljs-title class_">Symbol</span>();<br><br><span class="hljs-comment">// 在供给方组件中</span><br><span class="hljs-keyword">import</span> &#123; provide &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; myInjectionKey &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./keys.js&quot;</span>;<br><br><span class="hljs-title function_">provide</span>(myInjectionKey, &#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  要提供的数据</span><br><span class="hljs-comment">*/</span><br>&#125;);<br><br><span class="hljs-comment">// 注入方组件</span><br><span class="hljs-keyword">import</span> &#123; inject &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; myInjectionKey &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./keys.js&quot;</span>;<br><br><span class="hljs-keyword">const</span> injected = <span class="hljs-title function_">inject</span>(myInjectionKey);<br></code></pre></td></tr></table></figure><h2 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h2><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><p>在大型项目中，我们可能需要拆分应用为更小的块，并仅在需要时再从服务器加载相关组件。Vue 提供了 defineAsyncComponent 方法来实现此功能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; defineAsyncComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">AsyncComp</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// ...从服务器获取组件</span><br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-comment">/* 获取到的组件 */</span>);<br>  &#125;);<br>&#125;);<br><span class="hljs-comment">// ... 像使用其他一般组件一样使用 `AsyncComp`</span><br></code></pre></td></tr></table></figure><p>如你所见，defineAsyncComponent 方法接收一个返回 Promise 的加载函数。这个 Promise 的 resolve 回调方法应该在从服务器获得组件定义时调用。你也可以调用 reject(reason) 表明加载失败。</p><p>ES 模块动态导入也会返回一个 Promise，所以多数情况下我们会将它和 defineAsyncComponent 搭配使用。类似 Vite 和 Webpack 这样的构建工具也支持此语法 (并且会将它们作为打包时的代码分割点)，因此我们也可以用它来导入 Vue 单文件组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; defineAsyncComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">AsyncComp</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">() =&gt;</span><br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./components/MyComponent.vue&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><p>最后得到的 AsyncComp 是一个外层包装过的组件，仅在页面需要它渲染时才会调用加载内部实际组件的函数。它会将接收到的 props 和插槽传给内部组件，所以你可以使用这个异步的包装组件无缝地替换原始组件，同时实现延迟加载。</p><p>与普通组件一样，异步组件可以使用 app.component() 全局注册：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">component</span>(<br>  <span class="hljs-string">&quot;MyComponent&quot;</span>,<br>  <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./components/MyComponent.vue&quot;</span>))<br>);<br></code></pre></td></tr></table></figure><p>也可以直接在父组件中直接定义它们：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; defineAsyncComponent &#125; from &quot;vue&quot;;<br><br>const AdminPage = defineAsyncComponent(() =&gt;<br>  import(&quot;./components/AdminPageComponent.vue&quot;)<br>);<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;AdminPage /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="加载与错误状态"><a href="#加载与错误状态" class="headerlink" title="加载与错误状态"></a>加载与错误状态</h3><p>异步操作不可避免地会涉及到加载和错误状态，因此 defineAsyncComponent() 也支持在高级选项中处理这些状态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">AsyncComp</span> = <span class="hljs-title function_">defineAsyncComponent</span>(&#123;<br>  <span class="hljs-comment">// 加载函数</span><br>  <span class="hljs-attr">loader</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./Foo.vue&quot;</span>),<br><br>  <span class="hljs-comment">// 加载异步组件时使用的组件</span><br>  <span class="hljs-attr">loadingComponent</span>: <span class="hljs-title class_">LoadingComponent</span>,<br>  <span class="hljs-comment">// 展示加载组件前的延迟时间，默认为 200ms</span><br>  <span class="hljs-attr">delay</span>: <span class="hljs-number">200</span>,<br><br>  <span class="hljs-comment">// 加载失败后展示的组件</span><br>  <span class="hljs-attr">errorComponent</span>: <span class="hljs-title class_">ErrorComponent</span>,<br>  <span class="hljs-comment">// 如果提供了一个 timeout 时间限制，并超时了</span><br>  <span class="hljs-comment">// 也会显示这里配置的报错组件，默认值是：Infinity</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">3000</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果提供了一个加载组件，它将在内部组件加载时先行显示。在加载组件显示之前有一个默认的 200ms 延迟——这是因为在网络状况较好时，加载完成得很快，加载组件和最终组件之间的替换太快可能产生闪烁，反而影响用户感受。</p><p>如果提供了一个报错组件，则它会在加载器函数返回的 Promise 抛错时被渲染。你还可以指定一个超时时间，在请求耗时超过指定时间时也会渲染报错组件。</p><h1 id="对-VUE-里的响应式的底层实现理解"><a href="#对-VUE-里的响应式的底层实现理解" class="headerlink" title="对 VUE 里的响应式的底层实现理解"></a>对 VUE 里的响应式的底层<del>实现</del>理解</h1><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><p>reactive 就是在 VUE 中对对象进行响应式处理，能在 VUE 中对象属性改变的同时进行响应式变化<br>下面就来慢慢利用原生 JS 实现如何实现 reactive</p><h3 id="三大概念"><a href="#三大概念" class="headerlink" title="三大概念"></a>三大概念</h3><p><strong>dep 变量</strong>，<strong>track()函数</strong>，<strong>trigger()函数</strong>，这三个是实现响应式变化的核心，无论是一个值一个对象还是多个对象都围绕着这三个进行实现</p><ol><li>dep：<br>dep 是一个 Set 类型的变量，是用来存放 effect 函数(副作用),也就是对一些值改变的函数。</li><li>track：<br>track 函数是对你想要进行的 effect 函数一个收集，将他们全部收集到你的 dep 变量中以便后面的执行。</li><li>trigger：<br>用来执行所有在 dep 变量内部的 effect 函数。</li></ol><h3 id="单个值，单个对象，多个对象"><a href="#单个值，单个对象，多个对象" class="headerlink" title="单个值，单个对象，多个对象"></a>单个值，单个对象，多个对象</h3><p>其实他们本质都是相同的，无非是一些数据结构上的区别。</p><p>我们先从单个值看起</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//单个值</span><br><span class="hljs-keyword">const</span> dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(); <span class="hljs-comment">// dep变量</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">track</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  dep.<span class="hljs-title function_">add</span>(effect);<br>&#125;; <span class="hljs-comment">// 存放effect</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">trigger</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  dep.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">effect</span>) =&gt;</span> <span class="hljs-title function_">effect</span>());<br>&#125;; <span class="hljs-comment">// 执行effect</span><br><br><span class="hljs-keyword">let</span> price = <span class="hljs-number">10</span>,<br>  quantity = <span class="hljs-number">2</span>,<br>  total = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">effect</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  total = price * quantity;<br>&#125;;<br><span class="hljs-title function_">track</span>();<br><span class="hljs-title function_">trigger</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`total: <span class="hljs-subst">$&#123;total&#125;</span>`</span>);<br><br>price = <span class="hljs-number">20</span>;<br><span class="hljs-title function_">trigger</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`total: <span class="hljs-subst">$&#123;total&#125;</span>`</span>);<br></code></pre></td></tr></table></figure><p>上面这段代码就是三大概念的最简单的实现，可能你现在还看不出来响应在哪里，因为都是手动执行的 track 和 trigger。</p><p>然后是单个对象的响应式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> depsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">track</span> = (<span class="hljs-params">key</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> dep = depsMap.<span class="hljs-title function_">get</span>(key);<br>  <span class="hljs-keyword">if</span> (!dep) depsMap.<span class="hljs-title function_">set</span>(key, (dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()));<br><br>  dep.<span class="hljs-title function_">add</span>(effect);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">trigger</span> = (<span class="hljs-params">key</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> dep = depsMap.<span class="hljs-title function_">get</span>(key);<br><br>  <span class="hljs-keyword">if</span> (dep) dep.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">effect</span>) =&gt;</span> <span class="hljs-title function_">effect</span>());<br>&#125;;<br><br><span class="hljs-keyword">const</span> product = &#123; <span class="hljs-attr">price</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">effect</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  total = product.<span class="hljs-property">price</span> * product.<span class="hljs-property">quantity</span>;<br>&#125;;<br><span class="hljs-title function_">track</span>(<span class="hljs-string">&quot;price&quot;</span>);<br><span class="hljs-title function_">effect</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`total: <span class="hljs-subst">$&#123;total&#125;</span>`</span>); <span class="hljs-comment">// total: 20</span><br><br>product.<span class="hljs-property">price</span> = <span class="hljs-number">20</span>;<br><span class="hljs-title function_">trigger</span>(<span class="hljs-string">&quot;price&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`total: <span class="hljs-subst">$&#123;total&#125;</span>`</span>); <span class="hljs-comment">// total: 40</span><br></code></pre></td></tr></table></figure><p>单个对象与单个值的区别就在于，一个值我们只需要一个 dep 就可以存放 effect，而单个对象进行响应式我们得对每一个对象的属性都做一个 dep 然后进行存放 effect。</p><p>所以我们就需要一个 depsMap 的 Map 类型的函数来对一个个对象属性进行映射相应的 dep 变量进行收集和执行</p><p>最终就是多个对象的响应式<br>上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> targetMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>(); <span class="hljs-comment">// ① 初始化 targetMap，保存观察对象</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 收集依赖</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">track</span> = (<span class="hljs-params">target, key</span>) =&gt; &#123;<br>  <span class="hljs-comment">// ② 收集依赖</span><br>  <span class="hljs-comment">// 从targetMap中找到对象的Map</span><br>  <span class="hljs-keyword">let</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target);<br>  <span class="hljs-keyword">if</span> (!depsMap) targetMap.<span class="hljs-title function_">set</span>(target, (depsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()));<br><br>  <span class="hljs-comment">// 从对象中找到key的Set</span><br>  <span class="hljs-keyword">let</span> dep = depsMap.<span class="hljs-title function_">get</span>(key);<br>  <span class="hljs-keyword">if</span> (!dep) depsMap.<span class="hljs-title function_">seZZt</span>(key, (dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()));<br><br>  <span class="hljs-comment">// 收集副作用</span><br>  dep.<span class="hljs-title function_">add</span>(effect);<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 执行指定对象的指定属性的所有副作用</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">trigger</span> = (<span class="hljs-params">target, key</span>) =&gt; &#123;<br>  <span class="hljs-comment">// ③ 执行指定对象的指定属性的所有副作用</span><br>  <span class="hljs-comment">// 从targetMap中找到对象的Map</span><br>  <span class="hljs-keyword">const</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target);<br>  <span class="hljs-keyword">if</span> (!depsMap) <span class="hljs-keyword">return</span>;<br><br>  <span class="hljs-comment">// 从对象中找到key的Set</span><br>  <span class="hljs-keyword">const</span> dep = depsMap.<span class="hljs-title function_">get</span>(key);<br>  <span class="hljs-keyword">if</span> (dep) dep.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">effect</span>) =&gt;</span> <span class="hljs-title function_">effect</span>()); <span class="hljs-comment">// 执行副作用</span><br>&#125;;<br><br><span class="hljs-keyword">let</span> product = &#123; <span class="hljs-attr">price</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">2</span> &#125;,<br>  total = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">effect</span> = (<span class="hljs-params"></span>) =&gt; (total = product.<span class="hljs-property">price</span> * product.<span class="hljs-property">quantity</span>);<br><span class="hljs-title function_">track</span>(product, <span class="hljs-string">&quot;price&quot;</span>);<br><span class="hljs-title function_">effect</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`total: <span class="hljs-subst">$&#123;total&#125;</span>`</span>); <span class="hljs-comment">// total: 20</span><br><br>product.<span class="hljs-property">price</span> = <span class="hljs-number">20</span>;<br><span class="hljs-title function_">trigger</span>(product, <span class="hljs-string">&quot;price&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`total: <span class="hljs-subst">$&#123;total&#125;</span>`</span>); <span class="hljs-comment">// total: 40</span><br></code></pre></td></tr></table></figure><p>其实核心是一样的，一个对象就有一个 Map(depsMap 变量)，那多个对象就会有多个 Map，所以多个对象的响应式就一样需要一个大 Map(targetMap 变量)来对每一个对象指定一个小 Map(depsMap 变量)<br>我们这里采用 WeakMap 类型对象，将响应式对象设为 key，小 Map(depsMap)设为 value</p><blockquote><p>WeakMap 类型只能用对象来作为 key</p></blockquote><p>到这里还没结束，我们还得处理前面说到的手动执行的问题以及多个 effect 函数的处理问题。</p><h3 id="使用-Proxy-和-Reflect"><a href="#使用-Proxy-和-Reflect" class="headerlink" title="使用 Proxy 和 Reflect"></a>使用 Proxy 和 Reflect</h3><blockquote><p>Proxy 和 Reflect 是 ES6 中的一个知识点，很少用但是这里用到了，可以先去看看什么是 Proxy 和 Reflect</p></blockquote><p>想要自动响应式，我们就得在对象属性设置的时候自动执行 track 函数，也得在对象属性改变的时候自动执行 trigger 函数，这就要用到 Proxy 代理拦截以及 Reflect 模拟默认事件了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> targetMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 设置追踪属性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">track</span> = (<span class="hljs-params">target, key</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 从targetMap中找到对象的Map</span><br>  <span class="hljs-keyword">let</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target);<br>  <span class="hljs-keyword">if</span> (!depsMap) targetMap.<span class="hljs-title function_">set</span>(target, (depsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()));<br><br>  <span class="hljs-comment">// 从对象中找到key的Set</span><br>  <span class="hljs-keyword">let</span> dep = depsMap.<span class="hljs-title function_">get</span>(key);<br>  <span class="hljs-keyword">if</span> (!dep) depsMap.<span class="hljs-title function_">set</span>(key, (dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()));<br><br>  <span class="hljs-comment">// 增加副作用</span><br>  dep.<span class="hljs-title function_">add</span>(effect);<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 执行副作用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">trigger</span> = (<span class="hljs-params">target, key</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 从targetMap中找到对象的Map</span><br>  <span class="hljs-keyword">const</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target);<br>  <span class="hljs-keyword">if</span> (!depsMap) <span class="hljs-keyword">return</span>;<br><br>  <span class="hljs-comment">// 从对象中找到key的Set</span><br>  <span class="hljs-keyword">const</span> dep = depsMap.<span class="hljs-title function_">get</span>(key);<br>  <span class="hljs-keyword">if</span> (dep) dep.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">effect</span>) =&gt;</span> <span class="hljs-title function_">effect</span>()); <span class="hljs-comment">// 执行副作用</span><br>&#125;;<br><span class="hljs-comment">//前面两个部分就是正常的多对象的trigger和track函数</span><br><span class="hljs-comment">//下面这个就是核心代理</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reactive</span> = (<span class="hljs-params">target</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(<br>    target, <span class="hljs-comment">// 被代理的对象</span><br>    <span class="hljs-comment">// handle 处理程序</span><br>    &#123;<br>      <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Get was called with key = &quot;</span> + key);<br>        <span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(...<span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">//等同于target[key]</span><br>        <span class="hljs-title function_">track</span>(target, key);<br>        <span class="hljs-keyword">return</span> result;<br>      &#125;,<br>      <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value, receiver</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Set was called with key = &quot;</span> + key);<br>        <span class="hljs-keyword">let</span> oldValue = target[key];<br>        <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(...<span class="hljs-variable language_">arguments</span>);<br>        <span class="hljs-keyword">if</span> (oldValue !== value) <span class="hljs-title function_">trigger</span>(target, key);<br>        <span class="hljs-keyword">return</span> value;<br>      &#125;,<br>    &#125;<br>  );<br>&#125;;<br><br><span class="hljs-keyword">let</span> product = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">price</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">2</span> &#125;);<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">effect</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  total = product.<span class="hljs-property">price</span> * product.<span class="hljs-property">quantity</span>;<br>&#125;;<br><span class="hljs-title function_">effect</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(total);<br><br>product.<span class="hljs-property">price</span> = <span class="hljs-number">20</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(total);<br></code></pre></td></tr></table></figure><p>解释一下核心的 reactive 部分，就是利用 Proxy 拦截正常的对象读取属性和修改属性。每次读取都收集 effect，每次修改属性都执行 effect，就很好的实现了响应式。<br>同时 reflect.get 和 reflect.set 实现了原有的默认行为。</p><h3 id="activeEffect"><a href="#activeEffect" class="headerlink" title="activeEffect"></a>activeEffect</h3><p>剩下的就是解决 <code>effect</code> 的问题了，当每次 <code>effect</code> 函数修改的时候(改名字等行为)我们都得重新把<code>dep.add(effect)</code>改一下。</p><p>所以我们引入 activeEffect 来保存正在运行的 effect</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> activeEffect = [];<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">effect</span> = (<span class="hljs-params">eff</span>) =&gt; &#123;<br>  activeEffect.<span class="hljs-title function_">push</span>(eff);<br>  <span class="hljs-title function_">eff</span>();<br>  activeEffect.<span class="hljs-title function_">pop</span>();<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后在 track 函数中将 activeEffect 变量作为依赖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">track</span> = (<span class="hljs-params">target, key</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (activeEffect[activeEffect.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]) &#123;<br>    <span class="hljs-comment">// 判断 activeEffect 内是否有依赖</span><br>    <span class="hljs-comment">// 从targetMap中找到对象的Map</span><br>    <span class="hljs-keyword">let</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target);<br>    <span class="hljs-keyword">if</span> (!depsMap) targetMap.<span class="hljs-title function_">set</span>(target, (depsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()));<br><br>    <span class="hljs-comment">// 从对象中找到key的Set</span><br>    <span class="hljs-keyword">let</span> dep = depsMap.<span class="hljs-title function_">get</span>(key);<br>    <span class="hljs-keyword">if</span> (!dep) depsMap.<span class="hljs-title function_">set</span>(key, (dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()));<br><br>    dep.<span class="hljs-title function_">add</span>(activeEffect[activeEffect.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]); <span class="hljs-comment">// 增加副作用,我觉得这边可以用dep.add(activeEffect[0])</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>最后再把 effect 的使用修改一下:<br><code>effect(() =&gt; total = product.price * product.quantity);</code></p><p><strong>理一下最后的执行顺序：</strong><br>我们先对 effect 传入一个副作用函数，然后压入到 activeEffect，执行副作用函数，这个时候就会读取动态对象的属性，被 proxy 拦截，执行 track 压入副作用函数到 dep 里，最后在 activeEffect 中弹出副作用函数。</p><h3 id="最后完整代码："><a href="#最后完整代码：" class="headerlink" title="最后完整代码："></a>最后完整代码：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> targetMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>();<br><span class="hljs-keyword">let</span> activeEffect = [];<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">effect</span> = (<span class="hljs-params">eff</span>) =&gt; &#123;<br>  activeEffect.<span class="hljs-title function_">push</span>(eff);<br>  <span class="hljs-title function_">eff</span>();<br>  activeEffect.<span class="hljs-title function_">pop</span>();<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 收集依赖</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">target</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">key</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">track</span> = (<span class="hljs-params">target, key</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (activeEffect[activeEffect.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]) &#123;<br>    <span class="hljs-comment">// 判断当前是否有 activeEffect</span><br>    <span class="hljs-comment">// 从targetMap中找到对象的Map</span><br>    <span class="hljs-keyword">let</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target);<br>    <span class="hljs-keyword">if</span> (!depsMap) targetMap.<span class="hljs-title function_">set</span>(target, (depsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()));<br><br>    <span class="hljs-comment">// 从对象中找到key的Set</span><br>    <span class="hljs-keyword">let</span> dep = depsMap.<span class="hljs-title function_">get</span>(key);<br>    <span class="hljs-keyword">if</span> (!dep) depsMap.<span class="hljs-title function_">set</span>(key, (dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()));<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(activeEffect);<br>    dep.<span class="hljs-title function_">add</span>(activeEffect[activeEffect.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]); <span class="hljs-comment">// 增加副作用</span><br>    <span class="hljs-comment">//我觉得这边可以用dep.add(activeEffect[0])</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 执行副作用</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">target</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">key</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">trigger</span> = (<span class="hljs-params">target, key</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 从targetMap中找到对象的Map</span><br>  <span class="hljs-keyword">const</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target);<br>  <span class="hljs-keyword">if</span> (!depsMap) <span class="hljs-keyword">return</span>;<br><br>  <span class="hljs-comment">// 从对象中找到key的Set</span><br>  <span class="hljs-keyword">const</span> dep = depsMap.<span class="hljs-title function_">get</span>(key);<br>  <span class="hljs-keyword">if</span> (!dep) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-comment">// 执行副作用</span><br>  dep.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">inner</span>) =&gt;</span> <span class="hljs-title function_">effect</span>(inner));<br>&#125;;<br><br><span class="hljs-comment">/** <span class="hljs-doctag">@description</span> reactive函数 */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reactive</span> = (<span class="hljs-params">target</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(<br>    target, <span class="hljs-comment">// 被代理的对象</span><br>    <span class="hljs-comment">// handle 处理程序</span><br>    &#123;<br>      <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>        <span class="hljs-comment">// console.log(&#x27;Get was called with key = &#x27; + key)</span><br>        <span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(...<span class="hljs-variable language_">arguments</span>);<br>        <span class="hljs-title function_">track</span>(target, key);<br>        <span class="hljs-keyword">return</span> result;<br>      &#125;,<br>      <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value, receiver</span>) &#123;<br>        <span class="hljs-comment">// console.log(&#x27;Set was called with key = &#x27; + key)</span><br>        <span class="hljs-keyword">let</span> oldValue = target[key];<br>        <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(...<span class="hljs-variable language_">arguments</span>);<br>        <span class="hljs-keyword">if</span> (oldValue !== value) <span class="hljs-title function_">trigger</span>(target, key);<br>        <span class="hljs-keyword">return</span> value;<br>      &#125;,<br>    &#125;<br>  );<br>&#125;;<br><br><span class="hljs-keyword">let</span> product = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">price</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">2</span> &#125;);<br><span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span>,<br>  salePrice = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 修改 effect 使用方式，将副作用作为参数传给 effect 方法</span><br><span class="hljs-title function_">effect</span>(<span class="hljs-function">() =&gt;</span> (total = product.<span class="hljs-property">price</span> * product.<span class="hljs-property">quantity</span>));<br><span class="hljs-title function_">effect</span>(<span class="hljs-function">() =&gt;</span> (salePrice = product.<span class="hljs-property">price</span> * <span class="hljs-number">0.9</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(total, salePrice); <span class="hljs-comment">// 20 9</span><br><br>product.<span class="hljs-property">quantity</span> = <span class="hljs-number">5</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(total, salePrice); <span class="hljs-comment">// 50 9</span><br><br>product.<span class="hljs-property">price</span> = <span class="hljs-number">20</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(total, salePrice); <span class="hljs-comment">// 100 18</span><br></code></pre></td></tr></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>vue 里还有一个 api 对单独的值的一个响应式叫做 ref<br>其实挺简单的，下面是实现代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">ref</span> = (<span class="hljs-params">raw</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> r = &#123;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">value</span>() &#123;<br>      <span class="hljs-title function_">track</span>(r, <span class="hljs-string">&quot;value&quot;</span>);<br>      <span class="hljs-keyword">return</span> raw;<br>    &#125;,<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">value</span>(<span class="hljs-params">newVal</span>) &#123;<br>      raw = newVal;<br>      <span class="hljs-title function_">trigger</span>(r, <span class="hljs-string">&quot;value&quot;</span>);<br>    &#125;,<br>  &#125;;<br>  <span class="hljs-keyword">return</span> r;<br>&#125;;<br></code></pre></td></tr></table></figure><p>首先我们得知道<strong>对象的属性访问器（计算属性）</strong><br>属性方式包括：getter 和 setter。<br>然后和代理拦截一下每次访问就收集 effect，修改就执行 effect</p><h2 id="Computered-方法"><a href="#Computered-方法" class="headerlink" title="Computered 方法"></a>Computered 方法</h2><p>没错，这个可以的，接下来一起实现个简单的 computed 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">computed</span> = (<span class="hljs-params">getter</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-title function_">ref</span>();<br>  <span class="hljs-title function_">effect</span>(<span class="hljs-function">() =&gt;</span> (result.<span class="hljs-property">value</span> = <span class="hljs-title function_">getter</span>()));<br>  <span class="hljs-keyword">return</span> result;<br>&#125;;<br><br><span class="hljs-keyword">let</span> product = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">price</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">2</span> &#125;);<br><span class="hljs-keyword">let</span> salePrice = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> product.<span class="hljs-property">price</span> * <span class="hljs-number">0.9</span>;<br>&#125;);<br><span class="hljs-keyword">let</span> total = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> salePrice.<span class="hljs-property">value</span> * product.<span class="hljs-property">quantity</span>;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(total.<span class="hljs-property">value</span>, salePrice.<span class="hljs-property">value</span>);<br>product.<span class="hljs-property">quantity</span> = <span class="hljs-number">5</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(total.<span class="hljs-property">value</span>, salePrice.<span class="hljs-property">value</span>);<br>product.<span class="hljs-property">price</span> = <span class="hljs-number">20</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(total.<span class="hljs-property">value</span>, salePrice.<span class="hljs-property">value</span>);<br></code></pre></td></tr></table></figure><p>这里我们将一个函数作为参数传入 computed 方法，computed 方法内通过 ref 方法构建一个 ref 对象，然后通过 effct 方法，将 getter 方法返回值作为 computed 方法的返回值。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redux</title>
    <link href="/2023/06/05/Redux/"/>
    <url>/2023/06/05/Redux/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是-Redux"><a href="#什么是-Redux" class="headerlink" title="什么是 Redux"></a>什么是 Redux</h2><p><strong>Redux 是一个使用叫做 “action” 的事件来管理和更新应用状态的模式和工具库</strong>它以集中式 Store（centralized store）的方式对整个应用中使用的状态进行集中管理，其规则确保状态只能以可预测的方式更新</p><h3 id="为什么要使用-Redux"><a href="#为什么要使用-Redux" class="headerlink" title="为什么要使用 Redux"></a>为什么要使用 Redux</h3><p>Redux 帮你管理“全局”状态 - 应用程序中的很多组件都需要的状态。</p><p>Redux 提供的模式和工具使你更容易理解应用程序中的状态何时、何地、为什么、state 如何被更新，以及当这些更改发生时你的应用程序逻辑将如何表现. Redux 指导你编写可预测和可测试的代码，这有助于你确信你的应用程序将按预期工作。</p><h3 id="什么时候使用-Redux"><a href="#什么时候使用-Redux" class="headerlink" title="什么时候使用 Redux"></a>什么时候使用 Redux</h3><p>在以下情况下使用 Redux：</p><ul><li>应用中有很多 state 在多个组件中需要使用</li><li>应用 state 会随着时间的推移而频繁更新</li><li>更新 state 的逻辑很复杂</li><li>中型和大型代码量的应用，很多人协同开发</li></ul><p><strong>并非所有应用程序都需要 Redux。 花一些时间思考你正在构建的应用程序类型，并决定哪些工具最能帮助解决你正在处理的问题。</strong></p><h2 id="Redux-术语与概念"><a href="#Redux-术语与概念" class="headerlink" title="Redux 术语与概念"></a>Redux 术语与概念</h2><h3 id="State-管理"><a href="#State-管理" class="headerlink" title="State 管理"></a>State 管理</h3><p>这是一个小小的计数器组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// State: counter 值</span><br>  <span class="hljs-keyword">const</span> [counter, setCounter] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-comment">// Action: 当事件发生后，触发状态更新的代码</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">increment</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">setCounter</span>(<span class="hljs-function">(<span class="hljs-params">prevCounter</span>) =&gt;</span> prevCounter + <span class="hljs-number">1</span>);<br>  &#125;;<br><br>  <span class="hljs-comment">// View: 视图定义</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      Value: &#123;counter&#125; <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;increment&#125;</span>&gt;</span>Increment<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>它包含</p><ul><li>state：驱动应用的真实数据源头</li><li>view：基于当前状态的视图声明性描述</li><li>actions：根据用户输入在应用程序中发生的事件，并触发状态更新</li></ul><p>这就引出了一个概念-<strong>单向数据流</strong></p><h3 id="单向数据流-one-way-data-flow"><a href="#单向数据流-one-way-data-flow" class="headerlink" title="单向数据流(one-way data flow)"></a>单向数据流(one-way data flow)</h3><ol><li>用 state 来描述应用程序在特定时间点的状况</li><li>基于 state 来渲染出 View</li><li>当发生某些事情时（例如用户单击按钮），state 会根据发生的事情进行更新，生成新的 state</li><li>基于新的 state 重新渲染 View<img src="../Redux/one-wayDataFlow.png" alt="单向数据流" width="500" height="300"></li></ol><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><p><strong>action</strong> 是一个具有 type 字段的普通 JavaScript 对象。<strong>你可以将 action 视为描述应用程序中发生了什么的事件.</strong><br>这是一个典型的 action 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> addTodoAction = &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;todos/todoAdded&quot;</span>,<br>  <span class="hljs-attr">payload</span>: <span class="hljs-string">&quot;Buy milk&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="Action-Creator"><a href="#Action-Creator" class="headerlink" title="Action Creator"></a>Action Creator</h4><p>action creator 是一个创建并返回一个 action 对象的函数。它的作用是让你不必每次都手动编写 action 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">addTodo</span> = (<span class="hljs-params">text</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;todos/todoAdded&quot;</span>,<br>    <span class="hljs-attr">payload</span>: text,<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h4><p><strong>reducer</strong> 是一个函数，接收当前的 state 和一个 action 对象，必要时决定如何更新状态，并返回新状态。<br>函数签名是：(state, action) =&gt; newState。<br>你可以将 reducer 视为一个事件监听器，它根据接收到的 action（事件）类型处理事件。</p><p>Reducer 必需符合以下规则：</p><ul><li>只使用 state 和 action 参数计算新的状态值</li><li>禁止直接修改 state</li><li>禁止一切异步逻辑，依赖随机值或其他导致“副作用”的代码</li></ul><p>这是一个 Reducer 的小例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> initialState = &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">counterReducer</span>(<span class="hljs-params">state = initialState, action</span>) &#123;<br>  <span class="hljs-comment">// 检查 reducer 是否关心这个 action</span><br>  <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;counter/increment&quot;</span>) &#123;<br>    <span class="hljs-comment">// 如果是，复制 `state`</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      ...state,<br>      <span class="hljs-comment">// 使用新值更新 state 副本</span><br>      <span class="hljs-attr">value</span>: state.<span class="hljs-property">value</span> + <span class="hljs-number">1</span>,<br>    &#125;;<br>  &#125;<br>  <span class="hljs-comment">// 返回原来的 state 不变</span><br>  <span class="hljs-keyword">return</span> state;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="store"><a href="#store" class="headerlink" title="store"></a>store</h4><p><strong>store</strong>是通过传入一个 reducer 来创建的，并且有一个名为 getState 的方法返回当前的状态值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123; <span class="hljs-attr">reducer</span>: counterReducer &#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(store.<span class="hljs-title function_">getState</span>());<br><span class="hljs-comment">// &#123;value: 0&#125;</span><br></code></pre></td></tr></table></figure><h4 id="Dispatch"><a href="#Dispatch" class="headerlink" title="Dispatch"></a>Dispatch</h4><p>Redux store 有一个方法叫 <strong>dispatch</strong> 更新 state 的唯一方法是调用 store.dispatch() 并传入一个 action 对象。 store 将执行所有 reducer 函数并计算出更新后的 state</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">store.<span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;counter/increment&quot;</span> &#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(store.<span class="hljs-title function_">getState</span>());<br><span class="hljs-comment">// &#123;value: 1&#125;</span><br></code></pre></td></tr></table></figure><p>dispatch 一个 action 可以形象的理解为 “触发一个事件”。发生了一些事情，我们希望 store 知道这件事。 Reducer 就像事件监听器一样，当它们收到关注的 action 后，它就会更新 state 作为响应。<br>我们通常使用 action creator 来调用 action</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">increment</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;counter/increment&quot;</span>,<br>  &#125;;<br>&#125;;<br><br>store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">increment</span>());<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(store.<span class="hljs-title function_">getState</span>());<br><span class="hljs-comment">// &#123;value: 2&#125;</span><br></code></pre></td></tr></table></figure><h4 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h4><p>Selector 函数可以从 store 状态树中提取指定的片段。随着应用变得越来越大，会遇到应用程序的不同部分需要读取相同的数据，selector 可以避免重复这样的读取逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">selectCounterValue</span> = (<span class="hljs-params">state</span>) =&gt; state.<span class="hljs-property">value</span>;<br><br><span class="hljs-keyword">const</span> currentValue = <span class="hljs-title function_">selectCounterValue</span>(store.<span class="hljs-title function_">getState</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(currentValue);<br><span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h2 id="Redux-数据流"><a href="#Redux-数据流" class="headerlink" title="Redux 数据流"></a>Redux 数据流</h2><p>我们将上面提到的“单向数据流”步骤分解为更详细的内容:</p><ul><li>初次启动<ul><li>使用最顶层的 root reducer 函数创建 Redux store</li><li>tore 调用一次 root reducer，并将返回值保存为它的初始 state</li><li>当视图 首次渲染时，视图组件访问 Redux store 的当前 state，并使用该数据来决定要呈现的内容。同时监听 store 的更新，以便他们可以知道 state 是否已更改。</li></ul></li><li>更新环节<ul><li>应用程序中发生了某些事情，例如用户单击按钮</li><li>dispatch 一个 action 到 Redux store，例如 dispatch({type: ‘counter/increment’})</li><li>store 用之前的 state 和当前的 action 再次运行 reducer 函数，并将返回值保存为新的 state</li><li>store 通知所有订阅过的视图，通知它们 store 发生更新</li><li>每个订阅过 store 数据的视图 组件都会检查它们需要的 state 部分是否被更新。</li><li>发现数据被更新的每个组件都强制使用新数据重新渲染，紧接着更新网页</li></ul></li></ul><h1 id="第二章-应用结构"><a href="#第二章-应用结构" class="headerlink" title="第二章 应用结构"></a>第二章 应用结构</h1><p>这是一个简单的 Redux+React 的项目<br><code>npx create-react-app redux-essentials-example --template redux</code><br><a href="https://github.com/YYGod0120/Learning/tree/master/Redux/redux-essentials-example">或者你可以直接 clone 我的学习仓库</a></p><ul><li><code>/src</code><ul><li><code>index.js</code>:app 入口文件</li><li><code>App.js</code>: 顶级 React 组件</li><li><code>/app</code><ul><li><code>.store.js</code>:创建 Redux store 实例</li></ul></li><li><code>/features</code><ul><li><code>/counter</code><ul><li><code>Counter.js</code>:展示 counter 特性的 React 组件</li><li><code>counterSlice.js</code>:counter 特性相关的 redux 逻辑</li></ul></li></ul></li></ul></li></ul><h2 id="Redux-Store"><a href="#Redux-Store" class="headerlink" title="Redux Store"></a>Redux Store</h2><p>点开<code>store.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> counterReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../features/counter/counterSlice&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">configureStore</span>(&#123;<br>  <span class="hljs-attr">reducer</span>: &#123;<br>    <span class="hljs-attr">counter</span>: counterReducer,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>Redux store 是使用 Redux Toolkit 中的 configureStore 函数创建的。configureStore 要求我们传入一个 reducer 参数。<br>当我们传入一个像 {counter: counterReducer} 这样的对象时，它表示我们希望在 Redux 状态对象中有一个 state.counter 部分，并且我们希望每当 dispatch action 时 counterReducer 函数负责决定是否以及如何更新 state.counter 部分。<br><code>counterReducer</code>是来自<code>counterSlice</code>的一个 reducer 的函数</p><h2 id="Redux-Slice"><a href="#Redux-Slice" class="headerlink" title="Redux Slice"></a>Redux Slice</h2><p>“slice” 是应用中单个功能的 Redux reducer 逻辑和 action 的集合, 通常一起定义在一个文件中。该名称来自于将根 Redux 状态对象拆分为多个状态 “slice”。</p><p>点开<code>counterSlice.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createSlice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> counterSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;counter&quot;</span>,<br>  <span class="hljs-attr">initialState</span>: &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-attr">increment</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// Redux Toolkit 允许我们在 reducers 写 &quot;可变&quot; 逻辑。</span><br>      <span class="hljs-comment">// 并不是真正的改变 state 因为它使用了 immer 库</span><br>      <span class="hljs-comment">// 当 immer 检测到 &quot;draft state&quot; 改变时，会基于这些改变去创建一个新的</span><br>      <span class="hljs-comment">// 不可变的 state</span><br>      state.<span class="hljs-property">value</span> += <span class="hljs-number">1</span>;<br>    &#125;,<br>    <span class="hljs-attr">decrement</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>      state.<span class="hljs-property">value</span> -= <span class="hljs-number">1</span>;<br>    &#125;,<br>    <span class="hljs-attr">incrementByAmount</span>: <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> &#123;<br>      state.<span class="hljs-property">value</span> += action.<span class="hljs-property">payload</span>;<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.<span class="hljs-property">actions</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> counterSlice.<span class="hljs-property">reducer</span>;<br></code></pre></td></tr></table></figure><p><code>Redux Toolkit</code>有一个名为 <code>createSlice</code> 的函数，它负责生成<code>action</code> 类型字符串、<code>action creator</code> 函数和 <code>action</code> 对象的工作。<br>你所要做的就是为这个 <code>slice</code> 定义一个名称，编写一个包含 <code>reducer</code> 函数的对象，它会自动生成相应的 <code>action</code> 代码。<br><code>name</code> 选项的字符串用作每个 <code>action</code> 类型的第一部分，每个 <code>reducer</code> 函数的键名用作第二部分。<br>因此 <code>reducer</code> 函数生成了一个 <code>action</code> 类型的 <code>&#123;type: &quot;counter/increment&quot;&#125;</code>。</p><p>除了 <code>name</code> 字段 <code>createSlice</code> 还需要我们为 <code>reducer</code> 传入初始状态值，以便在第一次调用时就有一个 <code>state</code>。在这种情况下，我们提供了一个对象，它有一个从 0 开始的 <code>value</code> 字段。</p><h2 id="使用-Thunk-编写异步逻辑"><a href="#使用-Thunk-编写异步逻辑" class="headerlink" title="使用 Thunk 编写异步逻辑"></a>使用 Thunk 编写异步逻辑</h2><p>thunk 是一种特定类型的 Redux 函数，可以包含异步逻辑。Thunk 是使用两个函数编写的：</p><ul><li>一个内部 thunk 函数，它以 dispatch 和 getState 作为参数</li><li>外部创建者函数，它创建并返回 thunk 函数</li></ul><p><code>counterSlice.js</code>文件中就有一个 thunk action creator</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 下面这个函数就是一个 thunk ，它使我们可以执行异步逻辑</span><br><span class="hljs-comment">// 你可以 dispatched 异步 action `dispatch(incrementAsync(10))` 就像一个常规的 action</span><br><span class="hljs-comment">// 调用 thunk 时接受 `dispatch` 函数作为第一个参数</span><br><span class="hljs-comment">// 当异步代码执行完毕时，可以 dispatched actions</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> incrementAsync = <span class="hljs-title function_">createAsyncThunk</span>(<br>  <span class="hljs-string">&quot;counter/fetchCount&quot;</span>,<br>  <span class="hljs-keyword">async</span> (amount) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetchCount</span>(amount);<br>    <span class="hljs-comment">// The value we return becomes the `fulfilled` action payload</span><br>    <span class="hljs-keyword">return</span> response.<span class="hljs-property">data</span>;<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>我们可以像普通 action creator 一样使用它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">incrementAsync</span>(<span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><h2 id="React-Counter-组件"><a href="#React-Counter-组件" class="headerlink" title="React Counter 组件"></a>React Counter 组件</h2><p>查看<code>Counter.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">useSelector</span>(selectCount);<br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br>  <span class="hljs-keyword">const</span> [incrementAmount, setIncrementAmount] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;2&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> incrementValue = <span class="hljs-title class_">Number</span>(incrementAmount) || <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.row&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.button&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Decrement value&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(decrement())&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          -</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.value&#125;</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.button&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Increment value&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(increment())&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          +</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.row&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.textbox&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Set increment amount&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;incrementAmount&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setIncrementAmount(e.target.value)&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.button&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(incrementByAmount(incrementValue))&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          Add Amount</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.asyncButton&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(incrementAsync(incrementValue))&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          Add Async</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.button&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(incrementIfOdd(incrementValue))&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          Add If Odd</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>组件内部并没有使用<code>state</code>来保存<code>counter</code>的状态，而是使用了<code>const count = useSelector(selectCount)</code>和<code>const dispatch = useDispatch();</code></p><h3 id="使用-useSelector-来保存数据"><a href="#使用-useSelector-来保存数据" class="headerlink" title="使用 useSelector 来保存数据"></a>使用 useSelector 来保存数据</h3><p>首先，<code>useSelector</code>这个 hooks 让我们的组件从 Redux 的 store 状态树中提取它需要的任何数据。<br>我们也可以编写 <code>selector</code> 来返回你所需要的状态参数,就像<code>counterSlice.js</code>中的<code>selectCount</code>函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">selectCount</span> = (<span class="hljs-params">state</span>) =&gt; state.<span class="hljs-property">counter</span>.<span class="hljs-property">value</span>;<br></code></pre></td></tr></table></figure><p>首先我们要知道的是不能在其他文件中引入 store，所以我们只能通过<code>useSelect</code>来和 store “对话”<br>因此我们可以执行以下操作来获取 store 中的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">useSelector</span>(selectCount);<br></code></pre></td></tr></table></figure><h3 id="使用-useDispatch-来-dispatch-action"><a href="#使用-useDispatch-来-dispatch-action" class="headerlink" title="使用 useDispatch 来 dispatch action"></a>使用 useDispatch 来 dispatch action</h3><p>类似地，我们知道如果我们可以访问 Redux store，我们可以使用 action creator 来 dispatch action，比如 <code>store.dispatch(increment())</code>。 由于我们无法访问 store 本身，因此我们需要某种方式来访问 dispatch 方法。<br><code>useDispatch hooks</code> 为我们完成了这项工作，并从 Redux store 中为我们提供了实际的 dispatch 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br></code></pre></td></tr></table></figure><h2 id="组件-state"><a href="#组件-state" class="headerlink" title="组件 state"></a>组件 state</h2><p>请记住<strong>整个应用程序所需的全局状态应该放在 Redux store 中。而只在一个地方用到的状态应该放到组件的 state。</strong></p><p><strong>在 React + Redux 应用中，你的全局状态应该放在 Redux store 中，你的本地状态应该保留在 React 组件中。</strong><br>如果你不确定该放在哪里，这里有一些常用的经验法则，用于确定应该将哪种数据放入 Redux：</p><ul><li>用程序的其他部分是否关心这些数据？</li><li>你是否需要能够基于这些原始数据创建进一步的派生数据？</li><li>是否使用相同的数据来驱动多个组件？</li><li>能够将这种状态恢复到给定的时间点（即时间旅行调试）对你是否有价值？</li><li>是否要缓存数据（即，如果数据已经存在，则使用它的状态而不是重新请求它）？</li><li>你是否希望在热重载视图组件（交换时可能会丢失其内部状态）时保持此数据一致？</li></ul><h2 id="Providing-the-Store"><a href="#Providing-the-Store" class="headerlink" title="Providing the Store"></a>Providing the Store</h2><p>我们已经看到我们的组件可以使用 useSelector 和 useDispatch 这两个 hooks 与 Redux 的 store 通信。奇怪的是，我们并没有导入 store，那么这些 hooks 怎么知道要与哪个 Redux store 对话呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./index.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./app/store&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> serviceWorker <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./serviceWorker&quot;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><p>为了让像 <code>useSelector</code> 这样的 <code>hooks</code> 正常工作，我们需要使用一个名为 <code>&lt;Provider&gt;</code> 的组件在幕后传递<code> Redux store</code>，以便他们可以访问它。</p><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><p>既然官网的教材代码没法用，我就通过我暑假集训的使用的 redux 做一个小小的总结用法，只能算能用，还得多琢磨，这个只是为了能快速使用上 redux 才写的，很多很多具体的还得去 redux 官网上去学</p><h2 id="store-创建"><a href="#store-创建" class="headerlink" title="store 创建"></a>store 创建</h2><p>我这边采用的是 ts 的写法<br>在 src 目录下创建一个 store.ts，当然随便取名字</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> degreeReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./features/degreeSlice&quot;</span>;<br><span class="hljs-keyword">import</span> listSlice <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./features/listSlice&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>  <span class="hljs-attr">reducer</span>: &#123;<br>    <span class="hljs-attr">degree</span>: degreeReducer,<br>    <span class="hljs-attr">list</span>: listSlice,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-comment">// Infer the `RootState` and `AppDispatch` types from the store itself</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">RootState</span> = <span class="hljs-title class_">ReturnType</span>&lt;<span class="hljs-keyword">typeof</span> store.<span class="hljs-property">getState</span>&gt;;<br><span class="hljs-comment">// Inferred type: &#123;posts: PostsState, comments: CommentsState, users: UsersState&#125;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">AppDispatch</span> = <span class="hljs-keyword">typeof</span> store.<span class="hljs-property">dispatch</span>;<br></code></pre></td></tr></table></figure><p><code>configureStore</code>是 redux-toolkit 的一个创建 store 的工具<br><code>degreeReducer</code>是一个 reducer，在里面编写一些 reducer<br><code>listSlice</code>同上</p><h2 id="reducer-写法"><a href="#reducer-写法" class="headerlink" title="reducer 写法"></a>reducer 写法</h2><p>然后我们再在 src 下创建 features 文件夹里面用来放各种 reducer</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/features/degreeSlice</span><br><span class="hljs-keyword">import</span> &#123; createSlice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">PayloadAction</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-comment">//state状态</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DegreeState</span> &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-comment">//初始state</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">initialState</span>: <span class="hljs-title class_">DegreeState</span> = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-comment">//切片代码：名字状态以及reducer</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> degreeSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;degree&quot;</span>,<br>  initialState,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-attr">change</span>: <span class="hljs-function">(<span class="hljs-params">state, action: PayloadAction&lt;<span class="hljs-built_in">number</span>&gt;</span>) =&gt;</span> &#123;<br>      state.<span class="hljs-property">value</span> = action.<span class="hljs-property">payload</span>;<br>    &#125;,<br>  &#125;,<br>&#125;);<br><span class="hljs-comment">//导出</span><br><span class="hljs-comment">// Action creators are generated for each case reducer function</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123; change &#125; = degreeSlice.<span class="hljs-property">actions</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> degreeSlice.<span class="hljs-property">reducer</span>;<br></code></pre></td></tr></table></figure><h2 id="在组件中用法"><a href="#在组件中用法" class="headerlink" title="在组件中用法"></a>在组件中用法</h2><p><code>import &#123; useSelector, useDispatch &#125; from &quot;react-redux&quot;;</code><br>useSelector 用来获取数据<br>useDispatch 用来传递 actions<br>用法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">const</span> degree = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state: RootState</span>) =&gt;</span> state.<span class="hljs-property">degree</span>.<span class="hljs-property">value</span>);<br><span class="hljs-keyword">const</span> dispatch = useDispatch&lt;<span class="hljs-title class_">AppDispatch</span>&gt;();<br><span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">change</span>(<span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><p>这样 store 里的 degree 就会发生改变</p><h2 id="如果遇到了网络请求呢"><a href="#如果遇到了网络请求呢" class="headerlink" title="如果遇到了网络请求呢"></a>如果遇到了网络请求呢</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> fetchList = <span class="hljs-title function_">createAsyncThunk</span>(<br>  <span class="hljs-string">&quot;posts/fetchList&quot;</span>,<br>  <span class="hljs-keyword">async</span> (<span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getList</span>(id);<br>    <span class="hljs-keyword">return</span> response;<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> listSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;list&quot;</span>,<br>  initialState,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-attr">setIsList</span>: <span class="hljs-function">(<span class="hljs-params">state, action: PayloadAction&lt;<span class="hljs-built_in">boolean</span>&gt;</span>) =&gt;</span> &#123;<br>      state.<span class="hljs-property">isList</span> = action.<span class="hljs-property">payload</span>;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-title function_">extraReducers</span>(<span class="hljs-params">builder</span>) &#123;<br>    builder.<span class="hljs-title function_">addCase</span>(<br>      fetchList.<span class="hljs-property">fulfilled</span>,<br>      <span class="hljs-function">(<span class="hljs-params">state, action: PayloadAction&lt;Playlist&gt;</span>) =&gt;</span> &#123;<br>        state.<span class="hljs-property">list</span> = action.<span class="hljs-property">payload</span>;<br>      &#125;<br>    );<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>extraReducers 可以对请求的各种情况做响应，这里只写了完成以后的作用</p><p>随后就在项目里使用就可以了</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">fetchList</span>(id!));<br>&#125;, [dispatch, id]);<br></code></pre></td></tr></table></figure><p>分配 fetchList 给 store 就可以改变 state.list 了</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次和后端对接做项目</title>
    <link href="/2023/06/02/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%92%8C%E5%90%8E%E7%AB%AF%E5%AF%B9%E6%8E%A5%E5%81%9A%E9%A1%B9%E7%9B%AE/"/>
    <url>/2023/06/02/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%92%8C%E5%90%8E%E7%AB%AF%E5%AF%B9%E6%8E%A5%E5%81%9A%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p><strong>好久没更新博客</strong><br><del>不是在摆烂</del><br><img src="/2023/06/02/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%92%8C%E5%90%8E%E7%AB%AF%E5%AF%B9%E6%8E%A5%E5%81%9A%E9%A1%B9%E7%9B%AE/code.png" alt="自我感觉最复杂的一段代码"></p><span id="simple-icons-[ICON" class="simple-icon"><img src="https://cdn.jsdelivr.net/npm/simple-icons@v4/icons/[ICON.svg" /></span><hr><p>这段时间在写一个项目，学校数据库大赛，我负责写一个 OJ 网站。<br>正好刚学完 react，可以试试就接下了这个项目<br>顺带还学习了如何部署网页到服务器上<br><a href="https://github.com/YYGod0120/oj-online">项目地址</a></p><hr><p>下一阶段估计学校这边会教框架(react 纯纯自己瞎几把琢磨)，希望能教一教 vue。巩固 react 也不错就是了<del>不过我可能不听 hhh</del></p><p>项目还是没有响应式布局，还是有点可惜，其实那个组件库可以提供响应式，可惜写了很多了才学会咋真正使用哈哈哈哈</p><p>还有就是 react 很多学到的东西没用上，什么 ref 和 react 的状态管理，真的是学了不等于会了，下一步估计也会看看其他人写的 react 的项目，抄抄人家代码的思路和写法，自己的 code 总感觉不是很优雅</p><hr><p>总体结果比寒假的时候写的纯三剑客项目模仿网易云来的好，无论是代码质量还是完成度还是交互性，唯一不足可能是没那么美观。<br><strong>再接再厉！！！！</strong></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>less</title>
    <link href="/2023/05/10/less/"/>
    <url>/2023/05/10/less/</url>
    
    <content type="html"><![CDATA[<h1 id="安装-less"><a href="#安装-less" class="headerlink" title="安装 less"></a>安装 less</h1><p><code>npm install less</code></p><h1 id="less-语法"><a href="#less-语法" class="headerlink" title="less 语法"></a>less 语法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>可以和 JS 一样用变量接收一个样式</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@width:</span> <span class="hljs-number">10px</span>;<br><span class="hljs-variable">@height:</span> <span class="hljs-variable">@width</span> + <span class="hljs-number">10px</span>;<br><br><span class="hljs-selector-id">#header</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-variable">@width</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-variable">@height</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><p>将一组数据从一个混合集到另外一个混合集</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.bordered</span> &#123;<br>  <span class="hljs-attribute">border-top</span>: dotted <span class="hljs-number">1px</span> black;<br>  <span class="hljs-attribute">border-bottom</span>: solid <span class="hljs-number">2px</span> black;<br>  <span class="hljs-selector-id">#menu</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#111</span>;<br>    <span class="hljs-selector-class">.bordered</span>();<br>  &#125;<br><br>  <span class="hljs-selector-class">.post</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>    <span class="hljs-selector-class">.bordered</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>可以嵌套书写 css</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/* css */</span><br><span class="hljs-selector-id">#header</span> &#123;<br>  <span class="hljs-attribute">color</span>: black;<br>&#125;<br><span class="hljs-selector-id">#header</span> <span class="hljs-selector-class">.navigation</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>&#125;<br><span class="hljs-selector-id">#header</span> <span class="hljs-selector-class">.logo</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>&#125;<br><span class="hljs-comment">/* less */</span><br><span class="hljs-selector-id">#header</span> &#123;<br>  <span class="hljs-attribute">color</span>: black;<br>  <span class="hljs-selector-class">.navigation</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>  &#125;<br>  <span class="hljs-selector-class">.logo</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="规则嵌套和冒泡"><a href="#规则嵌套和冒泡" class="headerlink" title="@规则嵌套和冒泡"></a>@规则嵌套和冒泡</h2><p>@ 规则（例如 @media 或 @supports）可以与选择器以相同的方式进行嵌套。@ 规则会被放在前面，同一规则集中的其它元素的相对顺序保持不变。这叫做冒泡（bubbling）。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/* less */</span><br><span class="hljs-selector-class">.component</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>    <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-resolution</span>: <span class="hljs-number">192dpi</span>) &#123;<br>      <span class="hljs-attribute">background-image</span>: url(<span class="hljs-string">/img/retina2x.png</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1280px</span>) &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/* 编译后 */</span><br><span class="hljs-selector-class">.component</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) &#123;<br>  <span class="hljs-selector-class">.component</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-resolution</span>: <span class="hljs-number">192dpi</span>) &#123;<br>  <span class="hljs-selector-class">.component</span> &#123;<br>    <span class="hljs-attribute">background-image</span>: url(<span class="hljs-string">/img/retina2x.png</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1280px</span>) &#123;<br>  <span class="hljs-selector-class">.component</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>算术运算符 +、-、*、/ 可以对任何数字、颜色或变量进行运算。如果可能的话，算术运算符在加、减或比较之前会进行单位换算。计算的结果以最左侧操作数的单位类型为准。如果单位换算无效或失去意义，则忽略单位。无效的单位换算例如：px 到 cm 或 rad 到 % 的转换。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/*  所有操作数被转换成相同的单位 */</span><br><span class="hljs-variable">@conversion-1:</span> <span class="hljs-number">5cm</span> + <span class="hljs-number">10mm</span>; <span class="hljs-comment">//结果是 6cm</span><br><span class="hljs-variable">@conversion-2:</span> <span class="hljs-number">2</span> - <span class="hljs-number">3cm</span> - <span class="hljs-number">5mm</span>; <span class="hljs-comment">// 结果是 -1.5cm</span><br><br><span class="hljs-comment">// conversion is impossible</span><br><span class="hljs-variable">@incompatible-units:</span> <span class="hljs-number">2</span> + <span class="hljs-number">5px</span> - <span class="hljs-number">3cm</span>; <span class="hljs-comment">// 结果是 4px</span><br><br><span class="hljs-comment">// example with variables</span><br><span class="hljs-variable">@base:</span> <span class="hljs-number">5%</span>;<br><span class="hljs-variable">@filler:</span> <span class="hljs-variable">@base</span> * <span class="hljs-number">2</span>; <span class="hljs-comment">// 结果是 10%</span><br><span class="hljs-variable">@other:</span> <span class="hljs-variable">@base</span> + <span class="hljs-variable">@filler</span>; <span class="hljs-comment">// 结果是 15%</span><br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Less 内置了多种函数用于转换颜色、处理字符串、算术运算等。这些函数在<a href="https://less.bootcss.com/functions/">Less 函数手册</a>中有详细介绍。<br>函数的用法非常简单。下面这个例子将介绍如何利用 percentage 函数将 0.5 转换为 50%，将颜色饱和度增加 5%，以及颜色亮度降低 25% 并且色相值增加 8 等用法：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@base:</span> <span class="hljs-number">#f04615</span>;<br><span class="hljs-variable">@width:</span> <span class="hljs-number">0.5</span>;<br><br><span class="hljs-selector-class">.class</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">percentage</span>(<span class="hljs-variable">@width</span>); <span class="hljs-comment">// returns `50%`</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">saturate</span>(<span class="hljs-variable">@base</span>, <span class="hljs-number">5%</span>);<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">spin</span>(<span class="hljs-built_in">lighten</span>(<span class="hljs-variable">@base</span>, <span class="hljs-number">25%</span>), <span class="hljs-number">8</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>从 Less 3.5 版本开始，你还可以将混合（mixins）和规则集（rulesets）作为一组值的映射（map）使用。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#colors</span>() &#123;<br>  primary: blue;<br>  secondary: green;<br>&#125;<br><br><span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attribute">color</span>: #colors[primary];<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid #colors[secondary];<br>&#125;<br><br><span class="hljs-comment">//css</span><br><span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>Less 中的作用域与 CSS 中的作用域非常类似。首先在本地查找变量和混合（mixins），如果找不到，则从“父”级作用域继承。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@var:</span> red;<br><br><span class="hljs-selector-id">#page</span> &#123;<br>  <span class="hljs-variable">@var:</span> white;<br>  <span class="hljs-selector-id">#header</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">@var</span>; <span class="hljs-comment">// white</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">//等同于</span><br><span class="hljs-variable">@var:</span> red;<br><br><span class="hljs-selector-id">#page</span> &#123;<br>  <span class="hljs-selector-id">#header</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">@var</span>; <span class="hljs-comment">// white</span><br>  &#125;<br>  <span class="hljs-variable">@var:</span> white;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>“导入”的工作方式和你预期的一样。你可以导入一个 .less 文件，此文件中的所有变量就可以全部使用了。如果导入的文件是 .less 扩展名，则可以将扩展名省略掉：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;library&quot;</span>; <span class="hljs-comment">// library.less</span><br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;typo.css&quot;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode使用手册</title>
    <link href="/2023/05/07/vscode%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2023/05/07/vscode%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="常用的快捷键"><a href="#常用的快捷键" class="headerlink" title="常用的快捷键:"></a>常用的快捷键:</h1><p>对于<strong>行</strong>：</p><ul><li>重开一行：光标在行尾的话，回车即可；不在行尾，ctrl + enter 向下重开一行；ctrl+shift + enter 则是在上一行重开一行</li><li>删除一行：光标没有选择内容时，ctrl + x 剪切一行；ctrl +shift + k 直接删除一行</li><li>移动一行：alt + ↑ 向上移动一行；alt + ↓ 向下移动一行</li><li>复制一行：shift + alt + ↓ 向下复制一行；shift + alt + ↑ 向上复制一行</li><li>ctrl + z 回退</li></ul><p>对于 词 的操作：</p><ul><li><p>选中一个词：ctrl + d</p></li><li><p>搜索或者替换：</p></li><li><p>ctrl + f ：搜索</p></li><li><p>ctrl + alt + f： 替换</p></li><li><p>ctrl + shift + f：在项目内搜索</p></li><li><p>通过 Ctrl + ` 可以打开或关闭终端</p></li><li><p>Ctrl+P 快速打开最近打开的文件</p></li><li><p>Ctrl+Shift+N 打开新的编辑器窗口</p></li><li><p>Ctrl+Shift+W 关闭编辑器</p></li><li><p>Home 光标跳转到行头</p></li><li><p>End 光标跳转到行尾</p></li><li><p>Ctrl + Home 跳转到页头</p></li><li><p>Ctrl + End 跳转到页尾</p></li><li><p>Ctrl + Shift + [ 折叠区域代码</p></li><li><p>Ctrl + Shift + ] 展开区域代码</p></li><li><p>Ctrl + / 添加关闭行注释</p></li><li><p>Shift + Alt +A 块区域注释</p></li></ul><h1 id="常用的插件"><a href="#常用的插件" class="headerlink" title="常用的插件"></a>常用的插件</h1><p>1、open in browser<br>在浏览器里预览网页必备。运行 html 文件<br>2、Auto Rename Tag<br>自动修改匹配的 HTML 标签。<br>3、Path Intellisense<br>智能路径提示，可以在你输入文件路径时智能提示。<br>4、Markdown Preview<br>实时预览 markdown。<br>5、stylelint<br>CSS / SCSS / Less 语法检查<br>6、Prettier<br>比 Beautify 更好用的代码格式化插件<br>可以配置.prettierc.js 文件,配合 eslint、git hooks 一起使用，提升项目代码的规范性<br><a href="https://www.prettier.cn/">官网教程</a><br>7、code runner<br>直接运行.js 等文件，在控制台输出结果<br>8、GitLens<br>详细的 Git 提交日志。<br>9、CSS Peek<br>定位 CSS 类名。</p><h1 id="设置同步"><a href="#设置同步" class="headerlink" title="设置同步"></a>设置同步</h1><p>花了一天终于把 vscode 配置成自己满意的样子，如果每换一次电脑就要重新来一次，大家一定会手撕了我。放心，早就帮大家准备好了。Settings Sync，在不同电脑间同步你的插件。</p><p>首先要想在不同的设备间同步你的插件, 需要用到 Token 和 Gist id</p><p>Token 就是你把插件上传到 github 上时, 让你保存的那段字符，Gist id 在你上传插件的那台电脑上保存着。</p><p>先给大家来三个快捷键，后面会用到</p><p>1、CTRL+SHIFT+P 我也不知道叫什么，暂且就叫它功能搜索功能吧<br>2、ALT+SHIFT+D 下载配置<br>3、ALT+SHIFT+U 上传配置<br>现在手把手教大家配置：</p><p>1、安装 Settings Sync<br>2、登陆 Github&gt;settings&gt;Developer settings&gt;personal access tokens&gt;generate new token，输入名称，勾选 Gist，提交<br>3、保存 Github Access Token<br>4、打开 vscode，Ctrl+Shift+P 打开命令框–&gt;输入 sync–&gt;选择高级设置–&gt;编辑本地扩展设置–&gt;编辑 token<br>5、Ctrl+Shift+P 打开命令框–&gt;输入 sync–&gt;找到 update/upload settings，上传成功后会返回 Gist ID，保存此 Gist ID.<br>6、在 VSCode 里，依次打开: 文件 -&gt; 首选项 -&gt; 设置，然后输入 Sync 进行搜索:能找到你 gist id<br>7、若需在其他机器上 DownLoad 插件的话，同样，Ctrl+Shift+P 打开命令框，输入 sync，找到 Download settings，会跳转到 Github 的 Token 编辑界面，点 Edit，regenerate token，保存新生成的 token，在 vscode 命令框中输入此 Token，回车，再输入之前的 Gist ID，即可同步插件和设置</p><blockquote><p>换电脑了再说</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出TypeScript</title>
    <link href="/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/"/>
    <url>/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要学习-TypeScript"><a href="#为什么要学习-TypeScript" class="headerlink" title="为什么要学习 TypeScript"></a>为什么要学习 TypeScript</h1><table><thead><tr><th>TypeScript</th><th>JavaScript</th></tr></thead><tbody><tr><td>JavaScript 的超集，用来解决大型项目的代码复杂度</td><td>一种脚本语言，用于创建动态网页</td></tr><tr><td>强类型，支持动态和静态类型</td><td>动态弱类型语言</td></tr><tr><td>可以在编译的时候发现错误</td><td>只能在运行时发现错误</td></tr><tr><td>不允许改变变量的数据类型</td><td>变量可以被赋值为不同类型</td></tr></tbody></table><h1 id="TypeScript-基础"><a href="#TypeScript-基础" class="headerlink" title="TypeScript 基础"></a>TypeScript 基础</h1><h2 id="TS-基础类型"><a href="#TS-基础类型" class="headerlink" title="TS 基础类型"></a>TS 基础类型</h2><ol><li>boolean,number,string</li><li>undefined,null</li><li>any,unknown,viod</li></ol><ul><li>unknown 与 any 的最大区别是： 任何类型的值可以赋值给 any，同时 any 类型的值也可以赋值给任何类型。unknown 任何类型的值都可以赋值给它，但它只能赋值给 unknown 和 any</li></ul><ol start="4"><li>never</li></ol><ul><li>never 指的是永远不存在的值，比如报错和死循环</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 异常</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">err</span>(<span class="hljs-params">msg: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">never</span> &#123;<br>  <span class="hljs-comment">// OK</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(msg);<br>&#125;<br><br><span class="hljs-comment">// 死循环</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loopForever</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">never</span> &#123;<br>  <span class="hljs-comment">// OK</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>数组类型[]</li><li>元组类型()</li></ol><h2 id="TS-函数类型"><a href="#TS-函数类型" class="headerlink" title="TS 函数类型"></a>TS 函数类型</h2><p>定义：TS 定义函数类型时要定义输入参数类型和输出类型<br>输入参数：参数支持可选参数和默认参数<br>输出参数：输出可以自动推断，没有返回值的时候，默认为 void 类型<br>函数重载：名称相同但参数不同，可以通过重载支持多种类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>[]</span>): <span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">string</span>[]</span>): <span class="hljs-built_in">string</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">any</span>[]</span>): <span class="hljs-built_in">any</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">join</span>();<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;number&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> acc + cur);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TS-接口类型"><a href="#TS-接口类型" class="headerlink" title="TS 接口类型"></a>TS 接口类型</h2><p>定义：接口是为了定义对象类型<br>特点：</p><ul><li>可选类型：？</li><li>只读类型：readonly</li><li>可以描述函数类型</li><li>可以描述自定义类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">p1</span>: <span class="hljs-title class_">Person</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;ye&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;20&quot;</span>,<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">age</span>); <span class="hljs-comment">//20</span><br><br><span class="hljs-comment">//自定义key</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">RandomKey</span> &#123;<br>  [<span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">obj</span>: <span class="hljs-title class_">RandomKey</span> = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;hello&quot;</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-string">&quot;world&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>一旦定义了任意类型，那么确定类型和可选属性的类型就必须是他的子集</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  age?: <span class="hljs-built_in">number</span>;<br>  [<span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: <span class="hljs-title class_">Person</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>,<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br>&#125;;<br><br><span class="hljs-comment">// index.ts(3,5): error TS2411: Property &#x27;age&#x27; of type &#x27;number&#x27; is not assignable to string index type &#x27;string&#x27;.</span><br><span class="hljs-comment">// index.ts(7,5): error TS2322: Type &#x27;&#123; [x: string]: string | number; name: string; age: number; gender: string; &#125;&#x27; is not assignable to type &#x27;Person&#x27;.</span><br><span class="hljs-comment">//   Index signatures are incompatible.</span><br><span class="hljs-comment">//     Type &#x27;string | number&#x27; is not assignable to type &#x27;string&#x27;.</span><br><span class="hljs-comment">//       Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span><br></code></pre></td></tr></table></figure><blockquote><p>一个接口中只能定义一个任意属性。如果接口中有多个类型的属性，则可以在任意属性中使用联合类型</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  age?: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 这里真实的类型应该为：number | undefined</span><br>  [<span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> | <span class="hljs-literal">undefined</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: <span class="hljs-title class_">Person</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>,<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h2><p>在 TypeScript 中，字面量不仅可以表示值，还可以表示类型，即所谓的字面量类型。<br>TypeScript 支持字符串字面量，数字字面量，布尔字面量作为字面量类型<br>比如说字符串字面量类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">specifiedStr</span>: <span class="hljs-string">&quot;this is string&quot;</span> = <span class="hljs-string">&quot;this is string&quot;</span>;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;any string&quot;</span>;<br>  specifiedStr = str; <span class="hljs-comment">// ts(2322) 类型 &#x27;&quot;string&quot;&#x27; 不能赋值给类型 &#x27;this is string&#x27;</span><br>  str = specifiedStr; <span class="hljs-comment">// ok</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这串代码中，将’this is string’赋值成为’this is string’字符串字面量类型。<br>但无法将字符串类型不能给<code>specifiedStr</code>赋值，<code>specifiedStr</code>可以给字符串类型赋值。<br>好比我们用“马”比喻 string 类型，即“黑马”代指 ‘this is string’ 类型，“黑马”肯定是“马”，但“马”不一定是“黑马”，它可能还是“白马”“灰马”。</p><p>使用案例:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Direction</span> = <span class="hljs-string">&quot;up&quot;</span> | <span class="hljs-string">&quot;down&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">dir: Direction</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><span class="hljs-title function_">move</span>(<span class="hljs-string">&quot;up&quot;</span>); <span class="hljs-comment">// ok</span><br><span class="hljs-title function_">move</span>(<span class="hljs-string">&quot;right&quot;</span>); <span class="hljs-comment">// ts(2345) Argument of type &#x27;&quot;right&quot;&#x27; is not assignable to parameter of type &#x27;Direction&#x27;</span><br></code></pre></td></tr></table></figure><p>如上代码所示，我们使用字面量联合类型描述了一个明确、可 ‘up’ 可 ‘down’ 的集合，这样就能清楚地知道需要的数据结构了。</p><h2 id="TS-类"><a href="#TS-类" class="headerlink" title="TS 类"></a>TS 类</h2><p>定义：写法和 JS 差不多，增加了一些定义<br>特点：</p><ul><li>增加了 public private protected 修饰符</li><li>抽象类：<ul><li>只能被继承，不能被实例化</li><li>作为基类，抽象方法必须被子类实现</li></ul></li></ul><ul><li>interface 约束类，使用 implement 关键字</li></ul><p><img src="/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/class1.png"><br><img src="/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/class2.png"></p><h1 id="TypeScript-进阶"><a href="#TypeScript-进阶" class="headerlink" title="TypeScript 进阶"></a>TypeScript 进阶</h1><h2 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h2><p>1.联合类型 |</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>;<br>num = <span class="hljs-number">8</span>;<br>num = <span class="hljs-string">&quot;eight&quot;</span>;<br></code></pre></td></tr></table></figure><p>2.交叉类型 &amp;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Student</span> = <span class="hljs-title class_">Person</span> &amp; &#123; <span class="hljs-attr">grade</span>: <span class="hljs-built_in">number</span> &#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">stu</span>: student;<br><span class="hljs-comment">//stu.grade</span><br></code></pre></td></tr></table></figure><p>如果同名属性的基本类型兼容，比如一个是 number，另一个是 number 的子类型、数字字面量类型，合并后 name 属性的类型就是两者中的子类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">IntersectionTypeConfict</span> = &#123; <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>; <span class="hljs-attr">name</span>: <span class="hljs-number">2</span> &#125; &amp; &#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">number</span>;<br>&#125;;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">mixedConflict</span>: <span class="hljs-title class_">IntersectionTypeConfict</span> = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// ok</span><br>  <span class="hljs-attr">age</span>: <span class="hljs-number">2</span>,<br>&#125;;<br>mixedConflict = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-number">22</span>, <span class="hljs-comment">// &#x27;22&#x27; 类型不能赋给 &#x27;2&#x27; 类型</span><br>  <span class="hljs-attr">age</span>: <span class="hljs-number">2</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>同名属性是非基本数据类型的话</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> A &#123;<br>  <span class="hljs-attr">x</span>: &#123; <span class="hljs-attr">d</span>: <span class="hljs-literal">true</span> &#125;;<br>&#125;<br><span class="hljs-keyword">interface</span> B &#123;<br>  <span class="hljs-attr">x</span>: &#123; <span class="hljs-attr">e</span>: <span class="hljs-built_in">string</span> &#125;;<br>&#125;<br><span class="hljs-keyword">interface</span> C &#123;<br>  <span class="hljs-attr">x</span>: &#123; <span class="hljs-attr">f</span>: <span class="hljs-built_in">number</span> &#125;;<br>&#125;<br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">ABC</span> = A &amp; B &amp; C;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">abc</span>: <span class="hljs-variable constant_">ABC</span> = &#123;<br>  <span class="hljs-attr">x</span>: &#123;<br>    <span class="hljs-attr">d</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">e</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">f</span>: <span class="hljs-number">666</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>混入多个类型时，若存在相同的成员，且成员类型为非基本数据类型，那么是可以成功合并。</p><p>3.类型断言</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getLength</span>(<span class="hljs-params">arg: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">const</span> str = arg <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>;<br>  <span class="hljs-keyword">if</span> (str.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">return</span> str.<span class="hljs-property">length</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-built_in">number</span> = arg <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">number</span>.<span class="hljs-title function_">toString</span>().<span class="hljs-property">length</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.类型别名(type 和 interface)<br>定义：给类型取个别名<br>相同点：</p><ul><li>都可以定义对象或函数</li><li>都允许继承</li></ul><p>差异点：</p><ul><li>interface 是 TS 用来定义对象，type 是用来定义别名方便使用</li><li>type 可以定义基础类型，interface 不行</li><li>interface 可以合并重复声明，type 不行</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person1</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Person2</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">person1</span>: <span class="hljs-title class_">Person1</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;ye&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">person2</span>: <span class="hljs-title class_">Person2</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;ye&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/type.png" alt="TypeVsInterface"></p><p>5.类型拓宽<br>所有通过 let 或 var 定义的变量、函数的形参、对象的非只读属性，如果满足指定了初始值且未显式添加类型注解的条件，那么它们推断出来的类型就是指定的初始值字面量类型拓宽后的类型，这就是字面量类型拓宽。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;this is string&quot;</span>; <span class="hljs-comment">// 类型是 string</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">strFun</span> = (<span class="hljs-params">str = <span class="hljs-string">&quot;this is string&quot;</span></span>) =&gt; str; <span class="hljs-comment">// 类型是 (str?: string) =&gt; string;</span><br><span class="hljs-keyword">const</span> specifiedStr = <span class="hljs-string">&quot;this is string&quot;</span>; <span class="hljs-comment">// 类型是 &#x27;this is string&#x27;</span><br><span class="hljs-keyword">let</span> str2 = specifiedStr; <span class="hljs-comment">// 类型是 &#x27;string&#x27;</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">strFun2</span> = (<span class="hljs-params">str = specifiedStr</span>) =&gt; str; <span class="hljs-comment">// 类型是 (str?: string) =&gt; string;</span><br></code></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>语法：</p><ol><li>在&lt;&gt;里面写类型参数，一般用 T 来表示；</li><li>使用的时候有两种指定方式：<ul><li>定义要使用的类型</li><li>通过 TS 类型推断，自动推导类型</li></ul></li><li>泛型的作用是临时占位，之后通过传来的类型进行推导</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> print&lt;T&gt;(<span class="hljs-attr">arg</span>: T): T &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg);<br>  <span class="hljs-keyword">return</span> arg;<br>&#125;<br>print&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="基础操作符"><a href="#基础操作符" class="headerlink" title="基础操作符"></a>基础操作符</h2><ul><li>typeof:获取类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">sam</span>: <span class="hljs-title class_">Person</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Sem</span> = <span class="hljs-keyword">typeof</span> sam; <span class="hljs-comment">//type Sem = Person</span><br></code></pre></td></tr></table></figure><ul><li>keyof:获取所有键</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">K1</span> = keyof <span class="hljs-title class_">Person</span>; <span class="hljs-comment">//&quot;name&quot; | &quot;age&quot;</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">K2</span> = (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Person</span>)[]; <span class="hljs-comment">//&quot;length&quot; | &quot;toString&quot; | &quot;pop&quot; | &quot;push&quot; | &quot;concat&quot; | &quot;join&quot; |</span><br></code></pre></td></tr></table></figure><ul><li>in:遍历枚举类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Keys</span> = <span class="hljs-string">&quot;a&quot;</span> | <span class="hljs-string">&quot;b&quot;</span> | <span class="hljs-string">&quot;c&quot;</span>;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Obj</span> = &#123;<br>  [p <span class="hljs-keyword">in</span> <span class="hljs-title class_">Keys</span>]: <span class="hljs-built_in">any</span>;<br>&#125;; <span class="hljs-comment">//&#123;a:any,b:any,c:any&#125;</span><br></code></pre></td></tr></table></figure><ul><li>T[K]:索引访问</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">type1</span>: <span class="hljs-title class_">IPerson</span>[<span class="hljs-string">&quot;name&quot;</span>]; <span class="hljs-comment">//string</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">type2</span>: <span class="hljs-title class_">IPerson</span>[<span class="hljs-string">&quot;age&quot;</span>]; <span class="hljs-comment">//number</span><br></code></pre></td></tr></table></figure><ul><li>extends:泛型约束<br><img src="/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/extends.png" alt="extends"></li></ul><h2 id="常用工具类型"><a href="#常用工具类型" class="headerlink" title="常用工具类型"></a>常用工具类型</h2><ul><li>Partial<T>:将类型属性变为可选</li><li>Required<T>:将类型属性变成必选</li><li>Readonly<T>:将类型属性变成只读</li><li>Pick、Record…..</li></ul><p><img src="/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/tools.png" alt="tools"></p><h1 id="TS-实战例子"><a href="#TS-实战例子" class="headerlink" title="TS 实战例子"></a>TS 实战例子</h1><h2 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h2><ul><li>declare:三方库需要类型声明文件</li><li>.d.ts:声明文件定义</li><li>@types:第三方 TS 类型包</li><li>tsconfig.js:定义 TS 的配置</li></ul><h2 id="泛型约束后端接口类型"><a href="#泛型约束后端接口类型" class="headerlink" title="泛型约束后端接口类型"></a>泛型约束后端接口类型</h2><p><img src="/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/example.png" alt="例子"></p><p>推荐学习<a href="https://juejin.cn/post/7018805943710253086#heading-0">typescript 史上最强学习入门文章(2w 字)</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>武汉之行</title>
    <link href="/2023/05/03/%E6%AD%A6%E6%B1%89%E4%B9%8B%E8%A1%8C/"/>
    <url>/2023/05/03/%E6%AD%A6%E6%B1%89%E4%B9%8B%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>人真的多多多，酒店真的远远远；希望下次能避开大假期，酒店定的<del>贵一点</del>好一点</p></blockquote><h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><p>早上八点快九点的动车，5 点钟我就从学校出发了<br>昨天买的零食还丢在了车上，硬生生饿七个多小时到武汉<br><img src="../武汉之行/day1_station.JPG" alt="" width="500" height="300"><br>人多到 6 点排队吃小龙虾要排上 130 桌，换了一家偏僻角落的店铺才能吃上。<br><img src="../武汉之行/feifeixiazhuang.JPG" alt="肥肥虾庄" width="500" height="300"></p><p>吃完饭坐上了轮渡，一路坐到长江大桥桥下。<br><img src="../武汉之行/me_girlfriend.JPG" alt="轮渡上合照一张" width="500" height="300"><br>从船上看长江大桥不如在路上看<br><img src="../武汉之行/bridge0.JPG" alt="桥头小亭子" width="500" height="300"><br><img src="../武汉之行/bridge1.JPG" alt="长江大桥" width="500" height="300"></p><h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><p>来武汉听说不能不过早<br>兰陵路离我们酒店算最近的(一样很远)<br>武汉本地热干面真的和别的地方的武汉热干面不一样，香太多了。<br><img src="../武汉之行/guozao1.JPG" alt="热干面，烧卖，绿豆汤" width="500" height="500"><br>这家三鲜豆皮不好吃<br><img src="../武汉之行/guozao2.JPG" alt="三鲜豆皮" width="500" height="500"></p><p>下午去了古德寺，和以前去过的寺庙不太一样，带有点欧洲的风格。<br><img src="../武汉之行/gude.JPG" alt="古德寺" width="500" height="300"><br>一根 15，还不错的景区特色雪糕<br><img src="../武汉之行/gudexuegao.JPG" alt="古德寺特色雪糕" width="500" height="300"></p><p>本来打算再去长江大桥上看看日落，低估了我们的行进速度，美美的在路上看着太阳落下。<br><img src="../武汉之行/jianghang.JPG" alt="路经江汉桥" width="500" height="300"></p><p>而且今晚的人流量，少说也有昨天的 2 倍。大桥上黑压压的都是人，根本没法走。<br>想挤地铁回家，误打误撞挤到户部巷中。<br>扭头买个冰粉，直接堵在巷中出都出不来。<br><img src="../武汉之行/day2_night1.jpg" alt="就扭了个头买冰粉" width="500" height="300"></p><p>原来这边是拍黄鹤楼的绝美点，难怪挤死了<br><img src="../武汉之行/huanghelou.JPG" alt="封面来源" width="600" height="450"></p><h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><p>早上要换酒店，干脆睡吃一点，在酒店过早了<br><img src="../武汉之行/day3_m.JPG" alt="锅贴，热干面，绿豆汤米酒和燕麦豆浆" width="500" height="300"></p><p>下午去东湖，坐地铁转了无数个站，在下午太阳最大的时候来到了东湖<br>原来省博和省美术馆也在这里，可惜没预约也进不去<br><img src="../武汉之行/donhu1.JPG" alt="东湖" width="500" height="300"><br><img src="../武汉之行/donhu2.JPG" alt="屈原纪念馆" width="500" height="500"><br><img src="../武汉之行/donhu3.JPG" alt="美女在东湖" width="400" height="500"></p><p>挺讨厌吃饭要排队的，但楚采这家店上的快，价格便宜，主要是好吃，特别是虾和红烧肉。<br>可惜在五一踩着开门的时间去排队也得等上一个小时。<br><img src="../武汉之行/cha.JPG" alt="心心念念的茶颜悦色" width="300" height="300"><br><img src="../武汉之行/chucai1.JPG" alt="楚采的红烧肉" width="300" height="300"><br><img src="../武汉之行/chucai2.JPG" alt="楚采的虾" width="300" height="300"></p><p>吃完去中山公园散个步<br><img src="../武汉之行/zhongshan.JPG" alt="路过旋转木马" width="600" height="450"><br><img src="../武汉之行/together.JPG" alt="合照" width="600" height="390"></p><p>四天武汉之行就要结束咯</p><h1 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h1><p>下次车票订一个站，时间差不多，不然分开太痛苦了，又在车站等三个多小时才上车<br><img src="/2023/05/03/%E6%AD%A6%E6%B1%89%E4%B9%8B%E8%A1%8C/day4.jpg" alt="车票"><br>回到重庆太晚了，在学长的别墅留宿一晚</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>看来我俩旅游不适合特种兵玩法，就喜欢吃吃吃，不喜欢走走走<br>酒店别因为便宜就定在鸟不拉屎的地方，啥也没有打车费还高，加上打车费和位置好的酒店价格没差<br>人实在太多，大伙疫情关了 3 年，现在刚放开的一个小长假，出行人数简直爆炸，希望下次能避开高峰期</p>]]></content>
    
    
    <categories>
      
      <category>旅游</category>
      
    </categories>
    
    
    <tags>
      
      <tag>武汉</tag>
      
      <tag>玩!</tag>
      
      <tag>旅游</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解JS</title>
    <link href="/2023/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS/"/>
    <url>/2023/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS/</url>
    
    <content type="html"><![CDATA[<h1 id="JS-的基本概念"><a href="#JS-的基本概念" class="headerlink" title="JS 的基本概念"></a>JS 的基本概念</h1><h2 id="JS-中的数据类型"><a href="#JS-中的数据类型" class="headerlink" title="JS 中的数据类型"></a>JS 中的数据类型</h2><p>JS 中的数据类型分为对象和基础类型</p><p>JS 中的对象有数组,函数</p><p>基础类型有字符串,undefined,数字,null,sympol,bigint,布尔</p><h2 id="JS-中的基本概念-作用域"><a href="#JS-中的基本概念-作用域" class="headerlink" title="JS 中的基本概念-作用域"></a>JS 中的基本概念-作用域</h2><p>变量的可访问性和可见性</p><p>静态作用域，通过它就能预测代码在执行过程中如何查找标识符<br><img src="/2023/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS/area.png" alt="作用域"></p><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><ul><li><p>var 有变量提升</p></li><li><p>let,const 没有变量提升,提前访问会报错</p></li><li><p>function 函数可以先调用，再定义</p></li><li><p>赋值给变量的函数无法提前调用</p></li></ul><h1 id="JS-的执行"><a href="#JS-的执行" class="headerlink" title="JS 的执行"></a>JS 的执行</h1><p>当 JS 引擎解析到可执行代码片段(通常是函数调用)的时候，就会先做一些执行前的准备工作，这个准备工作就叫做<strong>执行上下文</strong><br><img src="/2023/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS/execution-context.png" alt="执行上下文"></p><p><strong>全局上下文：</strong><br>代码开始执行的时候就会创建，将他压执行栈的栈底</p><p><strong>函数执行上下文：</strong><br>当执行一个函数的时候，这个函数内的代码就会被编译，生成变量环境，词法环境等，当函数执行完毕的时候该执行环境从栈顶弹出</p><ul><li><p>词法环境：基于 ECMAScript 代码的词法嵌套结构来定义标识符和具体变量和函数的关联，一个词法环境由环境记录器和一个可能的引用外部词法环境的空值组成</p></li><li><p>变量环境：变量环境和词法环境不同的就是前者用于储存函数声明和变量(let,const)绑定，后者只用来储存 var 变量绑定</p></li><li><p>Outer:指向外部变量环境的一个指针</p></li></ul><h1 id="JS-的进阶知识点"><a href="#JS-的进阶知识点" class="headerlink" title="JS 的进阶知识点"></a>JS 的进阶知识点</h1><h2 id="JS-的-this"><a href="#JS-的-this" class="headerlink" title="JS 的 this"></a>JS 的 this</h2><p>可以查看<a href="/2023/04/15/JS%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%A5%E9%97%A8%E9%9A%BE%E7%82%B9/index.html">JS 的一些入门难点</a></p><h2 id="JS-的闭包"><a href="#JS-的闭包" class="headerlink" title="JS 的闭包"></a>JS 的闭包</h2><p>当你的函数 a 返回了一个函数 b，并且返回的这个函数 b 中带有函数 a 的变量，那么这个操作就叫做闭包<br>本来一个函数执行完就会被回收以免占用空间，但通过闭包能使函数即使被回收了也能引用内部的变量<br>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> a0 = <span class="hljs-string">&quot;闭包&quot;</span>;<br>  <span class="hljs-keyword">const</span> a1 = <span class="hljs-string">&quot;xxx&quot;</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a0);<br>    <span class="hljs-keyword">return</span> a1; <span class="hljs-comment">//形成闭包</span><br>  &#125;;<br>&#125;<br><span class="hljs-keyword">let</span> c = <span class="hljs-title function_">a</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">c</span>()); <span class="hljs-comment">//xxx</span><br></code></pre></td></tr></table></figure><p>即使 a 执行完被回收了，内部的 a1 依旧能被引用</p><h2 id="JS-的回收机制"><a href="#JS-的回收机制" class="headerlink" title="JS 的回收机制"></a>JS 的回收机制</h2><p>JS 中的内存回收分为两个部分，一个是新生代，存放小的变量等体积小的文件，一个是老生代，放大体积的文件<br>新生代的内存回收是先标记常用的内容，然后复制一份，反转到空闲区域，统一删除，最后留下标记的复制的对象<br>老生代就是直接进行标记，然后删除，最后在进行内存处理<br><img src="/2023/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS/rubbish.png" alt="rubbish"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解CSS</title>
    <link href="/2023/04/25/%E7%90%86%E8%A7%A3CSS/"/>
    <url>/2023/04/25/%E7%90%86%E8%A7%A3CSS/</url>
    
    <content type="html"><![CDATA[<p>CSS - Cascading Style Sheets<br>中文名 层叠样式表</p><h1 id="01-层叠，优先级"><a href="#01-层叠，优先级" class="headerlink" title="01 层叠，优先级"></a>01 层叠，优先级</h1><p>优先程度：样式表来源 &gt; 选择器优先级 &gt; 源码位置</p><h2 id="样式表来源"><a href="#样式表来源" class="headerlink" title="样式表来源"></a>样式表来源</h2><p>用户代理样式表(浏览器默认样式) &lt; 用户样式表(很少) &lt; 作者样式表(我们写的 css) &lt; 作者样式表里的!important &lt; 用户样式表里的!important &lt; 用户代理样式表的!important</p><h2 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h2><p>内联 &gt; id &gt; class &gt; type</p><h2 id="源码位置"><a href="#源码位置" class="headerlink" title="源码位置"></a>源码位置</h2><p>css 表中写在后面的会覆盖前面的 css 样式，css 从上向下读</p><blockquote><p>注意：<br>选择器少用 id<br>尽量不要用!important<br>自己的样式加载在引用库后面</p></blockquote><h1 id="02-布局"><a href="#02-布局" class="headerlink" title="02 布局"></a>02 布局</h1><h2 id="常规流布局"><a href="#常规流布局" class="headerlink" title="常规流布局"></a>常规流布局</h2><p>常规流布局分为块级(block)和内联(inline)</p><h3 id="块级格式化上下文-BFC"><a href="#块级格式化上下文-BFC" class="headerlink" title="块级格式化上下文(BFC)"></a>块级格式化上下文(BFC)</h3><p>如果说一个盒子是 BFC 布局，那么这个盒子的内部就会形成一个新的块级格式化上下文<br>如何触发一个盒子的 BFC 特性：</p><ul><li>display: flow-root | inline-block</li><li>position:absolout | fixed</li><li>float:不为 none</li><li>overflow:不为 visible</li></ul><p><strong>外边距塌陷问题</strong></p><ul><li>消除外边距塌陷的问题就是将父元素设置为 BFC</li><li>在元素之间设置 border,padding 或者内联元素</li></ul><h3 id="内联格式化上下文"><a href="#内联格式化上下文" class="headerlink" title="内联格式化上下文"></a>内联格式化上下文</h3><p><strong>单行文字居中</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CSS">&lt;<span class="hljs-selector-tag">div</span> class=&quot;title&quot;&gt;标题&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><span class="hljs-selector-class">.title</span>&#123;<br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">18px</span>;<br>    <span class="hljs-attribute">line-height</span> :<span class="hljs-number">36px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">36px</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>让 line-height 等于 font-size 的两倍</p><p><strong>文字与 icon 垂直对齐</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span><br>  class=&quot;wrap&quot;<br>  &gt; &lt;<span class="hljs-selector-tag">img</span><br>  class=&quot;image&quot;<br>  scr=&quot;dy<span class="hljs-selector-class">.png</span>&quot;<br>  &gt; &lt;<span class="hljs-selector-tag">span</span><br>  class=&quot;text&quot;<br>  &gt; 抖音同款能力&lt;/<span class="hljs-selector-tag">span</span><br>  &gt; &lt;/<span class="hljs-selector-tag">div</span><br>  &gt; <span class="hljs-selector-class">.image</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br><span class="hljs-selector-class">.text</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个不是<strong>完全垂直对齐</strong>，设置父元素的 font-size:0，则基线和中线对齐，则居中对齐</p><h2 id="弹性盒子布局"><a href="#弹性盒子布局" class="headerlink" title="弹性盒子布局"></a>弹性盒子布局</h2><p>利用 flex</p><h2 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h2><p>利用 Grid 布局</p><h2 id="Grid-和-Flex-布局的使用策略"><a href="#Grid-和-Flex-布局的使用策略" class="headerlink" title="Grid 和 Flex 布局的使用策略"></a>Grid 和 Flex 布局的使用策略</h2><ol><li>大面积或整体布局 推荐 Grid</li><li>小面积或者组件利用 Flex 布局</li></ol><h2 id="Position-定位"><a href="#Position-定位" class="headerlink" title="Position 定位"></a>Position 定位</h2><ul><li>relative</li><li>absolute</li><li>fixed</li><li>sticky</li></ul><h3 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h3><p>元素相对它的最近滚动祖先(祖先的 overflow 是 scroll/hidden/auto)的视口(scrollport)定位</p><!-- ![Sticky](../images/sticky.png) --><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/sticky.png" class=""><h1 id="03-层叠上下文"><a href="#03-层叠上下文" class="headerlink" title="03 层叠上下文"></a>03 层叠上下文</h1><p>层叠上下文是对 Html 元素的三维构想，将元素沿着垂直屏幕的虚构的 Z 轴排开</p><h2 id="形成新的层叠上下文的条件-任一即可-："><a href="#形成新的层叠上下文的条件-任一即可-：" class="headerlink" title="形成新的层叠上下文的条件(任一即可)："></a>形成新的层叠上下文的条件(任一即可)：</h2><ul><li>position:relative 或者 absolute 并且 z-index 不是 auto</li><li>position:fixed 或者 sticky</li><li>flex 或者 grid 的子元素 并且 z-index 不是 auto</li><li>opacity 的值小于 1</li><li>transform 的值不为 none</li><li>will-change 的值不为通用值<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context">形成新的层叠上下文的 MDN 介绍</a></li></ul><h2 id="层叠顺序"><a href="#层叠顺序" class="headerlink" title="层叠顺序"></a>层叠顺序</h2><p>层叠顺序不仅指不同的层叠上下文的顺序，同一层叠上下文内，元素间也有顺序：<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/stack_order.png" alt="stack-order"></p><p><strong>编写 z-index 的建议：</strong></p><ol><li>使用 CSS 变量或者预处理语言的变量来管理 z-index 的值</li><li>预设间隔设置成 10 或 100，方便后续的插入</li></ol><h1 id="04-变形，过渡，动画"><a href="#04-变形，过渡，动画" class="headerlink" title="04 变形，过渡，动画"></a>04 变形，过渡，动画</h1><h2 id="transform-变形"><a href="#transform-变形" class="headerlink" title="transform 变形"></a>transform 变形</h2><p>2D 相关属性：</p><ul><li><p>transform : translate(移动),rotate(旋转),scale(放缩),matrix(变形矩阵)</p></li><li><p>transform-origin : right,top,center 等，表示变形时依据的原点</p></li></ul><p><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/transform-2D.png" alt="例子"></p><p>3D 相关属性：</p><ul><li>transform : translate3D(移动),rotate3D(旋转),scale3D(放缩),matrix3D(变形矩阵)</li><li>transform-origin : right,30px,50px,center 等，表示变形时依据的原点</li><li>transform-style : flat 或 preserve-3d 看子元素的 3D 表现</li><li>perspective : 观看点距离 z=0 这个平面的距离</li><li>perspective-rigin : 观看者的位置，如 top，bottom 等</li><li>backface-visibility : 元素正面只有朝向观察者的时候可见</li></ul><p>两个 3D 的例子：<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/exampleA.png" alt="例A"><br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/exampleB.png" alt="例B"></p><h2 id="transition-过渡"><a href="#transition-过渡" class="headerlink" title="transition 过渡"></a>transition 过渡</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">transition</span>: &lt;property&gt;&lt;duration&gt;&lt;timing-function&gt;&lt;delay&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 timing-function 一般有三种用法：线性(linear),贝塞尔曲线(cubic-bezier),阶跃(step)<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/exampleC.png" alt="例C"></p><h2 id="animation-动画"><a href="#animation-动画" class="headerlink" title="animation 动画"></a>animation 动画</h2><p>相关属性：<br>animation-name 定义好的关键帧名字<br>animation-duration 动画时长<br>animation-timing-function 动画节奏<br>animation-delay 延时开始的时间<br>animation-ieration-count 执行次数<br>animation-direction 是否反向或者交替<br>animation-fill-mode 动画执行前后的样式采用<br>animation-play-state 动画运行状态<br><a href="https://animate.style/">一个动画库</a></p><h2 id="transform-transition-animation-性能相关"><a href="#transform-transition-animation-性能相关" class="headerlink" title="transform,transition,animation 性能相关"></a>transform,transition,animation 性能相关</h2><p>如何写动画性能更好：</p><ol><li>尽量不用触发 reflow 的属性</li><li>遇到性能问题时可以触发硬件加速，如设置 will-change,设置 transform3D</li><li>尽量使用 transform 和 opacity 去写动画</li></ol><h1 id="05-响应式设计"><a href="#05-响应式设计" class="headerlink" title="05 响应式设计"></a>05 响应式设计</h1><ol><li>优先选用流式布局，如百分比，flex，grid 等</li><li>使用响应式图片，匹配尺寸</li><li>使用媒体查询为不同设备类型做适配</li><li>给移动端设备设置简单，统一的视口</li><li>使用相对长度，如 em，rem，vw 做为长度度量</li></ol><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p>媒体查询允许某些样式只在页面满足特定条件时生效，我们可以将媒体类型以及媒体特性作为约束条件<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/media.png" alt="media"></p><h2 id="设备像素，参考像素和移动设备视口"><a href="#设备像素，参考像素和移动设备视口" class="headerlink" title="设备像素，参考像素和移动设备视口"></a>设备像素，参考像素和移动设备视口</h2><h3 id="设备像素"><a href="#设备像素" class="headerlink" title="设备像素"></a>设备像素</h3><p><strong>设备像素：</strong><br>设备像素就是物理像素：显示屏上绘制的最小单位</p><h3 id="DPI-amp-amp-PPI"><a href="#DPI-amp-amp-PPI" class="headerlink" title="DPI&amp;&amp;PPI"></a>DPI&amp;&amp;PPI</h3><p>dpi:每英寸多少点<br>ppi:每英寸多少像素数<br>当用于描述显示器设备的时候，ppi 等于 dpi<br>ppi 的计算公式:<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/ppi.png" alt="ppi"></p><h3 id="CSS-像素："><a href="#CSS-像素：" class="headerlink" title="CSS 像素："></a>CSS 像素：</h3><p>css 像素指的是视角单位<br>css 像素不等于设备像素</p><p>浏览器根据硬件设备直接获取的 css 像素</p><h3 id="DPR-设备像素比"><a href="#DPR-设备像素比" class="headerlink" title="DPR 设备像素比"></a>DPR 设备像素比</h3><p>DPR = 设备像素/CSS 像素<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/dpr.png" alt="dpr"></p><h3 id="移动端的-viewport"><a href="#移动端的-viewport" class="headerlink" title="移动端的 viewport"></a>移动端的 viewport</h3><p>布局视口(viewport)是页面 html 元素的包含块，默认情况下可以用 window.document.documentElement.clientWidth 就是 viewport。<br>在移动设备中，默认的布局视口由于历史兼容 pc 屏幕的原因，并不符合需求，所以我们需要用<meta>标签对 viewport 进行设定，来完成移动端的适配。</p><p>meta 标签的属性：</p><ul><li>width</li><li>height</li><li>initial-scale</li><li>minimum-scale</li><li>maximum-scale</li><li>user-scalable</li></ul><p>常见的移动端的 viewport 的设置 1.保存 scale 为 1<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,inital-scale=1&quot;&gt;</code><br>这样设置的好处是：让布局视口宽度和设备屏幕的宽度一样，完成适配<br>坏处在于对于 dpr&gt;1 的设备，没法实现真实设备像素</p><p>2.保持 scale 放缩参数是 1/dpr<br><code>const calScale = 1/window.devicePixeRation</code><br><code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=calScale&gt;</code><br>maximum-scale=calScale,minimun-scale=calScale,user-scalable=no”&gt;<br>这样的好处是实现了真实的设备像素，1css 像素等于 1 设备像素<br>不好的在于不同设备想达到一个 csspx 严格等于一设备像素，需要处理兼容性，而且全局等比例放缩，对于某些固定尺寸要特殊处理</p><h2 id="相对长度"><a href="#相对长度" class="headerlink" title="相对长度"></a>相对长度</h2><h3 id="em："><a href="#em：" class="headerlink" title="em："></a>em：</h3><ul><li>在非 font-size 属性中使用是相对于自身的字体大小</li><li>在 font-size 上使用是相对于父元素的字体大小(一般不用于 font-size)<br>运用场景：可以让展示区域根据展示字号的不同，做出放缩调整<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/em0.png" alt="em"><br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/em1.png" alt="em"></li></ul><h3 id="rem"><a href="#rem" class="headerlink" title="rem:"></a>rem:</h3><p>rem:根元素的字体大小，不会像 em 根据父元素导致多重嵌套</p><p>运用例子：<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/rem.png" alt="rem"></p><h3 id="vw-和-vh"><a href="#vw-和-vh" class="headerlink" title="vw 和 vh"></a>vw 和 vh</h3><p>vw：视窗高度的 1%<br>vh：视窗高度的 1%<br>运用例子:<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/vhvw.png" alt="vhvw"></p><h1 id="06-CSS-生态"><a href="#06-CSS-生态" class="headerlink" title="06 CSS 生态"></a>06 CSS 生态</h1><h2 id="语言增强-css-预处理器"><a href="#语言增强-css-预处理器" class="headerlink" title="语言增强-css 预处理器"></a>语言增强-css 预处理器</h2><p><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/chuli.png" alt="预处理器"></p><h2 id="工程架构-css-模块化"><a href="#工程架构-css-模块化" class="headerlink" title="工程架构-css 模块化"></a>工程架构-css 模块化</h2><p>防止 css 全局污染的问题的解决方案：</p><ol><li>BEM 命名<br>通过.block_element–modifier 这种命名方案规范来约束开发者，从而达到样式隔离<br><img src="/BEN.png" alt="BEM"></li><li>vue-loader 的 scoped 方案<br>通过编译的方式，在 html 元素上添加 data-xx 的唯一属性，然后利用 css 增加选择器[data-xx]的方式实现样式隔离<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/scoped.png" alt="scoped"></li><li>CSS Modules<br>也是通过编译的方式，将一个 css file 中的样式命名默认转化为一个全局唯一的名称，实现样式隔离(常用 css-loader 或者 postcss-module)<br><a href="https://github.com/css-modules/css-modules">css-module</a><br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/css-module.png" alt="css-module"></li></ol><p>还有 css in js 以及原子化 css 等 css 工程化内容，就不一一介绍了，有需要可以查阅相关资料<br><a href="https://tailwindui.com/">css 原子化的库</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程范式</title>
    <link href="/2023/04/18/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/"/>
    <url>/2023/04/18/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>编程语言分为四大类：</p><ul><li>面向过程（代表：C）</li><li>面向对象（代表：java）</li><li>函数式编程（代表：lisp）</li><li>多范式编程（代表：JavaScript）</li></ul><h2 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h2><p>不讲，太简单</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>特点：</p><ol><li>封装</li><li>继承</li><li>多态</li><li><strong>依赖注入</strong></li></ol><p>1 2 3 点都老生常谈的内容了，主要是记一下第四点</p><h3 id="依赖注入："><a href="#依赖注入：" class="headerlink" title="依赖注入："></a>依赖注入：</h3><p>面向对象的依赖注入是一种设计模式，它的核心思想是将对象之间的依赖关系从代码中解耦出来，以便更容易地进行测试、维护和修改。</p><p>依赖注入的基本概念是将一个对象所依赖的其他对象通过构造函数、属性或方法参数等方式注入到这个对象中，而不是在这个对象的代码内部直接创建或引用这些依赖关系。这种方式使得对象之间的依赖关系更加松散，使得代码更加灵活、可测试和可维护。</p><p>这是一个 JS 的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义依赖关系</span><br><span class="hljs-keyword">var</span> dependency = &#123;<br>  <span class="hljs-attr">doSomethingElse</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;这是一个依赖关系&quot;</span>);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// 定义需要依赖注入的对象</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">MyClass</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">dependency</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">dependency</span> = dependency;<br>&#125;;<br><br><span class="hljs-comment">// 在对象的原型中定义一个方法，使用依赖关系</span><br><span class="hljs-title class_">MyClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">doSomething</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">dependency</span>.<span class="hljs-title function_">doSomethingElse</span>();<br>&#125;;<br><br><span class="hljs-comment">// 创建一个 MyClass 对象，并传递依赖关系</span><br><span class="hljs-keyword">var</span> myClass = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>(dependency);<br><br><span class="hljs-comment">// 使用 MyClass 对象调用 doSomething 方法，它将调用依赖关系的 doSomethingElse 方法</span><br>myClass.<span class="hljs-title function_">doSomething</span>();<br></code></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个依赖关系对象 dependency，它有一个 doSomethingElse 方法。然后我们定义了一个 MyClass 类，它需要一个 dependency 依赖关系对象。我们在 MyClass 类的原型中定义了一个 doSomething 方法，使用依赖关系对象执行一些操作。最后，我们创建了一个 MyClass 实例，并将依赖关系对象传递给它。我们调用 myClass 的 doSomething 方法，它将使用依赖关系对象的 doSomethingElse 方法。</p><p>如果在传统的编程中，每个组件通常会直接实例化其所依赖的对象，并调用该对象的方法来完成某个操作。这种做法使得组件之间的依赖关系非常紧密，如果一个组件需要修改其依赖的对象或者添加一个新的依赖关系，那么就需要修改这个组件的代码，这可能会导致代码的不稳定和难以维护。</p><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><ul><li>函数是“第一公民”</li><li>纯函数/无副作用</li><li>高阶函数/闭包</li></ul><h3 id="纯函数的优势："><a href="#纯函数的优势：" class="headerlink" title="纯函数的优势："></a>纯函数的优势：</h3><ul><li>可缓存</li><li>可移植</li><li>可测试</li><li>可推理</li><li>可并行</li></ul><h3 id="Curring"><a href="#Curring" class="headerlink" title="Curring"></a>Curring</h3><p>柯里化</p><blockquote><p>出门右转 JS 入门难题</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6</title>
    <link href="/2023/04/16/ES6/"/>
    <url>/2023/04/16/ES6/</url>
    
    <content type="html"><![CDATA[<h1 id="第一节-ES6-比较重要的部分"><a href="#第一节-ES6-比较重要的部分" class="headerlink" title="第一节-ES6 比较重要的部分"></a>第一节-ES6 比较重要的部分</h1><h2 id="1-解构赋值"><a href="#1-解构赋值" class="headerlink" title="1.解构赋值"></a>1.解构赋值</h2><p><em>无论是数组还是对象还是字符串，甚至于 json 格式的文件，都可以通过 ES6 新增的解构赋值的方式来将所需要的内容提起出来</em></p><h3 id="1-1-数组的解构赋值"><a href="#1-1-数组的解构赋值" class="headerlink" title="1.1 数组的解构赋值"></a>1.1 数组的解构赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a0 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> b0 = <span class="hljs-number">2</span>; <span class="hljs-comment">//在ES6之前的写法</span><br><span class="hljs-keyword">let</span> [a1, b1] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]; <span class="hljs-comment">//ES6后提供的解构，a=1，b=2</span><br></code></pre></td></tr></table></figure><p>这种写法叫做模式匹配，只要等号俩边的模式相同，左边的变量就会被赋予相同的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [[i], j, [[k]]] = [[<span class="hljs-number">1</span>], <span class="hljs-number">2</span>, [[<span class="hljs-number">3</span>]]]; <span class="hljs-comment">//同样也可以解构赋值</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [, , a] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <span class="hljs-comment">//a = 3</span><br><span class="hljs-keyword">let</span> [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]; <span class="hljs-comment">//c = undefind</span><br><span class="hljs-keyword">let</span> [a = <span class="hljs-number">1</span>, b] = [<span class="hljs-number">2</span>]; <span class="hljs-comment">// a=1,b=2</span><br><span class="hljs-keyword">let</span> [a, b = <span class="hljs-number">2</span>] = [<span class="hljs-number">3</span>, undefind]; <span class="hljs-comment">// a = 3 b = 2</span><br></code></pre></td></tr></table></figure><p>解构赋值同样也允许默认值</p><h3 id="1-2-对象的解构赋值"><a href="#1-2-对象的解构赋值" class="headerlink" title="1.2 对象的解构赋值"></a>1.2 对象的解构赋值</h3><p><em>对象的解构与数组的解构最大的不同在于对象不需要左右两边一样的次序</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123; a, b &#125; = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">3</span> &#125;; <span class="hljs-comment">//a = 1 b = 3</span><br><span class="hljs-keyword">let</span> &#123; b, a &#125; = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">3</span> &#125;; <span class="hljs-comment">// a = 1 b = 3</span><br></code></pre></td></tr></table></figure><p>如果解构失败同样也是 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123;a&#125; = &#123;b = <span class="hljs-string">&#x27;正确&#x27;</span>&#125; <span class="hljs-comment">// a = undefined</span><br></code></pre></td></tr></table></figure><p>一样存在默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123;a,<span class="hljs-attr">b</span>:<span class="hljs-string">&#x27;默认&#x27;</span>&#125; = &#123;<span class="hljs-attr">a</span>:<span class="hljs-string">&#x27;非默认&#x27;</span>&#125; <span class="hljs-comment">// a = &#x27;非默认&#x27;，b = &#x27;默认&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-字符串的解构"><a href="#1-3-字符串的解构" class="headerlink" title="1.3 字符串的解构"></a>1.3 字符串的解构</h3><p>字符串也可以结构，这时字符串被转化为了一个类数组对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [a, b, c, d, f] = <span class="hljs-string">&quot;Hello&quot;</span>; <span class="hljs-comment">// a=H,b=e,c=l.d=l,f=o</span><br></code></pre></td></tr></table></figure><p>类似数组的对象还有一个 len 的属性，同样也可以对其解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">length</span>: len &#125; = <span class="hljs-string">&quot;Hello&quot;</span>; <span class="hljs-comment">//length = 5</span><br></code></pre></td></tr></table></figure><h3 id="1-4-函数的参数进行的解构"><a href="#1-4-函数的参数进行的解构" class="headerlink" title="1.4 函数的参数进行的解构"></a>1.4 函数的参数进行的解构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">[x, y]</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br>add[(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)]; <span class="hljs-comment">// 30</span><br></code></pre></td></tr></table></figure><p>上面那段代码中虽然 add 函数的参数是数组，但是传入参数的那一刻数组就被解构成变量 x 和 y 了，函数内部就只能感受到 x 和 y</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo0</span>(<span class="hljs-params">[x, y]</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-title function_">demo0</span>([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>]); <span class="hljs-comment">//30</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo1</span>(<span class="hljs-params">[x, y = <span class="hljs-number">20</span>]</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-title function_">demo1</span>([<span class="hljs-number">10</span>]); <span class="hljs-comment">// 30</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo2</span>(<span class="hljs-params">x = <span class="hljs-number">10</span>, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-title function_">demo2</span>(<span class="hljs-number">20</span>); <span class="hljs-comment">// 30</span><br></code></pre></td></tr></table></figure><h3 id="1-5-解构赋值的用途"><a href="#1-5-解构赋值的用途" class="headerlink" title="1.5 解构赋值的用途"></a>1.5 解构赋值的用途</h3><h4 id="1-5-1-交换变量的值"><a href="#1-5-1-交换变量的值" class="headerlink" title="1.5.1 交换变量的值"></a>1.5.1 交换变量的值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> y = ((<span class="hljs-number">2</span>)[(x, y)] = [y, x]); <span class="hljs-comment">//x = 2,y = 1</span><br></code></pre></td></tr></table></figure><h4 id="1-5-2-对-JSON-对象数据的提取"><a href="#1-5-2-对-JSON-对象数据的提取" class="headerlink" title="1.5.2 对 JSON 对象数据的提取"></a>1.5.2 对 JSON 对象数据的提取</h4><p><em>解构赋值对 JSON 对象的数据提取尤为有用，特别在于网络请求返回的数据</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> jsonData = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;200&quot;</span>,<br>  <span class="hljs-attr">data</span>: [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>],<br>&#125;;<br><span class="hljs-keyword">let</span> &#123; id, status, <span class="hljs-attr">data</span>: number &#125; = jsonData; <span class="hljs-comment">// id = 1,status=&#x27;200&#x27;,number = [100,200]</span><br></code></pre></td></tr></table></figure><h2 id="2-字符串的扩展"><a href="#2-字符串的扩展" class="headerlink" title="2.字符串的扩展"></a>2.字符串的扩展</h2><h3 id="2-1-字符串的-Unicode-表示法"><a href="#2-1-字符串的-Unicode-表示法" class="headerlink" title="2.1 字符串的 Unicode 表示法"></a>2.1 字符串的 Unicode 表示法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;\u0061&quot;</span>; <span class="hljs-comment">// a</span><br></code></pre></td></tr></table></figure><h3 id="2-2-字符串的遍历接口"><a href="#2-2-字符串的遍历接口" class="headerlink" title="2.2 字符串的遍历接口"></a>2.2 字符串的遍历接口</h3><p><em>ES6 为字符串都提供了遍历器接口，使得字符串可以用 for of 循环遍历</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> codePoint <span class="hljs-keyword">of</span> <span class="hljs-string">&quot;foo&quot;</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(codePoint);<br>&#125; <span class="hljs-comment">//&#x27;f&#x27; &#x27;o&#x27; &#x27;o&#x27;</span><br></code></pre></td></tr></table></figure><p>同样这个方法也可以用来遍历大于 0xFFFF 的码点</p><h3 id="2-3-模板字符串"><a href="#2-3-模板字符串" class="headerlink" title="2.3 模板字符串"></a>2.3 模板字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;YY&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`这篇文章的作者是<span class="hljs-subst">$&#123;name&#125;</span>`</span>); <span class="hljs-comment">// 这篇文章的作者是YY</span><br></code></pre></td></tr></table></figure><p>并且这个模板字符串可以换行写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">`随便</span><br><span class="hljs-string">换行</span><br><span class="hljs-string">写`</span>;<br></code></pre></td></tr></table></figure><h3 id="2-4-新增的字符串方法"><a href="#2-4-新增的字符串方法" class="headerlink" title="2.4 新增的字符串方法"></a>2.4 新增的字符串方法</h3><ul><li>**includes()**：返回布尔值，表示是否找到了参数字符串。</li><li>**startsWith()**：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li>**endsWith()**：返回布尔值，表示参数字符串是否在原字符串的尾部。</li><li><strong>repeat()</strong>: 方法返回一个新字符串，表示将原字符串重复 n 次</li><li><strong>padStart(),padEnd()</strong>: 头尾补全字符</li><li><strong>trimStart(),trimEnd()</strong>:头尾删去空格 <em>用于搜索删去空格不错</em></li></ul><h2 id="3-数组扩展"><a href="#3-数组扩展" class="headerlink" title="3.数组扩展"></a>3.数组扩展</h2><h3 id="3-1-Rest-参数和-Spread-语法（利用三个点…）"><a href="#3-1-Rest-参数和-Spread-语法（利用三个点…）" class="headerlink" title="3.1 Rest 参数和 Spread 语法（利用三个点…）"></a>3.1 Rest 参数和 Spread 语法（利用三个点…）</h3><p>Rest 参数就是把剩余的参数收集到一个数组中<br>Spread 就是把数组中的内容张开</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = （...args） =&gt;&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args)<br>&#125;<br><span class="hljs-title function_">a</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>) <span class="hljs-comment">//[1,2,3,4,5]</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]); <span class="hljs-comment">//1,2,3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...<span class="hljs-string">&quot;123456&quot;</span>); <span class="hljs-comment">//1,2,3,4,5,6</span><br></code></pre></td></tr></table></figure><h4 id="3-1-1Rest-和-Spread-应用"><a href="#3-1-1Rest-和-Spread-应用" class="headerlink" title="3.1.1Rest 和 Spread 应用"></a>3.1.1Rest 和 Spread 应用</h4><ol><li>复制和修改</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> arr2 = [...a];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2);<br><br><span class="hljs-keyword">const</span> obj1 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;;<br><span class="hljs-keyword">const</span> obj2 = &#123; ...obj1 &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj2); <span class="hljs-comment">// &#123;name:&#x27;小明&#x27;,age:18&#125;</span><br><span class="hljs-comment">// 修改数据</span><br><span class="hljs-keyword">const</span> obj3 = &#123; ...obj1, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;man&quot;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj3); <span class="hljs-comment">// &#123; name: &#x27;jack&#x27;, age: 18, gender: &#x27;man&#x27; &#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>合并数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ES6 之前</span><br><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> b = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">const</span> c = a.<span class="hljs-title function_">concat</span>(b); <span class="hljs-comment">// [1,2,3,1,5,6]</span><br><br><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, obj1, obj2); <span class="hljs-comment">// &#123;a:1,b:1&#125;</span><br><br><span class="hljs-comment">// ES6 之后</span><br><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> b = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-comment">// new Set()，用于数组去重</span><br><span class="hljs-keyword">const</span> c = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([...a, ...b])]; <span class="hljs-comment">// [1,2,3,5,6]</span><br><br><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> obj = &#123; ...obj1, ...obj2 &#125;; <span class="hljs-comment">// &#123;a:1,b:1&#125;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>与解构赋值结合</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">const</span> [a, ...arr2] = arr;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2); <span class="hljs-comment">// [2,3,4]</span><br></code></pre></td></tr></table></figure><h3 id="3-2-数组的扩展方法"><a href="#3-2-数组的扩展方法" class="headerlink" title="3.2 数组的扩展方法"></a>3.2 数组的扩展方法</h3><ul><li>Array.from():将类数组转化为真实的数组</li><li>Array.of():将一组值，转化为数组</li><li>copyWithin():将指定位置的成员复制到指定位置，会改变原数组</li><li>find()和 findIndex(): 找符合条件的数组成员</li><li>fill():使用一个定值，填充一个数组</li></ul><h2 id="4-对象的扩展"><a href="#4-对象的扩展" class="headerlink" title="4.对象的扩展"></a>4.对象的扩展</h2><h3 id="4-1-对象的简洁表达"><a href="#4-1-对象的简洁表达" class="headerlink" title="4.1 对象的简洁表达"></a>4.1 对象的简洁表达</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 变量简洁表示</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> b = &#123; a &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b); <span class="hljs-comment">// &#123;a:10&#125;</span><br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">const</span> c = &#123; <span class="hljs-attr">a</span>: a &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c); <span class="hljs-comment">// &#123;a:10&#125;</span><br><br><span class="hljs-comment">// 方法的简洁表示</span><br><span class="hljs-keyword">const</span> dog = &#123;<br>  <span class="hljs-title function_">speak</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;wang wang&quot;</span>);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">const</span> dog1 = &#123;<br>  <span class="hljs-attr">speak</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;wang wang&quot;</span>);<br>  &#125;,<br>&#125;;<br><br>dog.<span class="hljs-title function_">speak</span>(); <span class="hljs-comment">// &quot;wang wang&quot;</span><br>dog1.<span class="hljs-title function_">speak</span>(); <span class="hljs-comment">// &quot;wang wang&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-用字面量定义对象"><a href="#4-2-用字面量定义对象" class="headerlink" title="4.2 用字面量定义对象"></a>4.2 用字面量定义对象</h3><p><em>在 ES6 之前不能用变量表示对象的 key</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 对象属性的定义</span><br><span class="hljs-keyword">const</span> stu = &#123;&#125;;<br>stu.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;yang&quot;</span>; <span class="hljs-comment">// 方法一</span><br>stu[<span class="hljs-string">&quot;age&quot;</span>] = <span class="hljs-number">18</span>; <span class="hljs-comment">// 方法二</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu); <span class="hljs-comment">// &#123; name: &#x27;yang&#x27;, age: 18 &#125;</span><br><br><span class="hljs-comment">// 使用字面量定义，ES6之前，只能使用方法一进行,也就是不能让对象的key是一个变量</span><br><span class="hljs-keyword">const</span> stu2 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jie&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;;<br><br><span class="hljs-comment">// ES6之后允许我们通过方法二进行对象字面量的定义</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-string">&quot;age&quot;</span>;<br><span class="hljs-keyword">const</span> stu3 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cao&quot;</span>,<br>  [a]: <span class="hljs-number">18</span>,<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu3); <span class="hljs-comment">// &#123; name: &#x27;cao&#x27;, age: 18 &#125;</span><br><br><span class="hljs-comment">// 遍历输出</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> stu3) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu3[i]);<br>&#125; <span class="hljs-comment">// cao 18</span><br></code></pre></td></tr></table></figure><h2 id="5-Set-数据类型"><a href="#5-Set-数据类型" class="headerlink" title="5.Set 数据类型"></a>5.Set 数据类型</h2><h3 id="5-1-基本用法"><a href="#5-1-基本用法" class="headerlink" title="5.1 基本用法"></a>5.1 基本用法</h3><p>Set 结构类似数组，但其中所有成员的值都是唯一的，没有重复的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> s.<span class="hljs-title function_">add</span>(x));<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> s) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>&#125;<br><span class="hljs-comment">// 2 3 5 4</span><br></code></pre></td></tr></table></figure><p>Set 函数可以接受一个数组或者类数组作为参数用来初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 例一</span><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]);<br>[...set];<br><span class="hljs-comment">// [1, 2, 3, 4]</span><br><br><span class="hljs-comment">// 例二</span><br><span class="hljs-keyword">const</span> items = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>]);<br>items.<span class="hljs-property">size</span>; <span class="hljs-comment">// 5</span><br><br><span class="hljs-comment">// 类数组</span><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;div&quot;</span>));<br>set.<span class="hljs-property">size</span>; <span class="hljs-comment">// 56</span><br><br><span class="hljs-comment">// 类数组对象也可以作为参数</span><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">div</span>) =&gt;</span> set.<span class="hljs-title function_">add</span>(div));<br>set.<span class="hljs-property">size</span>; <span class="hljs-comment">// 56</span><br></code></pre></td></tr></table></figure><p>Set 也可以用来去重（配合 spread 语法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 去除数组的重复成员</span><br>[...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(array)]<br><span class="hljs-comment">//去除字符串中重复的</span><br>[...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(<span class="hljs-string">&#x27;ababbc&#x27;</span>)].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment">// &quot;abc&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-基本方法"><a href="#5-2-基本方法" class="headerlink" title="5.2 基本方法"></a>5.2 基本方法</h3><h4 id="5-2-1-ket-values-entries-方法"><a href="#5-2-1-ket-values-entries-方法" class="headerlink" title="5.2.1 ket(),values(),entries()方法"></a>5.2.1 ket(),values(),entries()方法</h4><p>上述三个方法返回的都是遍历器对象。由于 Set 结构没有键名，只有键值，所以 key()和 values()方法的行为完全一致，而 entries()方法返回的则是成员一致的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>]);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">keys</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// red</span><br><span class="hljs-comment">// green</span><br><span class="hljs-comment">// blue</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">values</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// red</span><br><span class="hljs-comment">// green</span><br><span class="hljs-comment">// blue</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">entries</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// [&quot;red&quot;, &quot;red&quot;]</span><br><span class="hljs-comment">// [&quot;green&quot;, &quot;green&quot;]</span><br><span class="hljs-comment">// [&quot;blue&quot;, &quot;blue&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="5-2-2forEach"><a href="#5-2-2forEach" class="headerlink" title="5.2.2forEach()"></a>5.2.2forEach()</h4><p>Set 结构的实例与数组一样，也拥有 forEach 方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>]);<br>set.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">value, key</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&quot; : &quot;</span> + value));<br><span class="hljs-comment">// 1 : 1</span><br><span class="hljs-comment">// 4 : 4</span><br><span class="hljs-comment">// 9 : 9</span><br></code></pre></td></tr></table></figure><p><em>另外，forEach 方法还可以有第三个参数，表示绑定处理函数内部的 this 对象。</em></p><h2 id="6-Map-数据类型"><a href="#6-Map-数据类型" class="headerlink" title="6.Map 数据类型"></a>6.Map 数据类型</h2><p><strong>JS 的对象本质上是 Hash 的结构，但是它的 key 受到了很大的限制。所以为了解决这个限制，ES6 提供了一个 Map 数据结构，比 JS 的对象来的更接近 Hash 结构。</strong></p><h3 id="6-1-基本用法"><a href="#6-1-基本用法" class="headerlink" title="6.1 基本用法"></a>6.1 基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><span class="hljs-keyword">const</span> o = &#123; <span class="hljs-attr">p</span>: <span class="hljs-string">&quot;Hello World&quot;</span> &#125;;<br><br>m.<span class="hljs-title function_">set</span>(o, <span class="hljs-string">&quot;content&quot;</span>);<br>m.<span class="hljs-title function_">get</span>(o); <span class="hljs-comment">// &quot;content&quot;</span><br><br>m.<span class="hljs-title function_">has</span>(o); <span class="hljs-comment">// true</span><br>m.<span class="hljs-title function_">delete</span>(o); <span class="hljs-comment">// true</span><br>m.<span class="hljs-title function_">has</span>(o); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>上面代码实现了简单的 set，get 以及 has 方法<br>Map 也支持接收数组参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>  [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>],<br>  [<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;Author&quot;</span>],<br>]);<br><br>map.<span class="hljs-property">size</span>; <span class="hljs-comment">// 2</span><br>map.<span class="hljs-title function_">has</span>(<span class="hljs-string">&quot;name&quot;</span>); <span class="hljs-comment">// true</span><br>map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;name&quot;</span>); <span class="hljs-comment">// &quot;张三&quot;</span><br>map.<span class="hljs-title function_">has</span>(<span class="hljs-string">&quot;title&quot;</span>); <span class="hljs-comment">// true</span><br>map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;title&quot;</span>); <span class="hljs-comment">// &quot;Author&quot;</span><br></code></pre></td></tr></table></figure><p>事实上，不仅仅是数组，任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构都可以当作 Map 构造函数的参数。这就是说，Set 和 Map 都可以用来生成新的 Map。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<br>  [<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-number">1</span>],<br>  [<span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-number">2</span>],<br>]);<br><span class="hljs-keyword">const</span> m1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(set);<br>m1.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;foo&quot;</span>); <span class="hljs-comment">// 1</span><br><br><span class="hljs-keyword">const</span> m2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&quot;baz&quot;</span>, <span class="hljs-number">3</span>]]);<br><span class="hljs-keyword">const</span> m3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(m2);<br>m3.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;baz&quot;</span>); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h4 id="6-1-1-注意事项"><a href="#6-1-1-注意事项" class="headerlink" title="6.1.1 注意事项"></a>6.1.1 注意事项</h4><ol><li>对同一键多次赋值会覆盖前一次的值</li><li>读取未知的键会返回 undefined</li><li>Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br><span class="hljs-keyword">const</span> k1 = [<span class="hljs-string">&quot;a&quot;</span>];<br><span class="hljs-keyword">const</span> k2 = [<span class="hljs-string">&quot;a&quot;</span>];<br><br>map.<span class="hljs-title function_">set</span>(k1, <span class="hljs-number">111</span>).<span class="hljs-title function_">set</span>(k2, <span class="hljs-number">222</span>);<br><br>map.<span class="hljs-title function_">get</span>(k1); <span class="hljs-comment">// 111</span><br>map.<span class="hljs-title function_">get</span>(k2); <span class="hljs-comment">// 222</span><br></code></pre></td></tr></table></figure><ol start="4"><li>如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，比如 0 和-0 就是一个键</li></ol><h3 id="6-2-属性以及方法"><a href="#6-2-属性以及方法" class="headerlink" title="6.2 属性以及方法"></a>6.2 属性以及方法</h3><p><strong>（1）size 属性</strong><br>size 属性返回 Map 结构的成员总数。<br><strong>（2）Map.prototype.set(key, value)</strong><br>set 方法设置键名 key 对应的键值为 value，然后返回整个 Map 结构。如果 key 已经有值，则键值会被更新，否则就新生成该键。<br>又因为返回 Map 结构，所以可以使用链式写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br>m.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;edition&quot;</span>, <span class="hljs-number">6</span>); <span class="hljs-comment">// 键是字符串</span><br>m.<span class="hljs-title function_">set</span>(<span class="hljs-number">262</span>, <span class="hljs-string">&quot;standard&quot;</span>); <span class="hljs-comment">// 键是数值</span><br>m.<span class="hljs-title function_">set</span>(<span class="hljs-literal">undefined</span>, <span class="hljs-string">&quot;nah&quot;</span>); <span class="hljs-comment">// 键是 undefined</span><br><br><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>().<span class="hljs-title function_">set</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">set</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;b&quot;</span>).<span class="hljs-title function_">set</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;c&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>（3）Map.prototype.get(key)</strong><br>get 方法读取 key 对应的键值，如果找不到 key，返回 undefined。<br><strong>（4）Map.prototype.has(key)</strong><br>has 方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。<br><strong>（5）Map.prototype.delete(key)</strong><br>delete 方法删除某个键，返回 true。如果删除失败，返回 false。<br><strong>（6）Map.prototype.clear()</strong><br>clear 方法清除所有成员，没有返回值。</p><h2 id="7-Pomise"><a href="#7-Pomise" class="headerlink" title="7.Pomise"></a>7.Pomise</h2><h3 id="7-1-Pomise-含义"><a href="#7-1-Pomise-含义" class="headerlink" title="7.1 Pomise 含义"></a>7.1 Pomise 含义</h3><p>从语法上说 Promise 是一个对象，他可以获取异步操作的消息，同时也具有一定的 API 来进行处理<br>Promise 有两个特点：</p><ol><li>对象的状态不受外界影响。它具有三个状态：pending（进行中），fulfilled（已成功），rejected（已失败），只有异步操作的结果会决定这个对象的状态</li><li>一旦对象状态确定，无法再改变，任何时候都能得到这个结果。</li></ol><p>Promise 也有一些缺点。首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><h3 id="7-2-基本用法"><a href="#7-2-基本用法" class="headerlink" title="7.2 基本用法"></a>7.2 基本用法</h3><p>Promise 对象是个构造函数，用来生成 Promise 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-comment">// ... some code</span><br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-comment">/* 异步操作成功 */</span>)&#123;<br>    <span class="hljs-title function_">resolve</span>(value);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>promise 函数支持接收俩个函数参数，分别是 resolve 和 reject。俩个参数的作用是改变 promise 的状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">timeout</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve, ms, <span class="hljs-string">&quot;done&quot;</span>);<br>  &#125;);<br>&#125;<br><br><span class="hljs-title function_">timeout</span>(<span class="hljs-number">100</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;); <span class="hljs-comment">//done</span><br></code></pre></td></tr></table></figure><p>上述代码中的.then 可以接受俩个回调函数作参数,当 promise 函数状态改变时调用。<br>Promise 新建后就会立即执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Promise&quot;</span>);<br>  <span class="hljs-title function_">resolve</span>();<br>&#125;);<br><br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;resolved.&quot;</span>);<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hi!&quot;</span>);<br><br><span class="hljs-comment">// Promise</span><br><span class="hljs-comment">// Hi!</span><br><span class="hljs-comment">// resolved</span><br></code></pre></td></tr></table></figure><h3 id="7-3-一些方法"><a href="#7-3-一些方法" class="headerlink" title="7.3 一些方法"></a>7.3 一些方法</h3><ol><li>Promise.prototype.then()</li><li>Promise.prototype.catch()</li><li>Promise.prototype.finally()</li><li>Promise.all()</li><li>Promise.race()</li><li>Promise.allSettled()</li><li>Promise.any()</li><li>Promise.resolve()</li><li>Promise.reject()</li></ol><h1 id="第二节-ES6-中少用到的内容（可能对于菜鸟属于少用类型）"><a href="#第二节-ES6-中少用到的内容（可能对于菜鸟属于少用类型）" class="headerlink" title="第二节-ES6 中少用到的内容（可能对于菜鸟属于少用类型）"></a>第二节-ES6 中少用到的内容（可能对于菜鸟属于少用类型）</h1><h2 id="8-Symbol-类型数据"><a href="#8-Symbol-类型数据" class="headerlink" title="8.Symbol 类型数据"></a>8.Symbol 类型数据</h2><h3 id="8-1-基本含义"><a href="#8-1-基本含义" class="headerlink" title="8.1 基本含义"></a>8.1 基本含义</h3><p>对于 ES5 以前的对象属性名字都是字符串，就很容易出现重复名字的情况，所以为了避免这种情况，ES6 引入了一个新的数据类型–Symbol，表示独一无二的值。</p><h3 id="8-2-Symbol-的使用"><a href="#8-2-Symbol-的使用" class="headerlink" title="8.2 Symbol 的使用"></a>8.2 Symbol 的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s = <span class="hljs-title class_">Symbol</span>();<br><br><span class="hljs-keyword">typeof</span> s;<br><span class="hljs-comment">// &quot;symbol&quot;</span><br></code></pre></td></tr></table></figure><p><code>Symbol</code>函数同时可以接收一个字符串内容来作为描述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;bar&quot;</span>);<br><br>s1; <span class="hljs-comment">// Symbol(foo)</span><br>s2; <span class="hljs-comment">// Symbol(bar)</span><br><br>s1.<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">// &quot;Symbol(foo)&quot;</span><br>s2.<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">// &quot;Symbol(bar)&quot;</span><br></code></pre></td></tr></table></figure><p>但是注意，不管<code>Symbol</code>函数是否接收相同的变量名或者均不接收变量名，二者的返回值不相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 没有参数的情况</span><br><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>();<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>();<br><br>s1 === s2; <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// 有参数的情况</span><br><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><br>s1 === s2; <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="8-3-Symbol-使用场景"><a href="#8-3-Symbol-使用场景" class="headerlink" title="8.3 Symbol 使用场景"></a>8.3 Symbol 使用场景</h3><p>对于一个独一无二的变量，最主要的运用场景就是给对象属性命名来避免重复。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> mySymbol = <span class="hljs-title class_">Symbol</span>();<br><br><span class="hljs-comment">// 第一种写法</span><br><span class="hljs-keyword">let</span> a = &#123;&#125;;<br>a[mySymbol] = <span class="hljs-string">&quot;Hello!&quot;</span>;<br><br><span class="hljs-comment">// 第二种写法</span><br><span class="hljs-keyword">let</span> a = &#123;<br>  [mySymbol]: <span class="hljs-string">&quot;Hello!&quot;</span>,<br>&#125;;<br><br><span class="hljs-comment">// 第三种写法</span><br><span class="hljs-keyword">let</span> a = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(a, mySymbol, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;Hello!&quot;</span> &#125;);<br><br><span class="hljs-comment">// 以上写法都得到同样结果</span><br>a[mySymbol]; <span class="hljs-comment">// &quot;Hello!&quot;</span><br></code></pre></td></tr></table></figure><p>注意，Symbol 作为对象属性名的时候，不能使用点运算符，并且在对象内部的时候 Symbol 必须放在方括号之中。</p><h3 id="8-4-关于-Symbol-的遍历问题"><a href="#8-4-关于-Symbol-的遍历问题" class="headerlink" title="8.4 关于 Symbol 的遍历问题"></a>8.4 关于 Symbol 的遍历问题</h3><p>特别的是，当<code>Symbol</code>作为属性值的时候，该属性不会出现在<code>for..of``for..in</code>循环中，同时也不会被<code>Object.keys()``Object.getOwnPropertyNames()``JSON.stringify()</code>返回。<br>但是它也不是一个私有属性，它可以被<code>Object.getOwnProperSymbols()</code>方法获取，这个方法可以获取指定的对象的所有 Symbol 值的一个数组。</p><h2 id="9-Proxy-代理拦截"><a href="#9-Proxy-代理拦截" class="headerlink" title="9.Proxy 代理拦截"></a>9.Proxy 代理拦截</h2><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p><h3 id="9-2-使用"><a href="#9-2-使用" class="headerlink" title="9.2 使用"></a>9.2 使用</h3><p>ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br></code></pre></td></tr></table></figure><p>Proxy 对象都是上面的写法，target 指的是要拦截的目标，即你所要代理拦截的目标。handler 指的是你所定义的拦截行为。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义一个普通的对象obj</span><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;_island&quot;</span>,<br>&#125;;<br><br><span class="hljs-comment">// 代理obj这个对象，并传入get捕获器</span><br><span class="hljs-keyword">const</span> objProxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj, &#123;<br>  <span class="hljs-comment">// get捕获器</span><br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, key</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`捕获到对象获取<span class="hljs-subst">$&#123;key&#125;</span>属性的值操作`</span>);<br>    <span class="hljs-keyword">return</span> target[key];<br>  &#125;,<br>&#125;);<br><br><span class="hljs-comment">// 通过代理对象操作obj对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objProxy.<span class="hljs-property">name</span>);<br><span class="hljs-comment">// 捕获到对象获取name属性的值操作</span><br><span class="hljs-comment">// _island</span><br></code></pre></td></tr></table></figure><p>上述代码中，target 为 obj，说明拦截 obj 的行为。handler 上传入了一个 get 捕获器，主要是用于捕获读取 obj 对象属性的行为是触发，即一读取 obj 对象属性则触发 get 方法。<br>一个对象可以设置多个拦截函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> handler = &#123;<br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, name</span>) &#123;<br>    <span class="hljs-keyword">if</span> (name === <span class="hljs-string">&quot;prototype&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, &quot;</span> + name;<br>  &#125;,<br>  <span class="hljs-attr">apply</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, thisBinding, args</span>) &#123;<br>    <span class="hljs-keyword">return</span> args[<span class="hljs-number">0</span>];<br>  &#125;,<br>  <span class="hljs-attr">construct</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, args</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">value</span>: args[<span class="hljs-number">1</span>] &#125;;<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">var</span> fproxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;, handler);<br><span class="hljs-title function_">fproxy</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">new</span> <span class="hljs-title function_">fproxy</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// &#123;value: 2&#125;</span><br>fproxy.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">// true</span><br>fproxy.<span class="hljs-property">foo</span> === <span class="hljs-string">&quot;Hello, foo&quot;</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="9-3-Proxy-拦截函数"><a href="#9-3-Proxy-拦截函数" class="headerlink" title="9.3 Proxy 拦截函数"></a>9.3 Proxy 拦截函数</h3><ul><li>**get(target, propKey, receiver)**：拦截对象属性的读取，比如 proxy.foo 和 proxy[‘foo’]。</li><li>**set(target, propKey, value, receiver)**：拦截对象属性的设置，比如 proxy.foo = v 或 proxy[‘foo’] = v，返回一个布尔值。</li><li>**has(target, propKey)**：拦截 propKey in proxy 的操作，返回一个布尔值。</li><li>**deleteProperty(target, propKey)**：拦截 delete proxy[propKey]的操作，返回一个布尔值。</li><li>**ownKeys(target)**：拦截 Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in 循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而 Object.keys()的返回结果仅包括目标对象自身的可遍历属性。</li><li>**getOwnPropertyDescriptor(target, propKey)**：拦截 Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。</li><li>**defineProperty(target, propKey, propDesc)**：拦截 Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。</li><li>**preventExtensions(target)**：拦截 Object.preventExtensions(proxy)，返回一个布尔值。</li><li>**getPrototypeOf(target)**：拦截 Object.getPrototypeOf(proxy)，返回一个对象。</li><li>**isExtensible(target)**：拦截 Object.isExtensible(proxy)，返回一个布尔值。</li><li>**setPrototypeOf(target, proto)**：拦截 Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</li><li>**apply(target, object, args)**：拦截 Proxy 实例作为函数调用的操作，比如 proxy(…args)、proxy.call(object, …args)、proxy.apply(…)。</li><li>**construct(target, args)**：拦截 Proxy 实例作为构造函数调用的操作，比如 new proxy(…args)。</li></ul><p>具体使用可以上 ES6 文档查看</p><h3 id="9-4this-的指向问题"><a href="#9-4this-的指向问题" class="headerlink" title="9.4this 的指向问题"></a>9.4this 的指向问题</h3><p>Proxy 对象可以对我们的目标对象进行访问拦截，当你没有设置拦截函数的时候，目标对象的 this 指向就会被改变成 Proxy 对象，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123;<br>  <span class="hljs-attr">m</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === proxy);<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">const</span> handler = &#123;&#125;;<br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br>target.<span class="hljs-title function_">m</span>(); <span class="hljs-comment">// false</span><br>proxy.<span class="hljs-title function_">m</span>(); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="9-5-Reflect"><a href="#9-5-Reflect" class="headerlink" title="9.5 Reflect"></a>9.5 Reflect</h3><ol><li><p>将<code>Object</code>对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>），放到<code>Reflect</code>对象上。现阶段，某些方法同时在<code>Object</code>和<code>Reflect</code>对象上部署，未来的新方法将只部署在<code>Reflect</code>对象上。也就是说，从<code>Reflect</code>对象上可以拿到语言内部的方法。</p></li><li><p>修改某些<code>Object</code>方法的返回结果，让其变得更合理。比如，<code>Object.defineProperty(obj, name, desc)</code>在无法定义属性时，会抛出一个错误，而<code>Reflect</code>.<code>defineProperty(obj, name, desc)</code>则会返回 false。</p></li><li><p>让<code>Object</code>操作都变成函数行为。某些<code>Object</code>操作是命令式，比如<code>name in obj</code>和<code>delete obj[name]</code>，而<code>Reflect.has(obj, name)</code>和<code>Reflect.deleteProperty(obj, name)</code>让它们变成了函数行为。</p></li></ol><p>4.<code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法一一对应，只要是<code>Proxy</code>对象的方法，就能在<code>Reflect</code>对象上找到对应的方法。这就让<code>Proxy</code>对象可以方便地调用对应的<code>Reflect</code>方法，完成默认行为，作为修改行为的基础。也就是说，不管<code>Proxy</code>怎么修改默认行为，你总可以在<code>Reflect</code>上获取默认行为。<br>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Proxy</span>(target, &#123;<br>  <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, name, value, receiver</span>) &#123;<br>    <span class="hljs-keyword">var</span> success = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, name, value, receiver);<br>    <span class="hljs-keyword">if</span> (success) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;property &quot;</span> + name + <span class="hljs-string">&quot; on &quot;</span> + target + <span class="hljs-string">&quot; set to &quot;</span> + value);<br>    &#125;<br>    <span class="hljs-keyword">return</span> success;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>上面代码中，Proxy 方法拦截 target 对象的属性赋值行为。它采用 Reflect.set 方法将值赋值给对象的属性，确保完成原有的行为，然后再部署额外的功能。</p><h2 id="10-Module-语法"><a href="#10-Module-语法" class="headerlink" title="10.Module 语法"></a>10.Module 语法</h2><h3 id="10-1-概述"><a href="#10-1-概述" class="headerlink" title="10.1 概述"></a>10.1 概述</h3><p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// CommonJS模块</span><br><span class="hljs-keyword">let</span> &#123; stat, exists, readfile &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">let</span> _fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">let</span> stat = _fs.<span class="hljs-property">stat</span>;<br><span class="hljs-keyword">let</span> exists = _fs.<span class="hljs-property">exists</span>;<br><span class="hljs-keyword">let</span> readfile = _fs.<span class="hljs-property">readfile</span>;<br></code></pre></td></tr></table></figure><p>CommonJS 模块导入属于运行时加载，原理是整体加载<code>fs</code>模块，然后生成<code>_fs</code>对象，再从上面读取三个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ES6模块</span><br><span class="hljs-keyword">import</span> &#123; stat, exists, readFile &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;fs&quot;</span>;<br></code></pre></td></tr></table></figure><p>上面代码的实质是从<code>fs</code>模块加载 3 个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载。</p><h3 id="10-2-import（）"><a href="#10-2-import（）" class="headerlink" title="10.2.import（）"></a>10.2.import（）</h3><p>上面说到 ES6 模块是从静态加载，所以只能将 import 函数放在代码最上端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">if</span> (x === <span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-keyword">import</span> <span class="hljs-title class_">MyModual</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./myModual&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但在 ES2020 引入<code>import()</code>函数支持动态加载模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span>(specifier);<br></code></pre></td></tr></table></figure><p>上面代码中，<code>import</code>函数的参数<code>specifier</code>，指定所要加载的模块的位置。<code>import</code>命令能够接受什么参数,<code>import()</code>函数就能接受什么参数，两者区别主要是后者为动态加载。<br><code>import()</code>返回一个<code>Promise</code>对象，因此<code>import()</code>函数加载一个模块后支持<code>then</code>语法<br>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./myModule.js&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">myModule</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myModule.<span class="hljs-property">default</span>);<br>&#125;); <span class="hljs-comment">//直接获取default</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module1.js&#x27;</span>),<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module2.js&#x27;</span>),<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module3.js&#x27;</span>),<br>])<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">[module1, module2, module3]</span>) =&gt;</span> &#123;<br>   ···<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> myModule = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./myModule.js&quot;</span>);<br>  <span class="hljs-keyword">const</span> &#123; export1, export2 &#125; = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./myModule.js&quot;</span>);<br>  <span class="hljs-keyword">const</span> [module1, module2, module3] = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>    <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./module1.js&quot;</span>),<br>    <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./module2.js&quot;</span>),<br>    <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./module3.js&quot;</span>),<br>  ]);<br>&#125;<br><span class="hljs-title function_">main</span>();<br></code></pre></td></tr></table></figure><h3 id="10-3-严格模式"><a href="#10-3-严格模式" class="headerlink" title="10.3 严格模式"></a>10.3 严格模式</h3><p>ES6 的模块导入自动采用严格模式<br>严格模式主要有以下限制。</p><ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用 with 语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>不能删除变量 delete prop，会报错，只能删除属性 delete global[prop]</li><li>eval 不会在它的外层作用域引入变量</li><li>eval 和 arguments 不能被重新赋值</li><li>arguments 不会自动反映函数参数的变化</li><li>不能使用 arguments.callee</li><li>不能使用 arguments.caller</li><li>禁止 this 指向全局对象</li><li>不能使用 fn.caller 和 fn.arguments 获取函数调用的堆栈</li><li>增加了保留字（比如 protected、static 和 interface）</li></ul><h3 id="10-4-export-和-import-命令"><a href="#10-4-export-和-import-命令" class="headerlink" title="10.4 export 和 import 命令"></a>10.4 export 和 import 命令</h3><p>模块功能主要由<code>export</code>和<code>import</code>俩个命令组成</p><h4 id="10-4-1-Export-命令"><a href="#10-4-1-Export-命令" class="headerlink" title="10.4.1 Export 命令"></a>10.4.1 Export 命令</h4><p>一个文件就是一个模块，你可以通过<code>import()</code>进行导入。但你的 JS 文件里的变量外界无法获取，所以就需要<code>export</code>函数命令进行导出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// profile.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> firstName = <span class="hljs-string">&quot;Michael&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&quot;Jackson&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> year = <span class="hljs-number">1958</span>;<br></code></pre></td></tr></table></figure><p>这样子外界就可以获取到<code>firstName``lastName``year</code>三个变量<br>当然你也可以这么写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// profile.js</span><br><span class="hljs-keyword">var</span> firstName = <span class="hljs-string">&quot;Michael&quot;</span>;<br><span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&quot;Jackson&quot;</span>;<br><span class="hljs-keyword">var</span> year = <span class="hljs-number">1958</span>;<br><span class="hljs-keyword">export</span> &#123; firstName, lastName, year &#125;;<br></code></pre></td></tr></table></figure><p><code>export</code>不止可以导出变量，同时也可以导出函数和类（class）<br>你可以通过<code>as</code>关键词重命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">v1</span>(<span class="hljs-params"></span>) &#123; ... &#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">v2</span>(<span class="hljs-params"></span>) &#123; ... &#125;<br><span class="hljs-keyword">export</span> &#123;<br>  v1 <span class="hljs-keyword">as</span> streamV1,<br>  v2 <span class="hljs-keyword">as</span> streamV2,<br>  v2 <span class="hljs-keyword">as</span> streamLatestVersion<br>&#125;;<br></code></pre></td></tr></table></figure><p>特别注意的是，你导出的东西必须和文件内的变量建立联系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">export</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">var</span> m = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> m;<br></code></pre></td></tr></table></figure><p>另外，<code>export</code>输出的接口与其对应的值是动态绑定关系，可以获取到模块内部实时的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> foo = <span class="hljs-string">&quot;bar&quot;</span>;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> (foo = <span class="hljs-string">&quot;baz&quot;</span>), <span class="hljs-number">500</span>);<br></code></pre></td></tr></table></figure><p>最后，<code>export</code>命令可以出现在模块的任何地方，只要处于模块顶层，不能在块级作用域内，因为这样就违背了 ES6 模块的静态加载设计</p><h4 id="10-4-2-import-命令"><a href="#10-4-2-import-命令" class="headerlink" title="10.4.2 import 命令"></a>10.4.2 import 命令</h4><p>当 JS 文件用 export 命令定义了对外的接口后，你就可以用<code>import</code>函数进行导入加载模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; firstName, lastName, year &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./profile.js&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params">element</span>) &#123;<br>  element.<span class="hljs-property">textContent</span> = firstName + <span class="hljs-string">&quot; &quot;</span> + lastName;<br>&#125;<br></code></pre></td></tr></table></figure><p>大括号内的名字必须和被导入模块内的变量名一样，当然你也可以用 as 来重命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; lastName <span class="hljs-keyword">as</span> surname &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./profile.js&quot;</span>;<br></code></pre></td></tr></table></figure><p><code>import</code>命令输入的变量都是只读的，因为他本质是输入接口，所以不能在加载模块的脚本里面改写接口</p><p>但是<code>import</code>导入的对象，你可以改变他的属性，但是最好别这么做，这样文件会难以维护，所以一切输入的模块都当作只读。</p><p><code>import</code>命令后的 from 接着是相对或者绝对路径，如果用模块名，必须要有配置文件</p><p><code>import</code>命令是静态加载，加载优于一切，在编译阶段就执行完毕，所以不能使用表达式和变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-string">&#x27;f&#x27;</span> + <span class="hljs-string">&#x27;oo&#x27;</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;<br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable language_">module</span> = <span class="hljs-string">&#x27;my_module&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-variable language_">module</span>;<br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">if</span> (x === <span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;module1&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;module2&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-5-整体加载"><a href="#10-5-整体加载" class="headerlink" title="10.5 整体加载"></a>10.5 整体加载</h3><p>除了上面说到的指定某个加载方法，还可以*来整体加载一个模块到一个对象上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> circle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./circle&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;圆面积：&#x27;</span> + circle.<span class="hljs-title function_">area</span>(<span class="hljs-number">4</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;圆周长：&#x27;</span> + circle.<span class="hljs-title function_">circumference</span>(<span class="hljs-number">14</span>));<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span><br></code></pre></td></tr></table></figure><h3 id="10-6-export-和-import-的复合写法"><a href="#10-6-export-和-import-的复合写法" class="headerlink" title="10.6 export 和 import 的复合写法"></a>10.6 export 和 import 的复合写法</h3><p>在一个模块中先后输入输出同一个模块，import 和 export 可以写在一起，但是因为类似于转接一个模块，所以这个文件中不能用导入模块的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> &#123; foo, bar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my_module&quot;</span>;<br><span class="hljs-comment">// 可以简单理解为</span><br><span class="hljs-keyword">import</span> &#123; foo, bar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my_module&quot;</span>;<br><span class="hljs-keyword">export</span> &#123; foo, bar &#125;;<br></code></pre></td></tr></table></figure><p>模块的接口改名和整体输出，可以采用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 接口改名</span><br><span class="hljs-keyword">export</span> &#123; foo <span class="hljs-keyword">as</span> myFoo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my_module&quot;</span>;<br><span class="hljs-comment">// 整体输出</span><br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my_module&quot;</span>;<br></code></pre></td></tr></table></figure><p>ES2020 还提供了这样的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> * <span class="hljs-keyword">as</span> ns <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mod&quot;</span>;<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> ns <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mod&quot;</span>;<br><span class="hljs-keyword">export</span> &#123; ns &#125;;<br></code></pre></td></tr></table></figure><h3 id="10-7-浏览器加载"><a href="#10-7-浏览器加载" class="headerlink" title="10.7 浏览器加载"></a>10.7 浏览器加载</h3><p>在 HTML 传统网页中，浏览器通过<code>&lt;script&gt;</code>标签加载 JS 脚本，但是一旦 JS 文件过大，加载过慢就会卡死，因为加载属于同步加载，只有加载完才能接着渲染。<br>所以后来浏览器支持脚本异步加载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;path/to/myModule.js&quot;</span> defer&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;path/to/myModule.js&quot;</span> <span class="hljs-attr">async</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>derfer 和 async 加载的区别：</p><ul><li>defer 加载是 JS 文件等到整个页面都渲染完了才会执行</li><li>async 加载是页面渲染的同时 JS 文件加载，等 JS 加载完会中断页面渲染然后加载 JS，JS 结束后才会继续渲染</li></ul><p>浏览器加载 ES6 模块，也使用<code>&lt;script&gt;</code>标签，但是要加入 type=”module”属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;module&quot;</span> src=<span class="hljs-string">&quot;./foo.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="10-8-ES6-模块与-CommonJS-模块的区别"><a href="#10-8-ES6-模块与-CommonJS-模块的区别" class="headerlink" title="10.8 ES6 模块与 CommonJS 模块的区别"></a>10.8 ES6 模块与 CommonJS 模块的区别</h3><p>他们有三个重大的区别</p><ol><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</li><li>CommonJS 模块的 require()是同步加载模块，ES6 模块的 import 命令是异步加载，有一个独立的模块依赖的解析阶段。</li></ol><p>第一个区别在上文中有提到过 ES6 模块输出的值是会随着模块内部函数等操作改变值的数值，可以实时获取模块内部动态的值。而 CommonJS 模块加载后，内部的值就不会动态变化了。<br>第二和第三个区别在上文中都有介绍，这里就不多说了</p><h3 id="10-9-Node-js-的模块加载方法"><a href="#10-9-Node-js-的模块加载方法" class="headerlink" title="10.9 Node.js 的模块加载方法"></a>10.9 Node.js 的模块加载方法</h3><p>JavaScript 现在有两种模块。一种是 ES6 模块，简称 ESM；另一种是 CommonJS 模块，简称 CJS。<br>CommonJS 模块是 Node.js 专用的，与 ES6 模块不兼容。语法上面，两者最明显的差异是，CommonJS 模块使用<code>require()</code>和<code>module.exports</code>，ES6 模块使用 import 和 export。<br>它们采用不同的加载方案。从 Node.js v13.2 版本开始，Node.js 已经默认打开了 ES6 模块支持。<br>Node.js 要求 ES6 模块的文件后缀是<code>.mjs</code>, 如果不想改变后缀，可以在项目的 package.js 文件中指定 type 字段为 module。<br>而 CommonJS 模块文件后缀是<code>.cjs</code><br>注意 CommonJS 和 ES6 最好不要混用，因为二者加载方式不同</p><h4 id="10-9-1-CommonJS-模块加载-ES6-模块"><a href="#10-9-1-CommonJS-模块加载-ES6-模块" class="headerlink" title="10.9.1 CommonJS 模块加载 ES6 模块"></a>10.9.1 CommonJS 模块加载 ES6 模块</h4><p>CommonJS 模块中只能用 import()加载 ES6 模块</p><h4 id="10-9-2-ES6-模块加载-CommonJS-模块"><a href="#10-9-2-ES6-模块加载-CommonJS-模块" class="headerlink" title="10.9.2 ES6 模块加载 CommonJS 模块"></a>10.9.2 ES6 模块加载 CommonJS 模块</h4><p>ES6 模块的 import 命令可以加载 CommonJS 模块，但是只能整体加载，不能只加载单一的输出项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">import</span> packageMain <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;commonjs-package&quot;</span>;<br><br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">import</span> &#123; method &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;commonjs-package&quot;</span>;<br></code></pre></td></tr></table></figure><p>如果需要单一输出，可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> packageMain <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;commonjs-package&quot;</span>;<br><span class="hljs-keyword">const</span> &#123; method &#125; = packageMain;<br></code></pre></td></tr></table></figure><h4 id="10-9-3-同时支持俩种格式"><a href="#10-9-3-同时支持俩种格式" class="headerlink" title="10.9.3 同时支持俩种格式"></a>10.9.3 同时支持俩种格式</h4><p>如果原始模块是 ES6 格式，那么需要给出一个整体输出接口，比如 export default obj，使得 CommonJS 可以用 import()进行加载。<br>如果原始模块是 CommonJS 格式，那么可以加一个包装层。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> cjsModule <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../index.js&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> foo = cjsModule.<span class="hljs-property">foo</span>;<br></code></pre></td></tr></table></figure><p>上面代码先整体输入 CommonJS 模块，然后再根据需要输出具名接口。<br>你可以把这个文件的后缀名改为.mjs，或者将它放在一个子目录，再在这个子目录里面放一个单独的 package.json 文件，指明{ type: “module” }。</p><h3 id="10-10-加载路径"><a href="#10-10-加载路径" class="headerlink" title="10.10 加载路径"></a>10.10 加载路径</h3><p>ES6 模块的加载路径必须给出脚本的完整路径，不能省略后缀<br>为了与浏览器的 import 加载规则相同，Node.js 的<code>.mjs</code>文件支持 URL<br>目前，Node.js 的 import 命令只支持加载本地模块（file:协议）和 data:协议，不支持加载远程模块。另外，脚本路径只支持相对路径，不支持绝对路径（即以/或//开头的路径）。</p><h2 id="11-类"><a href="#11-类" class="headerlink" title="11.类"></a>11.类</h2><h3 id="11-1-类语法"><a href="#11-1-类语法" class="headerlink" title="11.1 类语法"></a>11.1 类语法</h3><p>基本的类语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  prop = value; <span class="hljs-comment">// 属性</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">...</span>) &#123; <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-comment">// ...</span><br>  &#125;<br><br>  <span class="hljs-title function_">method</span>(<span class="hljs-params">...</span>) &#123;&#125; <span class="hljs-comment">// method</span><br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">something</span>(<span class="hljs-params">...</span>) &#123;&#125; <span class="hljs-comment">// getter 方法</span><br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">something</span>(<span class="hljs-params">...</span>) &#123;&#125; <span class="hljs-comment">// setter 方法</span><br><br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;&#125; <span class="hljs-comment">// 有计算名称（computed name）的方法（此处为 symbol）</span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>技术上来说，MyClass 是一个函数（我们提供作为 constructor 的那个），而 methods、getters 和 setters 都被写入了 MyClass.prototype。</p><h3 id="11-2-类的继承"><a href="#11-2-类的继承" class="headerlink" title="11.2 类的继承"></a>11.2 类的继承</h3><ol><li>想要扩展一个类：class Child extends Parent：<ul><li>这意味着 Child.prototype.<strong>proto</strong> 将是 Parent.prototype，所以方法会被继承。</li></ul></li><li>重写一个 constructor：<ul><li>在使用 this 之前，我们必须在 Child 的 constructor 中将父 constructor 调用为 super()。</li></ul></li><li>重写一个方法：<ul><li>我们可以在一个 Child 方法中使用 super.method() 来调用 Parent 方法。</li></ul></li><li>内部：<ul><li>方法在内部的 [[HomeObject]] 属性中记住了它们的类/对象。这就是 super 如何解析父方法的。</li><li>因此，将一个带有 super 的方法从一个对象复制到另一个对象是不安全的。</li></ul></li></ol><p>补充：</p><ul><li>箭头函数没有自己的 this 或 super，所以它们能融入到就近的上下文中，像透明似的。</li></ul><h3 id="11-3-静态方法和静态属性"><a href="#11-3-静态方法和静态属性" class="headerlink" title="11.3 静态方法和静态属性"></a>11.3 静态方法和静态属性</h3><p>静态方法被用于实现属于整个类的功能。它与具体的类实例无关。<br>举个例子， 一个用于进行比较的方法 Article.compare(article1, article2) 或一个工厂（factory）方法 Article.createTodays()。<br>在类声明中，它们都被用关键字 static 进行了标记。<br>静态属性被用于当我们想要存储类级别的数据时，而不是绑定到实例。<br>语法如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  <span class="hljs-keyword">static</span> property = ...;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">method</span>(<span class="hljs-params"></span>) &#123;<br>    ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从技术上讲，静态声明与直接给类本身赋值相同：<br>MyClass.property = … MyClass.method = …<br>静态属性和方法是可被继承的。<br>对于 class B extends A，类 B 的 prototype 指向了 A：B.[[Prototype]] = A。因此，如果一个字段在 B 中没有找到，会继续在 A 中查找。</p><h3 id="11-4-私有变量和私有方法"><a href="#11-4-私有变量和私有方法" class="headerlink" title="11.4 私有变量和私有方法"></a>11.4 私有变量和私有方法</h3><p>就面向对象编程（OOP）而言，内部接口与外部接口的划分被称为封装。<br>它具有以下优点：<br><strong>保护用户，使他们不会误伤自己</strong><br>想象一下，有一群开发人员在使用一个咖啡机。这个咖啡机是由“最好的咖啡机”公司制造的，工作正常，但是保护罩被拿掉了。因此内部接口暴露了出来。<br>所有的开发人员都是文明的 —— 他们按照预期使用咖啡机。但其中的一个人，约翰，他认为自己是最聪明的人，并对咖啡机的内部做了一些调整。然而，咖啡机两天后就坏了。<br>这肯定不是约翰的错，而是那个取下保护罩并让约翰进行操作的人的错。<br>编程也一样。如果一个 class 的使用者想要改变那些本不打算被从外部更改的东西 —— 后果是不可预测的。<br><strong>可支持性</strong><br>编程的情况比现实生活中的咖啡机要复杂得多，因为我们不只是购买一次。我们还需要不断开发和改进代码。<br><strong>如果我们严格界定内部接口，那么这个 class 的开发人员可以自由地更改其内部属性和方法，甚至无需通知用户。</strong><br>如果你是这样的 class 的开发者，那么你会很高兴知道可以安全地重命名私有变量，可以更改甚至删除其参数，因为没有外部代码依赖于它们。<br>对于用户来说，当新版本问世时，应用的内部可能被进行了全面检修，但如果外部接口相同，则仍然很容易升级。<br><strong>隐藏复杂性</strong><br>人们喜欢使用简单的东西。至少从外部来看是这样。内部的东西则是另外一回事了。<br>程序员也不例外。<br><strong>当实施细节被隐藏，并提供了简单且有据可查的外部接口时，总是很方便的。</strong><br>为了隐藏内部接口，我们使用受保护的或私有的属性：</p><ul><li>受保护的字段以 <em>开头。这是一个众所周知的约定，不是在语言级别强制执行的。程序员应该只通过它的类和从它继承的类中访问以</em> 开头的字段。</li><li>私有字段以#开头。JavaScript 确保我们只能从类的内部访问它们。</li></ul><p>目前，各个浏览器对私有字段的支持不是很好，但可以用 polyfill 解决。</p><h3 id="11-5-类型检查方法"><a href="#11-5-类型检查方法" class="headerlink" title="11.5 类型检查方法"></a>11.5 类型检查方法</h3><p>让我们总结一下我们知道的类型检查方法：</p><table><thead><tr><th></th><th>用于</th><th>返回值</th></tr></thead><tbody><tr><td>typeof</td><td>原始数据类型</td><td>string</td></tr><tr><td>{}.toString</td><td>原始数据类型，内建对象，包含 Symbol.toStringTag 属性的对象</td><td>string</td></tr><tr><td>instanceof</td><td>对象</td><td>true/false</td></tr></tbody></table><p>正如我们所看到的，从技术上讲，{}.toString 是一种“更高级的” typeof。<br>当我们使用类的层次结构（hierarchy），并想要对该类进行检查，同时还要考虑继承时，这种场景下 instanceof 操作符确实很出色。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack</title>
    <link href="/2023/04/16/webpack/"/>
    <url>/2023/04/16/webpack/</url>
    
    <content type="html"><![CDATA[<blockquote><p>webpack 是一个打包工具，类似一个工厂，可以自动化的完成一些内容</p></blockquote><h3 id="关于-webpack-的配置（简陋）"><a href="#关于-webpack-的配置（简陋）" class="headerlink" title="关于 webpack 的配置（简陋）"></a>关于 webpack 的配置（简陋）</h3><p><a href="https://juejin.cn/post/7038433081526583310">比较重要的一些配置</a><br><strong>对于 CSS 需要下载的 loader 是 css-loader 和 style-loader</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./mainPage/main/main1&quot;</span>,<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;production&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;./src&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-comment">//css处理</span><br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css/i</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>对于 JS 文件的 babel 转化需要<code>npm i -D @babel/core @babel/preset-env babel-loader</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-comment">//css处理</span><br>  <span class="hljs-attr">rules</span>: [<br>    <span class="hljs-comment">//js转化</span><br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js/i</span>,<br>      <span class="hljs-attr">use</span>: [<br>        &#123;<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-attr">presets</span>: [[<span class="hljs-string">&quot;@babel/preset-env&quot;</span>]],<br>          &#125;,<br>        &#125;,<br>      ],<br>    &#125;,<br>  ];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>热模替换</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">devServer</span>: &#123;<br>  <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关于插件以及-loader-的书写"><a href="#关于插件以及-loader-的书写" class="headerlink" title="关于插件以及 loader 的书写"></a>关于插件以及 loader 的书写</h3><p>loader 例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-keyword">let</span> sour0 = source.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/const/g</span>, <span class="hljs-string">&quot;var&quot;</span>);<br>  <span class="hljs-keyword">let</span> sour1 = sour0.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/let /g</span>, <span class="hljs-string">&quot;var &quot;</span>);<br>  <span class="hljs-keyword">return</span> sour1;<br>&#125;; <span class="hljs-comment">//实现将js文件中的const和let都换成var</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS的一些入门难点</title>
    <link href="/2023/04/15/JS%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%A5%E9%97%A8%E9%9A%BE%E7%82%B9/"/>
    <url>/2023/04/15/JS%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%A5%E9%97%A8%E9%9A%BE%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><blockquote><p>所有的函数都是对象</p></blockquote><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>原型分为俩种，一种叫做显式原型，是函数的<code>prototype</code>属性，称为原型，而原型指向一个叫做原型对象的对象，而这个对象所包含的属性和方法都可以提供给这个函数。<br>另外一种叫做隐式原型，是对象拥有的<code>__proto__</code>属性，而这个属性指向的是正是构造函数的<code>prototype</code>属性，也就是指向原型对象。</p><blockquote><p>原型链是一种关系</p></blockquote><h3 id="原型链-1"><a href="#原型链-1" class="headerlink" title="原型链"></a>原型链</h3><p>试想一下，原型对象也是对象，那么它肯定也有<code>__proto__</code>属性，指向原型对象的原型对象，那么原型链的概念就孕育而生了。通过<code>__proto__</code>，一个函数没有的属性，到它的原型对象上寻找，还是没有就通过<code>__prtot__</code>到原型对象的原型对象上去找，最后一直到最上层。</p><h2 id="new-操作符"><a href="#new-操作符" class="headerlink" title="new 操作符"></a>new 操作符</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>let a = new function()&#123;&#125;</code></p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p><code>new</code>关键词会执行以下步骤</p><ol><li>创建一个空的简单 JavaScript 对象（即 {}）；</li><li>为步骤 1 新创建的对象添加属性 <code>__proto__</code>，将该属性链接至构造函数的原型对象；</li><li>将步骤 1 新创建的对象作为 this 的上下文(this 指向新创建的对象)</li><li>如果该函数没有返回对象，则返回步骤一创建的新对象。</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">my</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;yy&quot;</span>;<br>&#125;<br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title function_">my</span>();<br><span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">my</span>();<br>my.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">age</span> = <span class="hljs-number">18</span>;<br>b.<span class="hljs-property">age</span> = <span class="hljs-number">19</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">age</span>, b.<span class="hljs-property">age</span>); <span class="hljs-comment">//18 19</span><br></code></pre></td></tr></table></figure><p>上面代码中 a 和 b 都创建了一个<code>__proto__</code>指向 my 函数的 <code>prototype(原型对象)</code><br>所以当 my 函数内部 name 改变的时候就会影响 a 和 b 的 name</p><h2 id="JS-的执行机制"><a href="#JS-的执行机制" class="headerlink" title="JS 的执行机制"></a>JS 的执行机制</h2><blockquote><p>前言：Javascript 是一门单线程语言，一切“多线程”的 JS 都是由单线程模拟出来的</p></blockquote><p>总所周知，同步和异步是 JS 的俩个任务执行方式，这俩种任务的执行方式就构成了 JS 的最基础事件循环：</p><ul><li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入 Event Table 并注册函数。</li><li>当指定的事情完成时，Event Table 会将这个函数移入 Event Queue。</li><li>主线程内的任务执行完毕为空，会去 Event Queue 读取对应的函数，进入主线程执行。</li><li>上述过程会不断重复，也就是常说的 Event Loop(事件循环)。</li></ul><hr><p>而除了广义的同步任务和异步任务，我们对任务还有更精细的定义：</p><ul><li>macro-task(宏任务)：包括整体代码 script，setTimeout，setInterval</li><li>micro-task(微任务)：Promise，process.nextTick（node.js 版的“setTimeout”）</li></ul><p>首次进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setTimeout&quot;</span>);<br>&#125;);<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;promise&quot;</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;then&quot;</span>);<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;console&quot;</span>);<br><span class="hljs-comment">//promise</span><br><span class="hljs-comment">//console</span><br><span class="hljs-comment">//then</span><br><span class="hljs-comment">//setTimeout</span><br></code></pre></td></tr></table></figure><ol><li>这段代码作为宏任务，进入主线程。</li><li>先遇到 setTimeout，那么将其回调函数注册后分发到宏任务 Event Queue。(注册过程与上同，下文不再描述)</li><li>接下来遇到了 Promise，new Promise 立即执行，then 函数分发到微任务 Event Queue。</li><li>遇到 console.log()，立即执行。</li><li>好啦，整体代码 script 作为第一个宏任务执行结束，看看有哪些微任务？我们发现了 then 在微任务 Event Queue 里面，执行。</li><li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务 Event Queue 开始。我们发现了宏任务 Event Queue 中 setTimeout 对应的回调函数，立即执行。</li><li>结束。</li></ol><p>最后：<strong>JS 是一门单线程语言，Event Loop 是 JS 的执行机制</strong></p><h2 id="call，apply，bind-实现"><a href="#call，apply，bind-实现" class="headerlink" title="call，apply，bind 实现"></a>call，apply，bind 实现</h2><p>在讨论 call apply bind 前，有一个更重要的知识需要我们去学习，那就是 JS 中<code>this</code>的指向问题，理解了<code>this</code>call apply bind 就是小菜一碟</p><h3 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h3><blockquote><p><strong>一句话总结，谁调用 this，this 就指向谁</strong></p></blockquote><h4 id="this-的绑定规则"><a href="#this-的绑定规则" class="headerlink" title="this 的绑定规则"></a>this 的绑定规则</h4><h5 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h5><ul><li>全局环境下，this 默认绑定到 window</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-variable language_">window</span>); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li>函数独立调用时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-variable language_">window</span>);<br>&#125;<br><span class="hljs-title function_">foo</span>(); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li>被嵌套的函数独立调用时，this 默认绑定到 window</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">foo</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>    &#125;<br>    <span class="hljs-title function_">test</span>();<br>  &#125;,<br>&#125;;<br>obj.<span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure><p><code>上述代码中 text</code>函数独立调用所以默认绑定到 window</p><h5 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h5><p>一般地,被直接对象所包含的函数调用，也被称为方法地调用，this 隐式绑定到该直接对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;<br>    a : <span class="hljs-number">1</span>;<br>    <span class="hljs-attr">foo</span>: foo,<br>    obj2 : &#123;<br>        <span class="hljs-attr">a</span>:<span class="hljs-number">2</span>,<br>        <span class="hljs-attr">foo</span>:foo<br>    &#125;<br>&#125;<br><span class="hljs-comment">//foo()函数的直接对象是obj1,this隐式绑定到obj1</span><br>obj1.<span class="hljs-title function_">foo</span>();<span class="hljs-comment">//1</span><br><span class="hljs-comment">//foo()函数的直接对象是obj2,this隐式绑定到obj2</span><br>obj1.<span class="hljs-property">obj2</span>.<span class="hljs-title function_">foo</span>();<span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><p>但是隐式绑定会出现一种情况，叫做<strong>隐式丢失</strong></p><h5 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">foo</span>: foo,<br>&#125;;<br><span class="hljs-comment">//把obj.foo赋予别名bar，造成了隐式丢失，因为只是把foo()函数赋给了bar，而bar与obj对象则毫无关系</span><br><span class="hljs-keyword">var</span> bar = obj.<span class="hljs-property">foo</span>;<br><span class="hljs-title function_">bar</span>(); <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><p>隐式丢失指的是被隐式绑定的对象丢失了绑定的对象，从而默认绑定到了 window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-title function_">fn</span>();<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">foo</span>: foo,<br>&#125;;<br><span class="hljs-comment">//把obj.foo当做参数传递给bar函数时,有隐式的函数赋值 fn = obj.foo,只是把foo函数赋给了fn,而fn与obj对象毫无关系</span><br><span class="hljs-title function_">bar</span>(obj.<span class="hljs-property">foo</span>); <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">foo</span>: foo,<br>&#125;;<br><span class="hljs-built_in">setTimeout</span>(obj.<span class="hljs-property">foo</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> o = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">foo</span>: foo &#125;;<br><span class="hljs-keyword">var</span> p = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">4</span> &#125;;<br>o.<span class="hljs-title function_">foo</span>(); <span class="hljs-comment">//3;</span><br><span class="hljs-comment">//将o.foo函数赋值给p.foo函数，然后立即执行。相当于仅仅是foo()函数的立即调用</span><br>(p.<span class="hljs-property">foo</span> = o.<span class="hljs-property">foo</span>)(); <span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><h5 id="new-绑定"><a href="#new-绑定" class="headerlink" title="new 绑定"></a>new 绑定</h5><p>一个函数或者方法调用之前带有关键词 new，它就构成构造函数调用，对于 this 绑定来说，称为 new 绑定</p><ol><li>没有 return 或者 return 没有返回值，就会使用这个新对象作为调用结果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fn1</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test); <span class="hljs-comment">//&#123;a:2&#125;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fn2</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test); <span class="hljs-comment">//&#123;a:2&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用构造函数显示地使用 return 语句返回一个对象，那么调用表达式的值就是这个对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;<br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fn</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test); <span class="hljs-comment">//&#123;a:1&#125;</span><br></code></pre></td></tr></table></figure><h5 id="显示绑定"><a href="#显示绑定" class="headerlink" title="显示绑定"></a>显示绑定</h5><p>说了这么多 this 的绑定和丢失，本节笔记最重要的就是这个显示绑定，也就是<code>apply``call``bind</code>三大显示绑定改变 this 指向的函数</p><h3 id="三大函数"><a href="#三大函数" class="headerlink" title="三大函数"></a>三大函数</h3><p><code>call 函数接收多个参数，第一个就是this的指向，后面多个参数是为函数本身的参数</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;一个&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">allName</span>(<span class="hljs-params">firstName, lastName</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我的全名是“<span class="hljs-subst">$&#123;firstName&#125;</span><span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span><span class="hljs-subst">$&#123;lastName&#125;</span>”`</span>);<br>&#125;<br><span class="hljs-comment">// 很明显此时allName函数是没有name属性的</span><br><span class="hljs-title function_">allName</span>(<span class="hljs-string">&quot;我是&quot;</span>, <span class="hljs-string">&quot;前端&quot;</span>); <span class="hljs-comment">//我的全名是“我是前端”  this指向window</span><br>allName.<span class="hljs-title function_">call</span>(obj, <span class="hljs-string">&quot;我是&quot;</span>, <span class="hljs-string">&quot;前端&quot;</span>); <span class="hljs-comment">//我的全名是“我是一个前端” this指向obj</span><br></code></pre></td></tr></table></figure><p><code>apply</code>函数接收俩个参数，第一个和 call 一样是 this 的指向，第二个是一个数组包含函数的所有参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">allName.<span class="hljs-title function_">apply</span>(obj, [<span class="hljs-string">&quot;我是&quot;</span>, <span class="hljs-string">&quot;前端&quot;</span>]); <span class="hljs-comment">//我的全名是“我是一个前端” this指向obj</span><br></code></pre></td></tr></table></figure><p><code>bind</code>接收多个参数，第一个 this 的指向，后面多个参数是函数本身的参数，它和 call apply 不同的是它执行时不会直接执行改变 this 后的函数，而是返回一个函数</p><blockquote><p>多个参数可以生成不同 this 绑定后在传递</p></blockquote><h4 id="手撕"><a href="#手撕" class="headerlink" title="手撕"></a>手撕</h4><p><strong>call</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mbs = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;麻不烧&quot;</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> text = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;yy&quot;</span>,<br>&#125;; <span class="hljs-comment">//测试案例</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">say</span>(<span class="hljs-params">prefix, age</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>,my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,i am <span class="hljs-subst">$&#123;age&#125;</span> year old`</span>);<br>&#125;<br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mycall</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj, ...args</span>) &#123;<br>  obj = obj || <span class="hljs-variable language_">window</span>; <span class="hljs-comment">//传入非真值的时候换成全局对象</span><br>  <span class="hljs-keyword">const</span> only = <span class="hljs-title class_">Symbol</span>(); <span class="hljs-comment">//ES6中的独一值</span><br>  obj[only] = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">//改变this的指向,this指的是调用它的函数</span><br>  <span class="hljs-keyword">return</span> (res = obj[only](...args));<br>  <span class="hljs-keyword">delete</span> obj[only];<br>  <span class="hljs-keyword">return</span> res; <span class="hljs-comment">//返回函数的结果</span><br>&#125;;<br><br>say.<span class="hljs-title function_">mycall</span>(mbs, <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">16</span>); <span class="hljs-comment">//hello,my name is 麻不烧,i am 16 year old</span><br><br>say.<span class="hljs-title function_">mycall</span>(text, <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">16</span>); <span class="hljs-comment">//hello,my name is yy,i am 16 year old</span><br></code></pre></td></tr></table></figure><p><strong>apply</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//apply的实现和call异曲同工</span><br><span class="hljs-keyword">const</span> mbs = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;麻不烧&quot;</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> text = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;yy&quot;</span>,<br>&#125;; <span class="hljs-comment">//测试案例</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">say</span>(<span class="hljs-params">prefix, age</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>,my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,i am <span class="hljs-subst">$&#123;age&#125;</span> year old`</span>);<br>&#125;<br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myapply</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj, args</span>) &#123;<br>  obj = obj || <span class="hljs-variable language_">window</span>; <span class="hljs-comment">//传入非真值的时候换成全局对象</span><br>  <span class="hljs-keyword">const</span> only = <span class="hljs-title class_">Symbol</span>(); <span class="hljs-comment">//ES6中的独一值</span><br>  obj[only] = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">//改变this的指向,this指的是调用它的函数</span><br>  <span class="hljs-keyword">let</span> res = obj[only](...args);<br>  <span class="hljs-keyword">delete</span> obj[only];<br>  <span class="hljs-keyword">return</span> res; <span class="hljs-comment">//返回函数的结果</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>bind</strong><br>bind 函数和 call 和 apply 还是有一点的区别，除了改变 this 以外，还要返回一个函数，还得支持柯里化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mybind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj, ...outargs</span>) &#123;<br>  <span class="hljs-comment">//前面都一样</span><br>  obj = obj || <span class="hljs-variable language_">window</span>; <span class="hljs-comment">//传入非真值的时候换成全局对象</span><br>  <span class="hljs-keyword">const</span> only = <span class="hljs-title class_">Symbol</span>(); <span class="hljs-comment">//ES6中的独一值</span><br>  obj[only] = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">//改变this的指向,this指的是调用它的函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...innerargs</span>) &#123;<br>    <span class="hljs-keyword">const</span> res = obj[only](...outargs, ...innerargs); <span class="hljs-comment">//把第一次传入和第二次传入的参数再传进函数，属于柯里化，而且用上了闭包的思路</span><br>    <span class="hljs-keyword">return</span> res;<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="函数的柯里化"><a href="#函数的柯里化" class="headerlink" title="函数的柯里化"></a>函数的柯里化</h2><p><strong>函数的柯里化指的是将一个函数从多参数传递变成单参数传递，可以增加函数的普适性同时也会增加函数的复杂度</strong></p><h3 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h3><p>比如说书写正则表达式，对于不同的文本需要不同的正则来写，但是总是存在类似的文本需要相同的正则表达式来翻译。不将函数柯里化的话我们就需要书写很多很多的正则来套文本，但利用柯里化就可以先传入正则表达式再传入文本，变得很方便</p><h3 id="手写一个函数的柯里化"><a href="#手写一个函数的柯里化" class="headerlink" title="手写一个函数的柯里化"></a>手写一个函数的柯里化</h3><p>对于一般函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">//6</span><br><span class="hljs-comment">//柯里化</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum1</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum2</span>(<span class="hljs-params">y</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum3</span>(<span class="hljs-params">z</span>) &#123;<br>      <span class="hljs-keyword">return</span> x + y + z;<br>    &#125;;<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">let</span> sum = <span class="hljs-title function_">sum1</span>(<span class="hljs-number">1</span>);<br><span class="hljs-title function_">sum</span>(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>); <span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure><p>但是这种柯里化只能对于一小部分的函数适用，为了更大的适用范围，会更复杂的柯里化</p><blockquote><p>能力有限，依靠百度来完成高级柯里化</p></blockquote><p>思路是首先明白柯里化是分步传参，复杂的情况下可能好几步也可能一下全部传入，所以参数传入的数目要先记住，其次当传参不足的时候，得返回新的函数去接受新的参数，有点递归的意思。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//柯里化</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">curry</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-keyword">const</span> funcArgsLength = fn.<span class="hljs-property">length</span>; <span class="hljs-comment">//记录参数数目</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">curried</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-comment">//...将参数转化为数组</span><br>    <span class="hljs-keyword">if</span> (args.<span class="hljs-property">length</span> &lt; <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-comment">//比较参数数目多少，参数不足的时候返回一个新的函数去接受接下来的参数</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args1</span>) &#123;<br>        <span class="hljs-keyword">return</span> curried.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args.<span class="hljs-title function_">concat</span>(args1)); <span class="hljs-comment">//fn.apply(this,数组) 将数组内容当作参数传递给this的函数对象</span><br>      &#125;;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args);<br>    &#125;<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">let</span> curriedSum = <span class="hljs-title function_">curry</span>(sum);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curriedSum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// 6，仍然可以被正常调用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curriedSum</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// 6，对第一个参数的柯里化</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curriedSum</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)); <span class="hljs-comment">// 6，全柯里化</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
