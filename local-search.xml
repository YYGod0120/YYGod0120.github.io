<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>React状态管理</title>
    <link href="/2023/04/13/React%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    <url>/2023/04/13/React%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h1><h2 id="用State响应输入"><a href="#用State响应输入" class="headerlink" title="用State响应输入"></a>用State响应输入</h2><p><strong>采用声明式编程比采用命令式编程更好，面对更复杂庞大的功能，命令式编程易错且难以维护</strong></p><p>React提供了很好的声明式编程的方法，通过<code>setState()</code>来对不同的状态进行处理，具体有以下五个步骤：<br><strong>步骤一：定位组件中不同的视图状态</strong><br>你得先预测你的组件在不同的状态下的视图样式，模拟不同状态下的样子<br><strong>步骤二：确定是什么改变了这些状态</strong><br>简单来说可以分为：</p><ul><li>人为输入：比如点击按钮、在表单中输入内容，或导航到链接。</li><li>计算机输入：比如网络请求得到反馈、定时器被触发，或加载一张图片。<br>你得设置State状态去响应这些变化</li></ul><p><strong>步骤三：通过<code>useState</code>去表示内存中的<code>state</code></strong><br>我们的目的肯定是state越少越好，更复杂的程序bug会越多。<br>但是一开始我们可以将所有想到的视图状态都写出来，随后再一个一个去删除<br><strong>步骤四：删除任何没必要的<code>state</code>变量</strong><br>你想简化你的代码，减少state内容的重复，我们就需要花一点心思在重构你的state结构<br>关于你的state变量，你可以思考这些问题：</p><ul><li>这个state变量是否会导致矛盾？</li><li>相同的信息是否在另外一个state变量中存在</li><li>你是否可以在另外一个state变量中的相反值获得信息</li></ul><p><strong>步骤五：链接事件处理函数以来设置state</strong><br>最后，我们只需将state绑定在事件处理函数上即可</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><ul><li>声明式编程意味着为每个视图状态声明 UI 而非细致地控制 UI（命令式）。</li><li>当开发一个组件时：<ul><li>写出你的组件中所有的视图状态。</li><li>确定是什么触发了这些 state 的改变。</li><li>通过 useState 模块化内存中的 state。</li><li>删除任何不必要的 state 变量。</li><li>连接事件处理函数去设置 state。</li></ul></li></ul><h2 id="选择状态结构"><a href="#选择状态结构" class="headerlink" title="选择状态结构"></a>选择状态结构</h2><h3 id="构建状态的原则"><a href="#构建状态的原则" class="headerlink" title="构建状态的原则"></a>构建状态的原则</h3><p><strong>组相关状态，如果您总是同时更新两个或多个状态变量，请考虑将它们合并为一个状态变量。</strong><br><strong>避免状态上的矛盾。当状态的结构方式使多个状态可能相互矛盾和“不一致”时，就会为错误留下空间。尽量避免这种情况。</strong><br><strong>避免冗余状态。如果您可以在渲染期间从组件的 props 或其现有状态变量中计算出一些信息，则不应将该信息放入该组件的状态中。</strong><br><strong>避免状态重复。当相同的数据在多个状态变量之间或嵌套对象中重复时，很难使它们保持同步。尽可能减少重复。</strong><br><strong>避免深度嵌套状态。层次很深的状态更新起来不是很方便。如果可能，更喜欢以扁平的方式构建状态。</strong></p><p>如果你想看看这些原则在实际该如何运用<a href="https://react.docschina.org/learn/choosing-the-state-structure">请点击这里</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS的执行机制</title>
    <link href="/2023/04/12/JS%E7%9A%84%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/04/12/JS%E7%9A%84%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前言：Javascript是一门单线程语言，一切“多线程”的JS都是由单线程模拟出来的</p></blockquote><p>总所周知，同步和异步是JS的俩个任务执行方式，这俩种任务的执行方式就构成了JS的最基础事件循环：</p><ul><li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。</li><li>当指定的事情完成时，Event Table会将这个函数移入Event Queue。</li><li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li><li>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</li></ul><hr><p>而除了广义的同步任务和异步任务，我们对任务还有更精细的定义：</p><ul><li>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval</li><li>micro-task(微任务)：Promise，process.nextTick（node.js版的“setTimeout”）</li></ul><p>首次进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setTimeout&#x27;</span>);<br>&#125;)<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise&#x27;</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;then&#x27;</span>);<br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;console&#x27;</span>);<br><span class="hljs-comment">//promise</span><br><span class="hljs-comment">//console</span><br><span class="hljs-comment">//then</span><br><span class="hljs-comment">//setTimeout</span><br></code></pre></td></tr></table></figure><ol><li>这段代码作为宏任务，进入主线程。</li><li>先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)</li><li>接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。</li><li>遇到console.log()，立即执行。</li><li>好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。</li><li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。</li><li>结束。</li></ol><p>最后：<strong>JS是一门单线程语言，Event Loop是JS的执行机制</strong></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型链</title>
    <link href="/2023/04/12/JavaScript%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2023/04/12/JavaScript%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>所有的函数都是对象</p></blockquote><h3 id="原型："><a href="#原型：" class="headerlink" title="原型："></a>原型：</h3><p>原型分为俩种，一种叫做显式原型，是函数的<code>prototype</code>属性，称为原型，而原型指向一个叫做原型对象的对象，而这个对象所包含的属性和方法都可以提供给这个函数。<br>另外一种叫做隐式原型，是对象拥有的<code>__proto__</code>属性，而这个属性指向的是正是构造函数的<code>prototype</code>属性，也就是指向原型对象。</p><blockquote><p>原型链是一种关系</p></blockquote><h3 id="原型链："><a href="#原型链：" class="headerlink" title="原型链："></a>原型链：</h3><p>试想一下，原型对象也是对象，那么它肯定也有<code>__proto__</code>属性，指向原型对象的原型对象，那么原型链的概念就孕育而生了。通过<code>__proto__</code>，一个函数没有的属性，到它的原型对象上寻找，还是没有就通过<code>__prtot__</code>到原型对象的原型对象上去找，最后一直到最上层。<br>```  `</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>call,apply,bind</title>
    <link href="/2023/04/12/Call%20Apply%20Bind%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8A%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/04/12/Call%20Apply%20Bind%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8A%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>在讨论call apply bind前，有一个更重要的知识需要我们去学习，那就是JS中<code>this</code>的指向问题，理解了<code>this</code>call apply bind就是小菜一碟</p><h2 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h2><blockquote><p><strong>一句话总结，谁调用this，this就指向谁</strong></p></blockquote><h3 id="this的绑定规则"><a href="#this的绑定规则" class="headerlink" title="this的绑定规则"></a>this的绑定规则</h3><h4 id="默认绑定："><a href="#默认绑定：" class="headerlink" title="默认绑定："></a>默认绑定：</h4><ul><li><p>全局环境下，this默认绑定到window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-variable language_">window</span>); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li><li><p>函数独立调用时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-variable language_">window</span>);<br>&#125;<br><span class="hljs-title function_">foo</span>();<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li><li><p>被嵌套的函数独立调用时，this默认绑定到window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    a : <span class="hljs-number">2</span>,<br>    foo : <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>        &#125;<br>        <span class="hljs-title function_">test</span>();<br>    &#125;<br>&#125;<br>obj.<span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure><p><code>上述代码中 text</code>函数独立调用所以默认绑定到window</p><h4 id="隐式绑定："><a href="#隐式绑定：" class="headerlink" title="隐式绑定："></a>隐式绑定：</h4><p>一般地,被直接对象所包含的函数调用，也被称为方法地调用，this隐式绑定到该直接对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;<br>    a : <span class="hljs-number">1</span>;<br>    <span class="hljs-attr">foo</span>: foo,<br>    obj2 : &#123;<br>        <span class="hljs-attr">a</span>:<span class="hljs-number">2</span>,<br>        <span class="hljs-attr">foo</span>:foo<br>    &#125;<br>&#125;<br><span class="hljs-comment">//foo()函数的直接对象是obj1,this隐式绑定到obj1</span><br>obj1.<span class="hljs-title function_">foo</span>();<span class="hljs-comment">//1</span><br><span class="hljs-comment">//foo()函数的直接对象是obj2,this隐式绑定到obj2</span><br>obj1.<span class="hljs-property">obj2</span>.<span class="hljs-title function_">foo</span>();<span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><p>但是隐式绑定会出现一种情况，叫做<strong>隐式丢失</strong></p><h4 id="隐式丢失："><a href="#隐式丢失：" class="headerlink" title="隐式丢失："></a>隐式丢失：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">foo</span>:foo<br>&#125;<br><span class="hljs-comment">//把obj.foo赋予别名bar，造成了隐式丢失，因为只是把foo()函数赋给了bar，而bar与obj对象则毫无关系</span><br><span class="hljs-keyword">var</span> bar = obj.<span class="hljs-property">foo</span>;<br><span class="hljs-title function_">bar</span>();<span class="hljs-comment">//0</span><br><br></code></pre></td></tr></table></figure><p>隐式丢失指的是被隐式绑定的对象丢失了绑定的对象，从而默认绑定到了window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-title function_">fn</span>();<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">foo</span>: foo<br>&#125;<br><span class="hljs-comment">//把obj.foo当做参数传递给bar函数时,有隐式的函数赋值 fn = obj.foo,只是把foo函数赋给了fn,而fn与obj对象毫无关系</span><br><span class="hljs-title function_">bar</span>(obj.<span class="hljs-property">foo</span>);<span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    a : <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">foo</span>:foo<br>&#125;<br><span class="hljs-built_in">setTimeout</span>(obj.<span class="hljs-property">foo</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> o = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">3</span>,<span class="hljs-attr">foo</span>: foo&#125;;<br><span class="hljs-keyword">var</span> p = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">4</span>&#125;;<br>o.<span class="hljs-title function_">foo</span>();<span class="hljs-comment">//3;</span><br><span class="hljs-comment">//将o.foo函数赋值给p.foo函数，然后立即执行。相当于仅仅是foo()函数的立即调用</span><br>(p.<span class="hljs-property">foo</span> = o.<span class="hljs-property">foo</span>)();<span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><h4 id="new绑定："><a href="#new绑定：" class="headerlink" title="new绑定："></a>new绑定：</h4><p>一个函数或者方法调用之前带有关键词new，它就构成构造函数调用，对于this绑定来说，称为new绑定</p></li></ul><ol><li><p>没有return或者return没有返回值，就会使用这个新对象作为调用结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fn1</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test);<span class="hljs-comment">//&#123;a:2&#125;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fn2</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test);<span class="hljs-comment">//&#123;a:2&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>使用构造函数显示地使用return语句返回一个对象，那么调用表达式的值就是这个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fn</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test);<span class="hljs-comment">//&#123;a:1&#125;</span><br></code></pre></td></tr></table></figure><h4 id="显示绑定："><a href="#显示绑定：" class="headerlink" title="显示绑定："></a>显示绑定：</h4><p>说了这么多this的绑定和丢失，本节笔记最重要的就是这个显示绑定，也就是<code>apply``call``bind</code>三大显示绑定改变this指向的函数</p><h2 id="三大函数："><a href="#三大函数：" class="headerlink" title="三大函数："></a>三大函数：</h2><p><code>call 函数接收多个参数，第一个就是this的指向，后面多个参数是为函数本身的参数</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;一个&quot;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">allName</span>(<span class="hljs-params">firstName, lastName</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我的全名是“<span class="hljs-subst">$&#123;firstName&#125;</span><span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span><span class="hljs-subst">$&#123;lastName&#125;</span>”`</span>)<br>&#125;<br><span class="hljs-comment">// 很明显此时allName函数是没有name属性的</span><br><span class="hljs-title function_">allName</span>(<span class="hljs-string">&#x27;我是&#x27;</span>, <span class="hljs-string">&#x27;前端&#x27;</span>) <span class="hljs-comment">//我的全名是“我是前端”  this指向window</span><br>allName.<span class="hljs-title function_">call</span>(obj, <span class="hljs-string">&#x27;我是&#x27;</span>, <span class="hljs-string">&#x27;前端&#x27;</span>) <span class="hljs-comment">//我的全名是“我是一个前端” this指向obj</span><br></code></pre></td></tr></table></figure><p><code>apply</code>函数接收俩个参数，第一个和call一样是this的指向，第二个是一个数组包含函数的所有参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">allName.<span class="hljs-title function_">apply</span>(obj, [<span class="hljs-string">&#x27;我是&#x27;</span>, <span class="hljs-string">&#x27;前端&#x27;</span>])<span class="hljs-comment">//我的全名是“我是一个前端” this指向obj</span><br></code></pre></td></tr></table></figure><p><code>bind</code>接收多个参数，第一个this的指向，后面多个参数是函数本身的参数，它和call apply不同的是它执行时不会直接执行改变this后的函数，而是返回一个函数</p><blockquote><p>多个参数可以生成不同this绑定后在传递</p></blockquote></li></ol><h3 id="手撕："><a href="#手撕：" class="headerlink" title="手撕："></a>手撕：</h3><p><strong>call</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mbs = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;麻不烧&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">const</span> text = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;yy&#x27;</span><br>&#125; <span class="hljs-comment">//测试案例</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">say</span>(<span class="hljs-params">prefix, age</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>,my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,i am <span class="hljs-subst">$&#123;age&#125;</span> year old`</span>)<br>&#125;<br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mycall</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj,...args</span>)&#123;<br>    obj = obj || <span class="hljs-variable language_">window</span> <span class="hljs-comment">//传入非真值的时候换成全局对象</span><br>    <span class="hljs-keyword">const</span> only = <span class="hljs-title class_">Symbol</span>() <span class="hljs-comment">//ES6中的独一值</span><br>    obj[only] = <span class="hljs-variable language_">this</span> <span class="hljs-comment">//改变this的指向,this指的是调用它的函数</span><br>    <span class="hljs-keyword">return</span> res = obj[only](...args)<br>    <span class="hljs-keyword">delete</span> obj[only]<br>    <span class="hljs-keyword">return</span> res <span class="hljs-comment">//返回函数的结果</span><br>&#125;<br><br><br>say.<span class="hljs-title function_">mycall</span>(mbs,<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-number">16</span>) <span class="hljs-comment">//hello,my name is 麻不烧,i am 16 year old</span><br><br>say.<span class="hljs-title function_">mycall</span>(text,<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-number">16</span>) <span class="hljs-comment">//hello,my name is yy,i am 16 year old</span><br><br></code></pre></td></tr></table></figure><p><strong>apply</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//apply的实现和call异曲同工</span><br><span class="hljs-keyword">const</span> mbs = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;麻不烧&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">const</span> text = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;yy&#x27;</span><br>&#125; <span class="hljs-comment">//测试案例</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">say</span>(<span class="hljs-params">prefix, age</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>,my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,i am <span class="hljs-subst">$&#123;age&#125;</span> year old`</span>)<br>&#125;<br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myapply</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj,args</span>)&#123;<br>    obj = obj || <span class="hljs-variable language_">window</span> <span class="hljs-comment">//传入非真值的时候换成全局对象</span><br>    <span class="hljs-keyword">const</span> only = <span class="hljs-title class_">Symbol</span>() <span class="hljs-comment">//ES6中的独一值</span><br>    obj[only] = <span class="hljs-variable language_">this</span> <span class="hljs-comment">//改变this的指向,this指的是调用它的函数</span><br>    <span class="hljs-keyword">let</span> res = obj[only](...args)<br>    <span class="hljs-keyword">delete</span> obj[only]<br>    <span class="hljs-keyword">return</span> res <span class="hljs-comment">//返回函数的结果</span><br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>bind</strong><br>bind函数和call和apply还是有一点的区别，除了改变this以外，还要返回一个函数，还得支持柯里化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mybind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj,...outargs</span>)&#123;<br>    <span class="hljs-comment">//前面都一样</span><br>    obj = obj || <span class="hljs-variable language_">window</span> <span class="hljs-comment">//传入非真值的时候换成全局对象</span><br>    <span class="hljs-keyword">const</span> only = <span class="hljs-title class_">Symbol</span>() <span class="hljs-comment">//ES6中的独一值</span><br>    obj[only] = <span class="hljs-variable language_">this</span> <span class="hljs-comment">//改变this的指向,this指的是调用它的函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">...innerargs</span>)&#123;<br>        <span class="hljs-keyword">const</span> res = obj[only](...outargs,...innerargs) <span class="hljs-comment">//把第一次传入和第二次传入的参数再传进函数，属于柯里化，而且用上了闭包的思路</span><br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数的柯里化</title>
    <link href="/2023/04/12/%E5%87%BD%E6%95%B0%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <url>/2023/04/12/%E5%87%BD%E6%95%B0%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<blockquote><p>折磨死我了</p></blockquote><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>函数的柯里化指的是将一个函数从多参数传递变成单参数传递，可以增加函数的普适性同时也会增加函数的复杂度</p><h2 id="运用："><a href="#运用：" class="headerlink" title="运用："></a>运用：</h2><p>比如说书写正则表达式，对于不同的文本需要不同的正则来写，但是总是存在类似的文本需要相同的正则表达式来翻译。不将函数柯里化的话我们就需要书写很多很多的正则来套文本，但利用柯里化就可以先传入正则表达式再传入文本，变得很方便</p><h2 id="手写一个函数的柯里化："><a href="#手写一个函数的柯里化：" class="headerlink" title="手写一个函数的柯里化："></a>手写一个函数的柯里化：</h2><p>对于一般函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a,b,c</span>)&#123;<br>  <span class="hljs-keyword">return</span> a+b+c<br>&#125;<br><span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) <span class="hljs-comment">//6</span><br><span class="hljs-comment">//柯里化</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum1</span>(<span class="hljs-params">x</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum2</span>(<span class="hljs-params">y</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum3</span>(<span class="hljs-params">z</span>)&#123;<br>      <span class="hljs-keyword">return</span> x+y+z<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> sum = <span class="hljs-title function_">sum1</span>(<span class="hljs-number">1</span>)<br><span class="hljs-title function_">sum</span>(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>) <span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure><p>但是这种柯里化只能对于一小部分的函数适用，为了更大的适用范围，会更复杂的柯里化</p><blockquote><p>能力有限，依靠百度来完成高级柯里化</p></blockquote><p>思路是首先明白柯里化是分步传参，复杂的情况下可能好几步也可能一下全部传入，所以参数传入的数目要先记住，其次当传参不足的时候，得返回新的函数去接受新的参数，有点递归的意思。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//柯里化</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">curry</span>(<span class="hljs-params">fn</span>)&#123;<br>    <span class="hljs-keyword">const</span> funcArgsLength = fn.<span class="hljs-property">length</span> <span class="hljs-comment">//记录参数数目</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">curried</span>(<span class="hljs-params">...args</span>)&#123; <span class="hljs-comment">//...将参数转化为数组</span><br>        <span class="hljs-keyword">if</span>(args.<span class="hljs-property">length</span>&lt;<span class="hljs-number">3</span>)&#123; <span class="hljs-comment">//比较参数数目多少，参数不足的时候返回一个新的函数去接受接下来的参数</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args1</span>)&#123;<br>                 <span class="hljs-keyword">return</span> curried.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,args.<span class="hljs-title function_">concat</span>(args1))  <span class="hljs-comment">//fn.apply(this,数组) 将数组内容当作参数传递给this的函数对象</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <br>            <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,args)<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">let</span> curriedSum = <span class="hljs-title function_">curry</span>(sum);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curriedSum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) ); <span class="hljs-comment">// 6，仍然可以被正常调用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curriedSum</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) ); <span class="hljs-comment">// 6，对第一个参数的柯里化</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curriedSum</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>) ); <span class="hljs-comment">// 6，全柯里化</span><br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6</title>
    <link href="/2023/04/12/ES6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/04/12/ES6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于阮一峰的ES6文档</p></blockquote><h1 id="第一节-ES6比较重要的部分"><a href="#第一节-ES6比较重要的部分" class="headerlink" title="第一节-ES6比较重要的部分"></a>第一节-ES6比较重要的部分</h1><h2 id="1-解构赋值"><a href="#1-解构赋值" class="headerlink" title="1.解构赋值"></a>1.解构赋值</h2><p><em>无论是数组还是对象还是字符串，甚至于json格式的文件，都可以通过ES6新增的解构赋值的方式来将所需要的内容提起出来</em></p><h3 id="1-1数组的解构赋值"><a href="#1-1数组的解构赋值" class="headerlink" title="1.1数组的解构赋值"></a>1.1数组的解构赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a0 = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> b0 = <span class="hljs-number">2</span> <span class="hljs-comment">//在ES6之前的写法</span><br><span class="hljs-keyword">let</span> [a1,b1] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>] <span class="hljs-comment">//ES6后提供的解构，a=1，b=2</span><br></code></pre></td></tr></table></figure><p>这种写法叫做模式匹配，只要等号俩边的模式相同，左边的变量就会被赋予相同的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [[i],j,[[k]]] = [[<span class="hljs-number">1</span>],<span class="hljs-number">2</span>,[[<span class="hljs-number">3</span>]]] <span class="hljs-comment">//同样也可以解构赋值</span><br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [,,a] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <span class="hljs-comment">//a = 3</span><br><span class="hljs-keyword">let</span> [a,b,c] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>] <span class="hljs-comment">//c = undefind</span><br><span class="hljs-keyword">let</span> [a=<span class="hljs-number">1</span>,b] = [<span class="hljs-number">2</span>] <span class="hljs-comment">// a=1,b=2</span><br><span class="hljs-keyword">let</span> [a,b=<span class="hljs-number">2</span>] = [<span class="hljs-number">3</span>,undefind] <span class="hljs-comment">// a = 3 b = 2 </span><br></code></pre></td></tr></table></figure><p>解构赋值同样也允许默认值</p><h3 id="1-2对象的解构赋值"><a href="#1-2对象的解构赋值" class="headerlink" title="1.2对象的解构赋值"></a>1.2对象的解构赋值</h3><p><em>对象的解构与数组的解构最大的不同在于对象不需要左右两边一样的次序</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123;a,b&#125; = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">3</span>&#125; <span class="hljs-comment">//a = 1 b = 3</span><br><span class="hljs-keyword">let</span> &#123;b,a&#125; = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">3</span>&#125; <span class="hljs-comment">// a = 1 b = 3</span><br></code></pre></td></tr></table></figure><p>如果解构失败同样也是undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123;a&#125; = &#123;b = <span class="hljs-string">&#x27;正确&#x27;</span>&#125; <span class="hljs-comment">// a = undefined</span><br></code></pre></td></tr></table></figure><p>一样存在默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123;a,<span class="hljs-attr">b</span>:<span class="hljs-string">&#x27;默认&#x27;</span>&#125; = &#123;<span class="hljs-attr">a</span>:<span class="hljs-string">&#x27;非默认&#x27;</span>&#125; <span class="hljs-comment">// a = &#x27;非默认&#x27;，b = &#x27;默认&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="1-3字符串的解构"><a href="#1-3字符串的解构" class="headerlink" title="1.3字符串的解构"></a>1.3字符串的解构</h3><p>字符串也可以结构，这时字符串被转化为了一个类数组对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [a,b,c,d,f] = <span class="hljs-string">&#x27;Hello&#x27;</span> <span class="hljs-comment">// a=H,b=e,c=l.d=l,f=o</span><br></code></pre></td></tr></table></figure><p>类似数组的对象还有一个len的属性，同样也可以对其解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">length</span>:len&#125; = <span class="hljs-string">&#x27;Hello&#x27;</span> <span class="hljs-comment">//length = 5 </span><br></code></pre></td></tr></table></figure><h3 id="1-4函数的参数进行的解构"><a href="#1-4函数的参数进行的解构" class="headerlink" title="1.4函数的参数进行的解构"></a>1.4函数的参数进行的解构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">[x,y]</span>)&#123;<br>  <span class="hljs-keyword">return</span> x+y<br>&#125;<br>add[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>] <span class="hljs-comment">// 30</span><br></code></pre></td></tr></table></figure><p>上面那段代码中虽然add函数的参数是数组，但是传入参数的那一刻数组就被解构成变量x和y了，函数内部就只能感受到x和y</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo0</span>(<span class="hljs-params">[x,y]</span>)&#123;<br>  <span class="hljs-keyword">return</span> x+y<br>&#125;<br><span class="hljs-title function_">demo0</span>([<span class="hljs-number">10</span>,<span class="hljs-number">20</span>]) <span class="hljs-comment">//30</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo1</span>(<span class="hljs-params">[x,y=<span class="hljs-number">20</span>]</span>)&#123;<br>  <span class="hljs-keyword">return</span> x+y<br>&#125;<br><span class="hljs-title function_">demo1</span>([<span class="hljs-number">10</span>]) <span class="hljs-comment">// 30</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo2</span>(<span class="hljs-params">x=<span class="hljs-number">10</span>,y</span>)&#123;<br>  <span class="hljs-keyword">return</span> x+y<br>&#125;<br><span class="hljs-title function_">demo2</span>(<span class="hljs-number">20</span>) <span class="hljs-comment">// 30</span><br></code></pre></td></tr></table></figure><h3 id="1-5解构赋值的用途"><a href="#1-5解构赋值的用途" class="headerlink" title="1.5解构赋值的用途"></a>1.5解构赋值的用途</h3><h4 id="1-5-1-交换变量的值"><a href="#1-5-1-交换变量的值" class="headerlink" title="1.5.1 交换变量的值"></a>1.5.1 交换变量的值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;<span class="hljs-keyword">let</span> y = <span class="hljs-number">2</span><br>[x,y] = [y,x] <span class="hljs-comment">//x = 2,y = 1</span><br></code></pre></td></tr></table></figure><h4 id="1-5-2-对JSON对象数据的提取"><a href="#1-5-2-对JSON对象数据的提取" class="headerlink" title="1.5.2 对JSON对象数据的提取"></a>1.5.2 对JSON对象数据的提取</h4><p><em>解构赋值对JSON对象的数据提取尤为有用，特别在于网络请求返回的数据</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> jsonData = &#123;<br>  <span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<br>  <span class="hljs-attr">status</span>:<span class="hljs-string">&#x27;200&#x27;</span>,<br>  <span class="hljs-attr">data</span>:[<span class="hljs-number">100</span>,<span class="hljs-number">200</span>]<br>&#125;;<br><span class="hljs-keyword">let</span> &#123;id,status,<span class="hljs-attr">data</span>:number&#125; = jsonData <span class="hljs-comment">// id = 1,status=&#x27;200&#x27;,number = [100,200]</span><br></code></pre></td></tr></table></figure><h2 id="2-字符串的扩展"><a href="#2-字符串的扩展" class="headerlink" title="2.字符串的扩展"></a>2.字符串的扩展</h2><h3 id="2-1字符串的Unicode表示法"><a href="#2-1字符串的Unicode表示法" class="headerlink" title="2.1字符串的Unicode表示法"></a>2.1字符串的Unicode表示法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;\u0061&quot;</span> <span class="hljs-comment">// a</span><br></code></pre></td></tr></table></figure><h3 id="2-2字符串的遍历接口"><a href="#2-2字符串的遍历接口" class="headerlink" title="2.2字符串的遍历接口"></a>2.2字符串的遍历接口</h3><p><em>ES6为字符串都提供了遍历器接口，使得字符串可以用for of循环遍历</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> codePoint <span class="hljs-keyword">of</span> <span class="hljs-string">&#x27;foo&#x27;</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(codePoint)<br>&#125; <span class="hljs-comment">//&#x27;f&#x27; &#x27;o&#x27; &#x27;o&#x27;</span><br></code></pre></td></tr></table></figure><p>同样这个方法也可以用来遍历大于0xFFFF的码点</p><h3 id="2-3模板字符串"><a href="#2-3模板字符串" class="headerlink" title="2.3模板字符串"></a>2.3模板字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;YY&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`这篇文章的作者是<span class="hljs-subst">$&#123;name&#125;</span>`</span>) <span class="hljs-comment">// 这篇文章的作者是YY</span><br></code></pre></td></tr></table></figure><p>并且这个模板字符串可以换行写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">`随便</span><br><span class="hljs-string">换行</span><br><span class="hljs-string">写`</span> <br></code></pre></td></tr></table></figure><h3 id="2-4新增的字符串方法"><a href="#2-4新增的字符串方法" class="headerlink" title="2.4新增的字符串方法"></a>2.4新增的字符串方法</h3><ul><li>**includes()**：返回布尔值，表示是否找到了参数字符串。</li><li>**startsWith()**：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li>**endsWith()**：返回布尔值，表示参数字符串是否在原字符串的尾部。</li><li><strong>repeat()</strong>: 方法返回一个新字符串，表示将原字符串重复n次</li><li><strong>padStart(),padEnd()</strong>: 头尾补全字符</li><li><strong>trimStart(),trimEnd()</strong>:头尾删去空格   <em>用于搜索删去空格不错</em><h2 id="3-数组扩展"><a href="#3-数组扩展" class="headerlink" title="3.数组扩展"></a>3.数组扩展</h2><h3 id="3-1-Rest参数和Spread语法（利用三个点…）"><a href="#3-1-Rest参数和Spread语法（利用三个点…）" class="headerlink" title="3.1 Rest参数和Spread语法（利用三个点…）"></a>3.1 Rest参数和Spread语法（利用三个点…）</h3>Rest参数就是把剩余的参数收集到一个数组中<br>Spread就是把数组中的内容张开<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = （...args） =&gt;&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args)<br>&#125;<br><span class="hljs-title function_">a</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>) <span class="hljs-comment">//[1,2,3,4,5]</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]) <span class="hljs-comment">//1,2,3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...<span class="hljs-string">&#x27;123456&#x27;</span>) <span class="hljs-comment">//1,2,3,4,5,6</span><br></code></pre></td></tr></table></figure><h4 id="3-1-1Rest和Spread应用"><a href="#3-1-1Rest和Spread应用" class="headerlink" title="3.1.1Rest和Spread应用"></a>3.1.1Rest和Spread应用</h4></li></ul><ol><li><p>复制和修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> arr2 = [...a];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2)<br><br><span class="hljs-keyword">const</span> obj1 = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;;<br><span class="hljs-keyword">const</span> obj2 = &#123;...obj1&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj2)      <span class="hljs-comment">// &#123;name:&#x27;小明&#x27;,age:18&#125;</span><br><span class="hljs-comment">// 修改数据</span><br><span class="hljs-keyword">const</span> obj3 = &#123;...obj1,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,<span class="hljs-attr">gender</span>:<span class="hljs-string">&#x27;man&#x27;</span>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj3)      <span class="hljs-comment">// &#123; name: &#x27;jack&#x27;, age: 18, gender: &#x27;man&#x27; &#125;</span><br></code></pre></td></tr></table></figure></li><li><p>合并数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ES6 之前</span><br><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> b = [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-keyword">const</span> c = a.<span class="hljs-title function_">concat</span>(b);  <span class="hljs-comment">// [1,2,3,1,5,6]</span><br><br><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>&#125;<br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  <span class="hljs-attr">b</span>:<span class="hljs-number">1</span>,<br>&#125;<br><span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, obj1, obj2); <span class="hljs-comment">// &#123;a:1,b:1&#125;</span><br><br><span class="hljs-comment">// ES6 之后</span><br><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> b = [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-comment">// new Set()，用于数组去重</span><br><span class="hljs-keyword">const</span> c = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([...a,...b])]; <span class="hljs-comment">// [1,2,3,5,6]</span><br><br><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>&#125;<br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  <span class="hljs-attr">b</span>:<span class="hljs-number">1</span>,<br>&#125;<br><span class="hljs-keyword">const</span> obj = &#123;...obj1,...obj2&#125;; <span class="hljs-comment">// &#123;a:1,b:1&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>与解构赋值结合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>] <br><span class="hljs-keyword">const</span> [a,...arr2] = arr<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2) <span class="hljs-comment">// [2,3,4]</span><br></code></pre></td></tr></table></figure><h3 id="3-2数组的扩展方法"><a href="#3-2数组的扩展方法" class="headerlink" title="3.2数组的扩展方法"></a>3.2数组的扩展方法</h3></li></ol><ul><li>Array.from():将类数组转化为真实的数组</li><li>Array.of():将一组值，转化为数组</li><li>copyWithin():将指定位置的成员复制到指定位置，会改变原数组</li><li>find()和findIndex(): 找符合条件的数组成员</li><li>fill():使用一个定值，填充一个数组<h2 id="4-对象的扩展"><a href="#4-对象的扩展" class="headerlink" title="4.对象的扩展"></a>4.对象的扩展</h2><h3 id="4-1对象的简洁表达："><a href="#4-1对象的简洁表达：" class="headerlink" title="4.1对象的简洁表达："></a>4.1对象的简洁表达：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 变量简洁表示</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> b = &#123;a&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);   <span class="hljs-comment">// &#123;a:10&#125;</span><br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">const</span> c = &#123;<span class="hljs-attr">a</span>:a&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);  <span class="hljs-comment">// &#123;a:10&#125;</span><br><br><br><span class="hljs-comment">// 方法的简洁表示</span><br><span class="hljs-keyword">const</span> dog = &#123;<br>  <span class="hljs-title function_">speak</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;wang wang&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 等同于 </span><br><span class="hljs-keyword">const</span> dog1 = &#123;<br>  <span class="hljs-attr">speak</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;wang wang&#x27;</span>);<br>  &#125;<br>&#125;<br><br>dog.<span class="hljs-title function_">speak</span>();   <span class="hljs-comment">// &quot;wang wang&quot;</span><br>dog1.<span class="hljs-title function_">speak</span>();  <span class="hljs-comment">// &quot;wang wang&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-2用字面量定义对象"><a href="#4-2用字面量定义对象" class="headerlink" title="4.2用字面量定义对象"></a>4.2用字面量定义对象</h3><em>在ES6之前不能用变量表示对象的key</em><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 对象属性的定义</span><br><span class="hljs-keyword">const</span> stu = &#123;&#125;;<br>stu.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;yang&#x27;</span>; <span class="hljs-comment">// 方法一</span><br>stu[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">18</span>;   <span class="hljs-comment">// 方法二</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu) <span class="hljs-comment">// &#123; name: &#x27;yang&#x27;, age: 18 &#125;</span><br><br><span class="hljs-comment">// 使用字面量定义，ES6之前，只能使用方法一进行,也就是不能让对象的key是一个变量</span><br><span class="hljs-keyword">const</span> stu2 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jie&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-comment">// ES6之后允许我们通过方法二进行对象字面量的定义</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-string">&#x27;age&#x27;</span>;<br><span class="hljs-keyword">const</span> stu3 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;cao&#x27;</span>,<br>  [a]: <span class="hljs-number">18</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu3); <span class="hljs-comment">// &#123; name: &#x27;cao&#x27;, age: 18 &#125;</span><br><br><span class="hljs-comment">// 遍历输出</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> stu3) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu3[i]);<br>&#125;   <span class="hljs-comment">// cao 18</span><br></code></pre></td></tr></table></figure><h2 id="5-Set数据类型"><a href="#5-Set数据类型" class="headerlink" title="5.Set数据类型"></a>5.Set数据类型</h2><h3 id="5-1-基本用法："><a href="#5-1-基本用法：" class="headerlink" title="5.1 基本用法："></a>5.1 基本用法：</h3>Set结构类似数组，但其中所有成员的值都是唯一的，没有重复的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> s.<span class="hljs-title function_">add</span>(x));<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> s) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>&#125;<br><span class="hljs-comment">// 2 3 5 4</span><br></code></pre></td></tr></table></figure>Set函数可以接受一个数组或者类数组作为参数用来初始化<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 例一</span><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]);<br>[...set]<br><span class="hljs-comment">// [1, 2, 3, 4]</span><br><br><span class="hljs-comment">// 例二</span><br><span class="hljs-keyword">const</span> items = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>]);<br>items.<span class="hljs-property">size</span> <span class="hljs-comment">// 5</span><br><br><span class="hljs-comment">// 类数组</span><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>));<br>set.<span class="hljs-property">size</span> <span class="hljs-comment">// 56</span><br><br><span class="hljs-comment">// 类数组对象也可以作为参数</span><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><span class="hljs-variable language_">document</span><br> .<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br> .<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">div</span> =&gt;</span> set.<span class="hljs-title function_">add</span>(div));<br>set.<span class="hljs-property">size</span> <span class="hljs-comment">// 56</span><br></code></pre></td></tr></table></figure>Set也可以用来去重（配合spread语法）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 去除数组的重复成员</span><br>[...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(array)]<br><span class="hljs-comment">//去除字符串中重复的</span><br>[...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(<span class="hljs-string">&#x27;ababbc&#x27;</span>)].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment">// &quot;abc&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-2基本方法"><a href="#5-2基本方法" class="headerlink" title="5.2基本方法"></a>5.2基本方法</h3><h4 id="5-2-1-ket-values-entries-方法"><a href="#5-2-1-ket-values-entries-方法" class="headerlink" title="5.2.1 ket(),values(),entries()方法"></a>5.2.1 ket(),values(),entries()方法</h4>上述三个方法返回的都是遍历器对象。由于Set结构没有键名，只有键值，所以key()和values()方法的行为完全一致，而entries()方法返回的则是成员一致的数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">keys</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// red</span><br><span class="hljs-comment">// green</span><br><span class="hljs-comment">// blue</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">values</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// red</span><br><span class="hljs-comment">// green</span><br><span class="hljs-comment">// blue</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">entries</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// [&quot;red&quot;, &quot;red&quot;]</span><br><span class="hljs-comment">// [&quot;green&quot;, &quot;green&quot;]</span><br><span class="hljs-comment">// [&quot;blue&quot;, &quot;blue&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="5-2-2forEach"><a href="#5-2-2forEach" class="headerlink" title="5.2.2forEach()"></a>5.2.2forEach()</h4>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>]);<br>set.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">value, key</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&#x27; : &#x27;</span> + value))<br><span class="hljs-comment">// 1 : 1</span><br><span class="hljs-comment">// 4 : 4</span><br><span class="hljs-comment">// 9 : 9</span><br></code></pre></td></tr></table></figure><em>另外，forEach方法还可以有第三个参数，表示绑定处理函数内部的this对象。</em><h2 id="6-Map数据类型"><a href="#6-Map数据类型" class="headerlink" title="6.Map数据类型"></a>6.Map数据类型</h2></li></ul><p><strong>JS的对象本质上是Hash的结构，但是它的key受到了很大的限制。所以为了解决这个限制，ES6提供了一个Map数据结构，比JS的对象来的更接近Hash结构。</strong></p><h3 id="6-1基本用法"><a href="#6-1基本用法" class="headerlink" title="6.1基本用法"></a>6.1基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><span class="hljs-keyword">const</span> o = &#123;<span class="hljs-attr">p</span>: <span class="hljs-string">&#x27;Hello World&#x27;</span>&#125;;<br><br>m.<span class="hljs-title function_">set</span>(o, <span class="hljs-string">&#x27;content&#x27;</span>)<br>m.<span class="hljs-title function_">get</span>(o) <span class="hljs-comment">// &quot;content&quot;</span><br><br>m.<span class="hljs-title function_">has</span>(o) <span class="hljs-comment">// true</span><br>m.<span class="hljs-title function_">delete</span>(o) <span class="hljs-comment">// true</span><br>m.<span class="hljs-title function_">has</span>(o) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>上面代码实现了简单的set，get以及has方法<br>Map也支持接收数组参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>  [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;张三&#x27;</span>],<br>  [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;Author&#x27;</span>]<br>]);<br><br>map.<span class="hljs-property">size</span> <span class="hljs-comment">// 2</span><br>map.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">// true</span><br>map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">// &quot;张三&quot;</span><br>map.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;title&#x27;</span>) <span class="hljs-comment">// true</span><br>map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;title&#x27;</span>) <span class="hljs-comment">// &quot;Author&quot;</span><br></code></pre></td></tr></table></figure><p>事实上，不仅仅是数组，任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构都可以当作Map构造函数的参数。这就是说，Set和Map都可以用来生成新的 Map。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<br>  [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-number">1</span>],<br>  [<span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-number">2</span>]<br>]);<br><span class="hljs-keyword">const</span> m1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(set);<br>m1.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;foo&#x27;</span>) <span class="hljs-comment">// 1</span><br><br><span class="hljs-keyword">const</span> m2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&#x27;baz&#x27;</span>, <span class="hljs-number">3</span>]]);<br><span class="hljs-keyword">const</span> m3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(m2);<br>m3.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;baz&#x27;</span>) <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h4 id="6-1-1注意事项"><a href="#6-1-1注意事项" class="headerlink" title="6.1.1注意事项"></a>6.1.1注意事项</h4><ol><li><p>对同一键多次赋值会覆盖前一次的值</p></li><li><p>读取未知的键会返回undefined</p></li><li><p>Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br><span class="hljs-keyword">const</span> k1 = [<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-keyword">const</span> k2 = [<span class="hljs-string">&#x27;a&#x27;</span>];<br><br>map<br>.<span class="hljs-title function_">set</span>(k1, <span class="hljs-number">111</span>)<br>.<span class="hljs-title function_">set</span>(k2, <span class="hljs-number">222</span>);<br><br>map.<span class="hljs-title function_">get</span>(k1) <span class="hljs-comment">// 111</span><br>map.<span class="hljs-title function_">get</span>(k2) <span class="hljs-comment">// 222</span><br></code></pre></td></tr></table></figure></li><li><p>如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，比如0和-0就是一个键</p><h3 id="6-2属性以及方法"><a href="#6-2属性以及方法" class="headerlink" title="6.2属性以及方法"></a>6.2属性以及方法</h3></li></ol><p><strong>（1）size 属性</strong><br>size属性返回 Map 结构的成员总数。<br><strong>（2）Map.prototype.set(key, value)</strong><br>set方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。<br>又因为返回Map结构，所以可以使用链式写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br>m.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;edition&#x27;</span>, <span class="hljs-number">6</span>)        <span class="hljs-comment">// 键是字符串</span><br>m.<span class="hljs-title function_">set</span>(<span class="hljs-number">262</span>, <span class="hljs-string">&#x27;standard&#x27;</span>)     <span class="hljs-comment">// 键是数值</span><br>m.<span class="hljs-title function_">set</span>(<span class="hljs-literal">undefined</span>, <span class="hljs-string">&#x27;nah&#x27;</span>)    <span class="hljs-comment">// 键是 undefined</span><br><br><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>  .<span class="hljs-title function_">set</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br>  .<span class="hljs-title function_">set</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br>  .<span class="hljs-title function_">set</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;c&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>（3）Map.prototype.get(key)</strong><br>get方法读取key对应的键值，如果找不到key，返回undefined。<br><strong>（4）Map.prototype.has(key)</strong><br>has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。<br><strong>（5）Map.prototype.delete(key)</strong><br>delete方法删除某个键，返回true。如果删除失败，返回false。<br><strong>（6）Map.prototype.clear()</strong><br>clear方法清除所有成员，没有返回值。</p><h2 id="7-Pomise"><a href="#7-Pomise" class="headerlink" title="7.Pomise"></a>7.Pomise</h2><h3 id="7-1-Pomise含义"><a href="#7-1-Pomise含义" class="headerlink" title="7.1 Pomise含义"></a>7.1 Pomise含义</h3><p>从语法上说Promise是一个对象，他可以获取异步操作的消息，同时也具有一定的API来进行处理<br>Promise有两个特点：</p><ol><li>对象的状态不受外界影响。它具有三个状态：pending（进行中），fulfilled（已成功），rejected（已失败），只有异步操作的结果会决定这个对象的状态</li><li>一旦对象状态确定，无法再改变，任何时候都能得到这个结果。</li></ol><p>Promise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><h3 id="7-2基本用法"><a href="#7-2基本用法" class="headerlink" title="7.2基本用法"></a>7.2基本用法</h3><p>Promise对象是个构造函数，用来生成Promise实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-comment">// ... some code</span><br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-comment">/* 异步操作成功 */</span>)&#123;<br>    <span class="hljs-title function_">resolve</span>(value);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>promise函数支持接收俩个函数参数，分别是resolve和reject。俩个参数的作用是改变promise的状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">timeout</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve, ms, <span class="hljs-string">&#x27;done&#x27;</span>);<br>  &#125;);<br>&#125;<br><br><span class="hljs-title function_">timeout</span>(<span class="hljs-number">100</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;); <span class="hljs-comment">//done</span><br></code></pre></td></tr></table></figure><p>上述代码中的.then可以接受俩个回调函数作参数,当promise函数状态改变时调用。<br>Promise 新建后就会立即执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Promise&#x27;</span>);<br>  <span class="hljs-title function_">resolve</span>();<br>&#125;);<br><br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;resolved.&#x27;</span>);<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hi!&#x27;</span>);<br><br><span class="hljs-comment">// Promise</span><br><span class="hljs-comment">// Hi!</span><br><span class="hljs-comment">// resolved</span><br></code></pre></td></tr></table></figure><h3 id="7-3一些方法"><a href="#7-3一些方法" class="headerlink" title="7.3一些方法"></a>7.3一些方法</h3><ol><li>Promise.prototype.then()</li><li>Promise.prototype.catch()</li><li>Promise.prototype.finally()</li><li>Promise.all()</li><li>Promise.race()</li><li>Promise.allSettled()</li><li>Promise.any()</li><li>Promise.resolve()</li><li>Promise.reject()</li></ol><h1 id="第二节-ES6中少用到的内容（可能对于菜鸟属于少用类型）"><a href="#第二节-ES6中少用到的内容（可能对于菜鸟属于少用类型）" class="headerlink" title="第二节-ES6中少用到的内容（可能对于菜鸟属于少用类型）"></a>第二节-ES6中少用到的内容（可能对于菜鸟属于少用类型）</h1><h2 id="8-Symbol类型数据"><a href="#8-Symbol类型数据" class="headerlink" title="8.Symbol类型数据"></a>8.Symbol类型数据</h2><h3 id="8-1基本含义"><a href="#8-1基本含义" class="headerlink" title="8.1基本含义"></a>8.1基本含义</h3><p>对于ES5以前的对象属性名字都是字符串，就很容易出现重复名字的情况，所以为了避免这种情况，ES6引入了一个新的数据类型–Symbol，表示独一无二的值。</p><h3 id="8-2-Symbol的使用"><a href="#8-2-Symbol的使用" class="headerlink" title="8.2 Symbol的使用"></a>8.2 Symbol的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s = <span class="hljs-title class_">Symbol</span>();<br><br><span class="hljs-keyword">typeof</span> s<br><span class="hljs-comment">// &quot;symbol&quot;</span><br></code></pre></td></tr></table></figure><p><code>Symbol</code>函数同时可以接收一个字符串内容来作为描述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;bar&#x27;</span>);<br><br>s1 <span class="hljs-comment">// Symbol(foo)</span><br>s2 <span class="hljs-comment">// Symbol(bar)</span><br><br>s1.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;Symbol(foo)&quot;</span><br>s2.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;Symbol(bar)&quot;</span><br></code></pre></td></tr></table></figure><p>但是注意，不管<code>Symbol</code>函数是否接收相同的变量名或者均不接收变量名，二者的返回值不相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 没有参数的情况</span><br><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>();<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>();<br><br>s1 === s2 <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// 有参数的情况</span><br><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><br>s1 === s2 <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="8-3-Symbol使用场景"><a href="#8-3-Symbol使用场景" class="headerlink" title="8.3 Symbol使用场景"></a>8.3 Symbol使用场景</h3><p>对于一个独一无二的变量，最主要的运用场景就是给对象属性命名来避免重复。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> mySymbol = <span class="hljs-title class_">Symbol</span>();<br><br><span class="hljs-comment">// 第一种写法</span><br><span class="hljs-keyword">let</span> a = &#123;&#125;;<br>a[mySymbol] = <span class="hljs-string">&#x27;Hello!&#x27;</span>;<br><br><span class="hljs-comment">// 第二种写法</span><br><span class="hljs-keyword">let</span> a = &#123;<br>  [mySymbol]: <span class="hljs-string">&#x27;Hello!&#x27;</span><br>&#125;;<br><br><span class="hljs-comment">// 第三种写法</span><br><span class="hljs-keyword">let</span> a = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(a, mySymbol, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Hello!&#x27;</span> &#125;);<br><br><span class="hljs-comment">// 以上写法都得到同样结果</span><br>a[mySymbol] <span class="hljs-comment">// &quot;Hello!&quot;</span><br></code></pre></td></tr></table></figure><p>注意，Symbol作为对象属性名的时候，不能使用点运算符，并且在对象内部的时候Symbol必须放在方括号之中。</p><h3 id="8-4关于Symbol的遍历问题"><a href="#8-4关于Symbol的遍历问题" class="headerlink" title="8.4关于Symbol的遍历问题"></a>8.4关于Symbol的遍历问题</h3><p>特别的是，当<code>Symbol</code>作为属性值的时候，该属性不会出现在<code>for..of``for..in</code>循环中，同时也不会被<code>Object.keys()``Object.getOwnPropertyNames()``JSON.stringify()</code>返回。<br>但是它也不是一个私有属性，它可以被<code>Object.getOwnProperSymbols()</code>方法获取，这个方法可以获取指定的对象的所有Symbol值的一个数组。</p><h2 id="9-Proxy代理拦截"><a href="#9-Proxy代理拦截" class="headerlink" title="9.Proxy代理拦截"></a>9.Proxy代理拦截</h2><h3 id="9-1概述："><a href="#9-1概述：" class="headerlink" title="9.1概述："></a>9.1概述：</h3><p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p><h3 id="9-2使用："><a href="#9-2使用：" class="headerlink" title="9.2使用："></a>9.2使用：</h3><p>ES6原生提供Proxy构造函数，用来生成Proxy实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br></code></pre></td></tr></table></figure><p>Proxy对象都是上面的写法，target指的是要拦截的目标，即你所要代理拦截的目标。handler指的是你所定义的拦截行为。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义一个普通的对象obj</span><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;_island&quot;</span><br>&#125;;<br><br><span class="hljs-comment">// 代理obj这个对象，并传入get捕获器</span><br><span class="hljs-keyword">const</span> objProxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj, &#123;<br>  <span class="hljs-comment">// get捕获器</span><br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, key</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`捕获到对象获取<span class="hljs-subst">$&#123;key&#125;</span>属性的值操作`</span>);<br>    <span class="hljs-keyword">return</span> target[key];<br>  &#125;,<br>&#125;);<br><br><span class="hljs-comment">// 通过代理对象操作obj对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objProxy.<span class="hljs-property">name</span>);<br><span class="hljs-comment">// 捕获到对象获取name属性的值操作</span><br><span class="hljs-comment">// _island</span><br></code></pre></td></tr></table></figure><p>上述代码中，target为obj，说明拦截obj的行为。handler上传入了一个get捕获器，主要是用于捕获读取obj对象属性的行为是触发，即一读取obj对象属性则触发get方法。<br>一个对象可以设置多个拦截函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> handler = &#123;<br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, name</span>) &#123;<br>    <span class="hljs-keyword">if</span> (name === <span class="hljs-string">&#x27;prototype&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, &#x27;</span> + name;<br>  &#125;,<br>  <span class="hljs-attr">apply</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, thisBinding, args</span>) &#123;<br>    <span class="hljs-keyword">return</span> args[<span class="hljs-number">0</span>];<br>  &#125;,<br>  <span class="hljs-attr">construct</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, args</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">value</span>: args[<span class="hljs-number">1</span>]&#125;;<br>  &#125;<br>&#125;;<br><span class="hljs-keyword">var</span> fproxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;, handler);<br><span class="hljs-title function_">fproxy</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">new</span> <span class="hljs-title function_">fproxy</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// &#123;value: 2&#125;</span><br>fproxy.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br>fproxy.<span class="hljs-property">foo</span> === <span class="hljs-string">&quot;Hello, foo&quot;</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="9-3-Proxy拦截函数"><a href="#9-3-Proxy拦截函数" class="headerlink" title="9.3 Proxy拦截函数"></a>9.3 Proxy拦截函数</h3><ul><li>**get(target, propKey, receiver)**：拦截对象属性的读取，比如proxy.foo和proxy[‘foo’]。</li><li>**set(target, propKey, value, receiver)**：拦截对象属性的设置，比如proxy.foo = v或proxy[‘foo’] = v，返回一个布尔值。</li><li>**has(target, propKey)**：拦截propKey in proxy的操作，返回一个布尔值。</li><li>**deleteProperty(target, propKey)**：拦截delete proxy[propKey]的操作，返回一个布尔值。</li><li>**ownKeys(target)**：拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。</li><li>**getOwnPropertyDescriptor(target, propKey)**：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。</li><li>**defineProperty(target, propKey, propDesc)**：拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。</li><li>**preventExtensions(target)**：拦截Object.preventExtensions(proxy)，返回一个布尔值。</li><li>**getPrototypeOf(target)**：拦截Object.getPrototypeOf(proxy)，返回一个对象。</li><li>**isExtensible(target)**：拦截Object.isExtensible(proxy)，返回一个布尔值。</li><li>**setPrototypeOf(target, proto)**：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</li><li>**apply(target, object, args)**：拦截 Proxy 实例作为函数调用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(…)。</li><li>**construct(target, args)**：拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(…args)。</li></ul><p>具体使用可以上ES6文档查看</p><h3 id="9-4this的指向问题"><a href="#9-4this的指向问题" class="headerlink" title="9.4this的指向问题"></a>9.4this的指向问题</h3><p>Proxy对象可以对我们的目标对象进行访问拦截，当你没有设置拦截函数的时候，目标对象的this指向就会被改变成Proxy对象，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123;<br>  <span class="hljs-attr">m</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === proxy);<br>  &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> handler = &#123;&#125;;<br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br>target.<span class="hljs-title function_">m</span>() <span class="hljs-comment">// false</span><br>proxy.<span class="hljs-title function_">m</span>()  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="10-Module语法："><a href="#10-Module语法：" class="headerlink" title="10.Module语法："></a>10.Module语法：</h2><h3 id="10-1概述"><a href="#10-1概述" class="headerlink" title="10.1概述"></a>10.1概述</h3><p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// CommonJS模块</span><br><span class="hljs-keyword">let</span> &#123; stat, exists, readfile &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">let</span> _fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">let</span> stat = _fs.<span class="hljs-property">stat</span>;<br><span class="hljs-keyword">let</span> exists = _fs.<span class="hljs-property">exists</span>;<br><span class="hljs-keyword">let</span> readfile = _fs.<span class="hljs-property">readfile</span>;<br></code></pre></td></tr></table></figure><p>CommonJS模块导入属于运行时加载，原理是整体加载<code>fs</code>模块，然后生成<code>_fs</code>对象，再从上面读取三个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ES6模块</span><br><span class="hljs-keyword">import</span> &#123; stat, exists, readFile &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span>;<br></code></pre></td></tr></table></figure><p>上面代码的实质是从<code>fs</code>模块加载 3 个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载。</p><h3 id="10-2-import（）"><a href="#10-2-import（）" class="headerlink" title="10.2.import（）"></a>10.2.import（）</h3><p>上面说到ES6模块是从静态加载，所以只能将import函数放在代码最上端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">if</span> (x === <span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-keyword">import</span> <span class="hljs-title class_">MyModual</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./myModual&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但在ES2020引入<code>import()</code>函数支持动态加载模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span>(specifier)<br></code></pre></td></tr></table></figure><p>上面代码中，<code>import</code>函数的参数<code>specifier</code>，指定所要加载的模块的位置。<code>import</code>命令能够接受什么参数,<code>import()</code>函数就能接受什么参数，两者区别主要是后者为动态加载。<br><code>import()</code>返回一个<code>Promise</code>对象，因此<code>import()</code>函数加载一个模块后支持<code>then</code>语法<br>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./myModule.js&#x27;</span>)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">myModule</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myModule.<span class="hljs-property">default</span>);<br>&#125;); <span class="hljs-comment">//直接获取default</span><br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module1.js&#x27;</span>),<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module2.js&#x27;</span>),<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module3.js&#x27;</span>),<br>])<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">[module1, module2, module3]</span>) =&gt;</span> &#123;<br>   ···<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> myModule = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./myModule.js&#x27;</span>);<br>  <span class="hljs-keyword">const</span> &#123;export1, export2&#125; = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./myModule.js&#x27;</span>);<br>  <span class="hljs-keyword">const</span> [module1, module2, module3] =<br>    <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>      <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module1.js&#x27;</span>),<br>      <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module2.js&#x27;</span>),<br>      <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module3.js&#x27;</span>),<br>    ]);<br>&#125;<br><span class="hljs-title function_">main</span>();<br></code></pre></td></tr></table></figure><h3 id="10-3严格模式"><a href="#10-3严格模式" class="headerlink" title="10.3严格模式"></a>10.3严格模式</h3><p>ES6的模块导入自动采用严格模式<br>严格模式主要有以下限制。</p><ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用with语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>不能删除变量delete prop，会报错，只能删除属性delete global[prop]</li><li>eval不会在它的外层作用域引入变量</li><li>eval和arguments不能被重新赋值</li><li>arguments不会自动反映函数参数的变化</li><li>不能使用arguments.callee</li><li>不能使用arguments.caller</li><li>禁止this指向全局对象</li><li>不能使用fn.caller和fn.arguments获取函数调用的堆栈</li><li>增加了保留字（比如protected、static和interface）<h3 id="10-4-export和import命令"><a href="#10-4-export和import命令" class="headerlink" title="10.4 export和import命令"></a>10.4 export和import命令</h3>模块功能主要由<code>export</code>和<code>import</code>俩个命令组成<h4 id="10-4-1-Export命令"><a href="#10-4-1-Export命令" class="headerlink" title="10.4.1 Export命令"></a>10.4.1 Export命令</h4>一个文件就是一个模块，你可以通过<code>import()</code>进行导入。但你的JS文件里的变量外界无法获取，所以就需要<code>export</code>函数命令进行导出<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// profile.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> firstName = <span class="hljs-string">&#x27;Michael&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&#x27;Jackson&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> year = <span class="hljs-number">1958</span>;<br></code></pre></td></tr></table></figure>这样子外界就可以获取到<code>firstName``lastName``year</code>三个变量<br>当然你也可以这么写<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// profile.js</span><br><span class="hljs-keyword">var</span> firstName = <span class="hljs-string">&#x27;Michael&#x27;</span>;<br><span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&#x27;Jackson&#x27;</span>;<br><span class="hljs-keyword">var</span> year = <span class="hljs-number">1958</span>;<br><span class="hljs-keyword">export</span> &#123; firstName, lastName, year &#125;;<br></code></pre></td></tr></table></figure><code>export</code>不止可以导出变量，同时也可以导出函数和类（class）<br>你可以通过<code>as</code>关键词重命名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">v1</span>(<span class="hljs-params"></span>) &#123; ... &#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">v2</span>(<span class="hljs-params"></span>) &#123; ... &#125;<br><span class="hljs-keyword">export</span> &#123;<br>  v1 <span class="hljs-keyword">as</span> streamV1,<br>  v2 <span class="hljs-keyword">as</span> streamV2,<br>  v2 <span class="hljs-keyword">as</span> streamLatestVersion<br>&#125;;<br></code></pre></td></tr></table></figure>特别注意的是，你导出的东西必须和文件内的变量建立联系<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">export</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">var</span> m = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> m;<br></code></pre></td></tr></table></figure>另外，<code>export</code>输出的接口与其对应的值是动态绑定关系，可以获取到模块内部实时的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> foo = <span class="hljs-string">&#x27;bar&#x27;</span>;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> foo = <span class="hljs-string">&#x27;baz&#x27;</span>, <span class="hljs-number">500</span>);<br></code></pre></td></tr></table></figure>最后，<code>export</code>命令可以出现在模块的任何地方，只要处于模块顶层，不能在块级作用域内，因为这样就违背了ES6模块的静态加载设计<h4 id="10-4-2-import命令"><a href="#10-4-2-import命令" class="headerlink" title="10.4.2 import命令"></a>10.4.2 import命令</h4>当JS文件用export命令定义了对外的接口后，你就可以用<code>import</code>函数进行导入加载模块<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; firstName, lastName, year &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./profile.js&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params">element</span>) &#123;<br>  element.<span class="hljs-property">textContent</span> = firstName + <span class="hljs-string">&#x27; &#x27;</span> + lastName;<br>&#125;<br></code></pre></td></tr></table></figure>大括号内的名字必须和被导入模块内的变量名一样，当然你也可以用as来重命名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; lastName <span class="hljs-keyword">as</span> surname &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./profile.js&#x27;</span>;<br></code></pre></td></tr></table></figure><code>import</code>命令输入的变量都是只读的，因为他本质是输入接口，所以不能在加载模块的脚本里面改写接口</li></ul><p>但是<code>import</code>导入的对象，你可以改变他的属性，但是最好别这么做，这样文件会难以维护，所以一切输入的模块都当作只读。</p><p><code>import</code>命令后的from接着是相对或者绝对路径，如果用模块名，必须要有配置文件</p><p><code>import</code>命令是静态加载，加载优于一切，在编译阶段就执行完毕，所以不能使用表达式和变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-string">&#x27;f&#x27;</span> + <span class="hljs-string">&#x27;oo&#x27;</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;<br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable language_">module</span> = <span class="hljs-string">&#x27;my_module&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-variable language_">module</span>;<br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">if</span> (x === <span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;module1&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;module2&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-5-整体加载"><a href="#10-5-整体加载" class="headerlink" title="10.5 整体加载"></a>10.5 整体加载</h3><p>除了上面说到的指定某个加载方法，还可以*来整体加载一个模块到一个对象上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> circle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./circle&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;圆面积：&#x27;</span> + circle.<span class="hljs-title function_">area</span>(<span class="hljs-number">4</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;圆周长：&#x27;</span> + circle.<span class="hljs-title function_">circumference</span>(<span class="hljs-number">14</span>));<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <br></code></pre></td></tr></table></figure><h3 id="10-6-export和import的复合写法"><a href="#10-6-export和import的复合写法" class="headerlink" title="10.6 export和import的复合写法"></a>10.6 export和import的复合写法</h3><p>在一个模块中先后输入输出同一个模块，import和export可以写在一起，但是因为类似于转接一个模块，所以这个文件中不能用导入模块的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> &#123; foo, bar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;<br><span class="hljs-comment">// 可以简单理解为</span><br><span class="hljs-keyword">import</span> &#123; foo, bar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;<br><span class="hljs-keyword">export</span> &#123; foo, bar &#125;;<br></code></pre></td></tr></table></figure><p>模块的接口改名和整体输出，可以采用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 接口改名</span><br><span class="hljs-keyword">export</span> &#123; foo <span class="hljs-keyword">as</span> myFoo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;<br><span class="hljs-comment">// 整体输出</span><br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;<br></code></pre></td></tr></table></figure><p>ES2020还提供了这样的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> * <span class="hljs-keyword">as</span> ns <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mod&quot;</span>;<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> ns <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mod&quot;</span>;<br><span class="hljs-keyword">export</span> &#123;ns&#125;;<br></code></pre></td></tr></table></figure><h3 id="10-7-浏览器加载"><a href="#10-7-浏览器加载" class="headerlink" title="10.7 浏览器加载"></a>10.7 浏览器加载</h3><p>在HTML传统网页中，浏览器通过<code>&lt;script&gt;</code>标签加载JS脚本，但是一旦JS文件过大，加载过慢就会卡死，因为加载属于同步加载，只有加载完才能接着渲染。<br>所以后来浏览器支持脚本异步加载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;path/to/myModule.js&quot;</span> defer&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;path/to/myModule.js&quot;</span> <span class="hljs-attr">async</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>derfer和async加载的区别：</p><ul><li>defer加载是JS文件等到整个页面都渲染完了才会执行</li><li>async加载是页面渲染的同时JS文件加载，等JS加载完会中断页面渲染然后加载JS，JS结束后才会继续渲染</li></ul><p>浏览器加载 ES6 模块，也使用<script>标签，但是要加入type="module"属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;module&quot;</span> src=<span class="hljs-string">&quot;./foo.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="10-8-ES6模块与CommonJS模块的区别"><a href="#10-8-ES6模块与CommonJS模块的区别" class="headerlink" title="10.8 ES6模块与CommonJS模块的区别"></a>10.8 ES6模块与CommonJS模块的区别</h3><p>他们有三个重大的区别</p><ol><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</li><li>CommonJS 模块的require()是同步加载模块，ES6 模块的import命令是异步加载，有一个独立的模块依赖的解析阶段。</li></ol><p>第一个区别在上文中有提到过ES6模块输出的值是会随着模块内部函数等操作改变值的数值，可以实时获取模块内部动态的值。而CommonJS模块加载后，内部的值就不会动态变化了。<br>第二和第三个区别在上文中都有介绍，这里就不多说了</p><h3 id="10-9-Node-js的模块加载方法"><a href="#10-9-Node-js的模块加载方法" class="headerlink" title="10.9 Node.js的模块加载方法"></a>10.9 Node.js的模块加载方法</h3><p>JavaScript 现在有两种模块。一种是 ES6 模块，简称 ESM；另一种是 CommonJS 模块，简称 CJS。<br>CommonJS 模块是 Node.js 专用的，与 ES6 模块不兼容。语法上面，两者最明显的差异是，CommonJS 模块使用<code>require()</code>和<code>module.exports</code>，ES6 模块使用import和export。<br>它们采用不同的加载方案。从 Node.js v13.2 版本开始，Node.js 已经默认打开了 ES6 模块支持。<br>Node.js要求ES6模块的文件后缀是<code>.mjs</code>, 如果不想改变后缀，可以在项目的package.js文件中指定type字段为module。<br>而CommonJS模块文件后缀是<code>.cjs</code><br>注意CommonJS和ES6最好不要混用，因为二者加载方式不同</p><h4 id="10-9-1-CommonJS模块加载ES6模块"><a href="#10-9-1-CommonJS模块加载ES6模块" class="headerlink" title="10.9.1 CommonJS模块加载ES6模块"></a>10.9.1 CommonJS模块加载ES6模块</h4><p>CommonJS模块中只能用import()加载ES6模块</p><h4 id="10-9-2-ES6模块加载CommonJS模块"><a href="#10-9-2-ES6模块加载CommonJS模块" class="headerlink" title="10.9.2 ES6模块加载CommonJS模块"></a>10.9.2 ES6模块加载CommonJS模块</h4><p>ES6 模块的import命令可以加载 CommonJS 模块，但是只能整体加载，不能只加载单一的输出项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">import</span> packageMain <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;commonjs-package&#x27;</span>;<br><br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">import</span> &#123; method &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;commonjs-package&#x27;</span>;<br></code></pre></td></tr></table></figure><p>如果需要单一输出，可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> packageMain <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;commonjs-package&#x27;</span>;<br><span class="hljs-keyword">const</span> &#123; method &#125; = packageMain;<br></code></pre></td></tr></table></figure><h4 id="10-9-3-同时支持俩种格式"><a href="#10-9-3-同时支持俩种格式" class="headerlink" title="10.9.3 同时支持俩种格式"></a>10.9.3 同时支持俩种格式</h4><p>如果原始模块是 ES6 格式，那么需要给出一个整体输出接口，比如export default obj，使得 CommonJS 可以用import()进行加载。<br>如果原始模块是 CommonJS 格式，那么可以加一个包装层。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> cjsModule <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../index.js&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> foo = cjsModule.<span class="hljs-property">foo</span>;<br></code></pre></td></tr></table></figure><p>上面代码先整体输入 CommonJS 模块，然后再根据需要输出具名接口。<br>你可以把这个文件的后缀名改为.mjs，或者将它放在一个子目录，再在这个子目录里面放一个单独的package.json文件，指明{ type: “module” }。</p><h3 id="10-10-加载路径"><a href="#10-10-加载路径" class="headerlink" title="10.10 加载路径"></a>10.10 加载路径</h3><p>ES6模块的加载路径必须给出脚本的完整路径，不能省略后缀<br>为了与浏览器的import加载规则相同，Node.js的<code>.mjs</code>文件支持URL<br>目前，Node.js 的import命令只支持加载本地模块（file:协议）和data:协议，不支持加载远程模块。另外，脚本路径只支持相对路径，不支持绝对路径（即以/或//开头的路径）。</p><h2 id="11-类"><a href="#11-类" class="headerlink" title="11.类"></a>11.类</h2><h3 id="11-1类语法"><a href="#11-1类语法" class="headerlink" title="11.1类语法"></a>11.1类语法</h3><p>基本的类语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  prop = value; <span class="hljs-comment">// 属性</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">...</span>) &#123; <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-comment">// ...</span><br>  &#125;<br><br>  <span class="hljs-title function_">method</span>(<span class="hljs-params">...</span>) &#123;&#125; <span class="hljs-comment">// method</span><br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">something</span>(<span class="hljs-params">...</span>) &#123;&#125; <span class="hljs-comment">// getter 方法</span><br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">something</span>(<span class="hljs-params">...</span>) &#123;&#125; <span class="hljs-comment">// setter 方法</span><br><br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;&#125; <span class="hljs-comment">// 有计算名称（computed name）的方法（此处为 symbol）</span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>技术上来说，MyClass 是一个函数（我们提供作为 constructor 的那个），而 methods、getters 和 setters 都被写入了 MyClass.prototype。</p><h3 id="11-2类的继承"><a href="#11-2类的继承" class="headerlink" title="11.2类的继承"></a>11.2类的继承</h3><ol><li>想要扩展一个类：class Child extends Parent：<ul><li>这意味着 Child.prototype.<strong>proto</strong> 将是 Parent.prototype，所以方法会被继承。</li></ul></li><li>重写一个 constructor：<ul><li>在使用 this 之前，我们必须在 Child 的 constructor 中将父 constructor 调用为 super()。</li></ul></li><li>重写一个方法：<ul><li>我们可以在一个 Child 方法中使用 super.method() 来调用 Parent 方法。</li></ul></li><li>内部：<ul><li>方法在内部的 [[HomeObject]] 属性中记住了它们的类/对象。这就是 super 如何解析父方法的。</li><li>因此，将一个带有 super 的方法从一个对象复制到另一个对象是不安全的。</li></ul></li></ol><p>补充：</p><ul><li>箭头函数没有自己的 this 或 super，所以它们能融入到就近的上下文中，像透明似的。<h3 id="11-3静态方法和静态属性"><a href="#11-3静态方法和静态属性" class="headerlink" title="11.3静态方法和静态属性"></a>11.3静态方法和静态属性</h3>静态方法被用于实现属于整个类的功能。它与具体的类实例无关。<br>举个例子， 一个用于进行比较的方法 Article.compare(article1, article2) 或一个工厂（factory）方法 Article.createTodays()。<br>在类声明中，它们都被用关键字 static 进行了标记。<br>静态属性被用于当我们想要存储类级别的数据时，而不是绑定到实例。<br>语法如下所示：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  <span class="hljs-keyword">static</span> property = ...;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">method</span>(<span class="hljs-params"></span>) &#123;<br>    ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>从技术上讲，静态声明与直接给类本身赋值相同：<br>MyClass.property = … MyClass.method = …<br>静态属性和方法是可被继承的。<br>对于 class B extends A，类 B 的 prototype 指向了 A：B.[[Prototype]] = A。因此，如果一个字段在 B 中没有找到，会继续在 A 中查找。<h3 id="11-4私有变量和私有方法"><a href="#11-4私有变量和私有方法" class="headerlink" title="11.4私有变量和私有方法"></a>11.4私有变量和私有方法</h3>就面向对象编程（OOP）而言，内部接口与外部接口的划分被称为封装。<br>它具有以下优点：</li></ul><p><strong>保护用户，使他们不会误伤自己</strong><br>想象一下，有一群开发人员在使用一个咖啡机。这个咖啡机是由“最好的咖啡机”公司制造的，工作正常，但是保护罩被拿掉了。因此内部接口暴露了出来。<br>所有的开发人员都是文明的 —— 他们按照预期使用咖啡机。但其中的一个人，约翰，他认为自己是最聪明的人，并对咖啡机的内部做了一些调整。然而，咖啡机两天后就坏了。<br>这肯定不是约翰的错，而是那个取下保护罩并让约翰进行操作的人的错。<br>编程也一样。如果一个 class 的使用者想要改变那些本不打算被从外部更改的东西 —— 后果是不可预测的。<br><strong>可支持性</strong><br>编程的情况比现实生活中的咖啡机要复杂得多，因为我们不只是购买一次。我们还需要不断开发和改进代码。<br><strong>如果我们严格界定内部接口，那么这个 class 的开发人员可以自由地更改其内部属性和方法，甚至无需通知用户。</strong><br>如果你是这样的 class 的开发者，那么你会很高兴知道可以安全地重命名私有变量，可以更改甚至删除其参数，因为没有外部代码依赖于它们。<br>对于用户来说，当新版本问世时，应用的内部可能被进行了全面检修，但如果外部接口相同，则仍然很容易升级。<br><strong>隐藏复杂性</strong><br>人们喜欢使用简单的东西。至少从外部来看是这样。内部的东西则是另外一回事了。<br>程序员也不例外。<br><strong>当实施细节被隐藏，并提供了简单且有据可查的外部接口时，总是很方便的。</strong><br>为了隐藏内部接口，我们使用受保护的或私有的属性：</p><ul><li>受保护的字段以 _ 开头。这是一个众所周知的约定，不是在语言级别强制执行的。程序员应该只通过它的类和从它继承的类中访问以 _ 开头的字段。</li><li>私有字段以 # 开头。JavaScript 确保我们只能从类的内部访问它们。</li></ul><p>目前，各个浏览器对私有字段的支持不是很好，但可以用 polyfill 解决。</p><h3 id="11-5类型检查方法"><a href="#11-5类型检查方法" class="headerlink" title="11.5类型检查方法"></a>11.5类型检查方法</h3><p>让我们总结一下我们知道的类型检查方法：</p><table><thead><tr><th></th><th>用于</th><th>返回值</th></tr></thead><tbody><tr><td>typeof</td><td>原始数据类型</td><td>string</td></tr><tr><td>{}.toString</td><td>原始数据类型，内建对象，包含Symbol.toStringTag 属性的对象</td><td>string</td></tr><tr><td>instanceof</td><td>对象</td><td>true/false</td></tr></tbody></table><p>正如我们所看到的，从技术上讲，{}.toString 是一种“更高级的” typeof。<br>当我们使用类的层次结构（hierarchy），并想要对该类进行检查，同时还要考虑继承时，这种场景下 instanceof 操作符确实很出色。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack</title>
    <link href="/2023/04/12/webpack/"/>
    <url>/2023/04/12/webpack/</url>
    
    <content type="html"><![CDATA[<blockquote><p>webpack是一个打包工具，类似一个工厂，可以自动化的完成一些内容</p></blockquote><h3 id="关于webpack的配置（简陋）"><a href="#关于webpack的配置（简陋）" class="headerlink" title="关于webpack的配置（简陋）"></a>关于webpack的配置（简陋）</h3><p><a href="https://juejin.cn/post/7038433081526583310">比较重要的一些配置</a><br><strong>对于CSS需要下载的loader是 css-loader和style-loader</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./mainPage/main/main1&#x27;</span>,<br>    mode :<span class="hljs-string">&#x27;production&#x27;</span>,<br>    output : &#123;<br>        <span class="hljs-attr">filename</span>:<span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>        <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;./src&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">module</span>:&#123;<br>        <span class="hljs-comment">//css处理</span><br>        <span class="hljs-attr">rules</span>:[&#123;<br>            <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.css/i</span>,<br>            <span class="hljs-attr">use</span>:[<br>                <span class="hljs-string">&quot;style-loader&quot;</span>,<br>                <span class="hljs-string">&quot;css-loader&quot;</span><br>            ],<br>        &#125;]<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>对于JS文件的babel转化需要</strong><code>**npm i -D @babel/core @babel/preset-env babel-loader **</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">module</span>: &#123;<br>      <span class="hljs-comment">//css处理</span><br>      <span class="hljs-attr">rules</span>: [<br>          <span class="hljs-comment">//js转化</span><br>          &#123;<br>              <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js/i</span>,<br>              <span class="hljs-attr">use</span>:[&#123;<br>                  <span class="hljs-attr">loader</span>:<span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>                  <span class="hljs-attr">options</span>:&#123;<br>                      <span class="hljs-attr">presets</span>:[<br>                          [<span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>]<br>                      ]<br>                  &#125;<br>              &#125;]<br>          &#125;<br>      ]<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>热模替换</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">devServer</span>:&#123;<br>    <span class="hljs-attr">hot</span>:<span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关于插件以及loader的书写"><a href="#关于插件以及loader的书写" class="headerlink" title="关于插件以及loader的书写"></a>关于插件以及loader的书写</h3><p>loader例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">source</span>) &#123;<br>    <span class="hljs-keyword">let</span> sour0 = source.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/const/g</span>,<span class="hljs-string">&#x27;var&#x27;</span>)<br>    <span class="hljs-keyword">let</span> sour1 = sour0.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/let /g</span>,<span class="hljs-string">&#x27;var &#x27;</span>)<br>    <span class="hljs-keyword">return</span> sour1<br>&#125; <span class="hljs-comment">//实现将js文件中的const和let都换成var</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React初学</title>
    <link href="/2023/04/11/React/"/>
    <url>/2023/04/11/React/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是React："><a href="#什么是React：" class="headerlink" title="什么是React："></a>什么是React：</h2><p>React 是一个用于构建用户界面（UI）的 JavaScript 库，用户界面由按钮、文本和图像等小单元内容构建而成。React 帮助你把它们组合成可重用、可嵌套的 _组件_。从 web 端网站到移动端应用，屏幕上的所有内容都可以被分解成组件。</p><ul><li>React 允许你创建组件，<strong>应用程序的可复用 UI 元素。</strong></li><li>在 React 应用程序中，每一个 UI 模块都是一个组件。</li><li>React 是常规的 JavaScript 函数，除了：<ol><li>它们的名字总是以大写字母开头。</li><li>它们返回 JSX 标签。</li></ol></li></ul><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>了不起的科学家<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="JSX规则："><a href="#JSX规则：" class="headerlink" title="JSX规则："></a>JSX规则：</h2><ol><li><p>只能返回一个根元素：一个组件中含有多个标签，得用一个父元素将他们包裹起来，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>海蒂·拉玛的代办事项<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/yXOvdOSs.jpg&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Hedy Lamarr&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;photo&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--或者你可以选择用&lt;&gt;&lt;/&gt;  --&gt;</span><br><span class="hljs-tag">&lt;&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>海蒂·拉玛的代办事项<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/yXOvdOSs.jpg&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Hedy Lamarr&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;photo&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>标签必须闭合：如img等自闭合标签必须写成<img/></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/yXOvdOSs.jpg&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Hedy Lamarr&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;photo&quot;</span></span><br><span class="hljs-tag">   /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>发明一种新式交通信号灯<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>排练一个电影场景<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>改进频谱技术<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用驼峰式命名给<del>所有</del>大部分属性命名：因为JSX语法底层还是转化为JS代码，所以命名不允许出现-以及class，得用驼峰式命名和className代</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/yXOvdOSs.jpg&quot;</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Hedy Lamarr&quot;</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;photo&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>{}内可以使用JS变量，JS函数以及JS对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//函数</span><br><span class="hljs-keyword">const</span> today = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatDate</span>(<span class="hljs-params">date</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">DateTimeFormat</span>(<br>    <span class="hljs-string">&#x27;en-US&#x27;</span>,<br>    &#123; <span class="hljs-attr">weekday</span>: <span class="hljs-string">&#x27;long&#x27;</span> &#125;<br>  ).<span class="hljs-title function_">format</span>(date);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>To Do List for &#123;formatDate(today)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;Gregorio Y. Zara&#x27;</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;name&#125;&#x27;s To Do List<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>JSX总结：</p></li></ol><ul><li>JSX 引号内的值会作为字符串传递给属性。</li><li>大括号让你可以将 JavaScript 的逻辑和变量带入到标签中。</li><li>它们会在 JSX 标签中的内容区域或紧随属性的 = 后起作用。</li><li> 并不是什么特殊的语法：它只是包在 JSX 大括号内的 JavaScript 对象<h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2>props是在父组件和子组件中传递的内容，好比JS中传入函数的参数，父组件也可以给子组件传递参数<br>第一步：将props传递给子组件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">person</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">name:</span> &#x27;<span class="hljs-attr">Lin</span> <span class="hljs-attr">Lanying</span>&#x27;, <span class="hljs-attr">imageId:</span> &#x27;<span class="hljs-attr">1bX5QH6</span>&#x27; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;100&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>第二步：在子组件中读取props<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">&#123; person, size &#125;</span>) &#123; <span class="hljs-comment">//不要忘记&#123;&#125;</span><br>  <span class="hljs-comment">// 在这里 person 和 size 是可访问的</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>P.S 渲染列表的时候要记得给每一个列表一个key</strong></p><h2 id="关于组件的纯粹："><a href="#关于组件的纯粹：" class="headerlink" title="关于组件的纯粹："></a>关于组件的纯粹：</h2><ul><li>一个组件必须是纯粹的，就意味着：<ul><li><strong>只负责自己的任务。</strong> 不应更改渲染前存在的任何对象或变量。</li><li><strong>输入相同，则输出相同。</strong> 给定相同的输入，组件应该总是返回相同的 JSX。</li></ul></li><li>渲染随时可能发生，因此组件不应依赖于彼此的渲染顺序。</li><li>你不应该改变组件用于渲染的任何输入。这包括 props、state 和 context。通过setEffect 来更新界面，而不要改变预先存在的对象。</li><li>努力在你返回的 JSX 中表达你的组件逻辑。当你需要“改变事物”时，你通常希望在事件处理程序中进行。作为最后的手段，你可以使用 useEffect。</li><li>编写纯函数需要一些练习，但它充分释放了 React 范式的能力。<h2 id="响应事件"><a href="#响应事件" class="headerlink" title="响应事件"></a>响应事件</h2><h3 id="添加响应事件："><a href="#添加响应事件：" class="headerlink" title="添加响应事件："></a>添加响应事件：</h3>如需添加一个事件处理函数，你需要先定义一个函数，然后将其作为 prop 传入合适的 JSX 标签。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      未绑定任何事件</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>按照如下三个步骤，即可让它在用户点击时显示消息：</li></ul><ol><li>在 Button 组件 <em>内部</em> 声明一个名为 handleClick 的函数。</li><li>实现函数内部的逻辑（使用 alert 来显示消息）。</li><li>添加 onClick={handleClick} 到 <code>&lt;button&gt;</code>JSX 中。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你点击了我！&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      点我</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>按照惯例，通常将事件处理程序命名为 handle，后接事件名。你会经常看到 onClick={handleClick}，onMouseEnter={handleMouseEnter} 等。</p></blockquote><h3 id="阻止事件传播："><a href="#阻止事件传播：" class="headerlink" title="阻止事件传播："></a>阻止事件传播：</h3><p>如果你想阻止一个事件到达父组件，你需要像下面 Button 组件那样调用 e.stopPropagation() </p><h3 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h3><p>你可以调用事件对象中的 e.preventDefault() 来阻止这种情况发生</p><h3 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h3><ul><li>你可以通过将函数作为 prop 传递给元素如 <button> 来处理事件。</li><li>必须传递事件处理函数，<strong>而非函数调用！</strong> onClick={handleClick} ，不是 onClick={handleClick()}。</li><li>你可以单独或者内联定义事件处理函数。</li><li>事件处理函数在组件内部定义，所以它们可以访问 props。</li><li>你可以在父组件中定义一个事件处理函数，并将其作为 prop 传递给子组件。</li><li>你可以根据特定于应用程序的名称定义事件处理函数的 prop。</li><li>事件会向上传播。通过事件的第一个参数调用 e.stopPropagation() 来防止这种情况。</li><li>事件可能具有不需要的浏览器默认行为。调用 e.preventDefault() 来阻止这种情况。</li><li>从子组件显式调用事件处理函数 prop 是事件传播的另一种优秀替代方案。<h2 id="关于State"><a href="#关于State" class="headerlink" title="关于State"></a>关于State</h2></li></ul><p><strong>为什么我们需要用到State:</strong></p><ul><li>局部变量无法在多次渲染中持久保存</li><li>更改局部变量不会触发渲染</li><li>当一个组件需要在多次渲染间“记住”某些信息时使用 state 变量。</li></ul><p>使用方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>; <span class="hljs-comment">//要添加 state 变量，先从文件顶部的 React 中导入 useState</span><br><br><span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//创建state状态</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">setIndex</span>(index + <span class="hljs-number">1</span>);<br>&#125; <span class="hljs-comment">//改变状态</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>State 变量是通过调用 useState Hook 来声明的。</p></li><li><p>Hook 是以 use 开头的特殊函数。它们能让你 “hook” 到像 state 这样的 React 特性中。</p></li><li><p>Hook 可能会让你想起 import：它们需要在非条件语句中调用。调用 Hook 时，包括 useState，仅在组件或另一个 Hook 的顶层被调用才有效。</p></li><li><p>useState Hook 返回一对值：当前 state 和更新它的函数。</p></li><li><p>你可以拥有多个 state 变量。在内部，React 按顺序匹配它们。</p></li><li><p>State 是组件私有的。如果你在两个地方渲染它，则每个副本都有独属于自己的 state。</p></li><li><p><strong>请记住，必须在条件语句外并且始终以相同的顺序调用 Hook！</strong></p><h2 id="渲染："><a href="#渲染：" class="headerlink" title="渲染："></a>渲染：</h2></li><li><p>在一个 React 应用中一次屏幕更新都会发生以下三个步骤：</p><ol><li>触发</li><li>渲染</li><li>提交</li></ol></li><li><p>您可以使用严格模式去找到组件中的错误</p></li><li><p>如果渲染结果与上次一样，那么 React 将不会修改 DOM</p></li><li><p>设置 state 只会为 <em>下一次</em> 渲染变更 state 的值</p></li><li><p>批处理渲染：</p><ul><li>设置 state 不会更改现有渲染中的变量，但会请求一次新的渲染。    </li><li>React 会在事件处理函数执行完成之后处理 state 更新。这被称为批处理。</li><li>要在一个事件中多次更新某些 state，你可以使用 setNumber(n =&gt; n + 1) 更新函数。<h2 id="更新状态中的对象"><a href="#更新状态中的对象" class="headerlink" title="更新状态中的对象"></a>更新状态中的对象</h2>State 可以保存任何类型的 JavaScript 值，包括对象。但是你不应该直接改变你在 React 状态下持有的对象。相反，当你想更新一个对象时，你需要创建一个新对象（或复制一个现有对象），然后设置状态以使用该副本。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">onPointerMove=&#123;<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  position.<span class="hljs-property">x</span> = e.<span class="hljs-property">clientX</span>;<br>  position.<span class="hljs-property">y</span> = e.<span class="hljs-property">clientY</span>;<br>&#125;&#125; <span class="hljs-comment">//错误示范</span><br><br><br>onPointerMove=&#123;<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  <span class="hljs-title function_">setPosition</span>(&#123;<br>    <span class="hljs-attr">x</span>: e.<span class="hljs-property">clientX</span>,<br>    <span class="hljs-attr">y</span>: e.<span class="hljs-property">clientY</span><br>  &#125;);<br>&#125;&#125;<span class="hljs-comment">//应该这样</span><br></code></pre></td></tr></table></figure>你也可以使用<code>...</code>对象扩展语法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setPerson</span>(&#123;<br>  ...person, <span class="hljs-comment">// Copy the old fields</span><br>  <span class="hljs-attr">firstName</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> <span class="hljs-comment">// But override this one</span><br>&#125;);<br></code></pre></td></tr></table></figure>但一碰到嵌套的对象，复制一个新对象就显得非常麻烦<br>所以我们可以使用<code>Immer</code>写更简洁的更新<br>步骤：</li></ul></li></ul><ol><li>运行 npm install use-immer 将 Immer 添加为依赖项</li><li>然后将 import { useState } from ‘react’ 替换为 import { useImmer } from ‘use-immer’</li><li>将const [] = useState() 变成 const [] = useImmer() </li><li>再使用update(draft=&gt;{draft.name = xxx}) 进行修改</li></ol><p><strong>摘要</strong>：</p><ul><li>Treat all state in React as immutable.<br>将 React 中的所有状态视为不可变的。</li><li>When you store objects in state, mutating them will not trigger renders and will change the state in previous render “snapshots”.<br>当您将对象存储在状态中时，改变它们不会触发渲染，并且会更改先前渲染“快照”中的状态。</li><li>Instead of mutating an object, create a <em>new</em> version of it, and trigger a re-render by setting state to it.<br>与其改变对象，不如创建它的新版本，并通过为其设置状态来触发重新渲染。</li><li>You can use the {…obj, something: ‘newValue’} object spread syntax to create copies of objects.<br>您可以使用 {…obj, something: ‘newValue’} 对象传播语法来创建对象的副本。</li><li>Spread syntax is shallow: it only copies one level deep.<br>传播语法很浅：它只复制一层深。</li><li>To update a nested object, you need to create copies all the way up from the place you’re updating.<br>要更新嵌套对象，您需要从要更新的地方一直向上创建副本。</li><li>To reduce repetitive copying code, use Immer.<br>要减少重复复制代码，请使用 Immer。<h2 id="更新数组："><a href="#更新数组：" class="headerlink" title="更新数组："></a>更新数组：</h2>更新数组和对象一样，需要复制再修改<br>善于利用map，fliter，slice等数组方法<br>例子：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleIncreaseClick</span>(<span class="hljs-params">productId</span>) &#123;<br>    <span class="hljs-title function_">setProducts</span>(products.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">product</span>=&gt;</span>&#123;<br>      <span class="hljs-keyword">if</span>(productId===product.<span class="hljs-property">id</span>)&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>          ...product,<br>          count : product.<span class="hljs-property">count</span>+<span class="hljs-number">1</span><br>        &#125;<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> product<br>      &#125;<br>    &#125;))<br>  &#125; <span class="hljs-comment">//id+1</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
