<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>深入浅出TypeScript</title>
    <link href="/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/"/>
    <url>/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要学习-TypeScript"><a href="#为什么要学习-TypeScript" class="headerlink" title="为什么要学习 TypeScript"></a>为什么要学习 TypeScript</h1><table><thead><tr><th>TypeScript</th><th>JavaScript</th></tr></thead><tbody><tr><td>JavaScript 的超集，用来解决大型项目的代码复杂度</td><td>一种脚本语言，用于创建动态网页</td></tr><tr><td>强类型，支持动态和静态类型</td><td>动态弱类型语言</td></tr><tr><td>可以在编译的时候发现错误</td><td>只能在运行时发现错误</td></tr><tr><td>不允许改变变量的数据类型</td><td>变量可以被赋值为不同类型</td></tr></tbody></table><h1 id="TypeScript-基础"><a href="#TypeScript-基础" class="headerlink" title="TypeScript 基础"></a>TypeScript 基础</h1><h2 id="TS-基础类型"><a href="#TS-基础类型" class="headerlink" title="TS 基础类型"></a>TS 基础类型</h2><ol><li>boolean,number,string</li><li>undefined,null</li><li>any,unknown,viod</li><li>never</li><li>数组类型[]</li><li>元组类型()</li></ol><h2 id="TS-函数类型"><a href="#TS-函数类型" class="headerlink" title="TS 函数类型"></a>TS 函数类型</h2><p>定义：TS 定义函数类型时要定义输入参数类型和输出类型<br>输入参数：参数支持可选参数和默认参数<br>输出参数：输出可以自动推断，没有返回值的时候，默认为 void 类型<br>函数重载：名称相同但参数不同，可以通过重载支持多种类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>[]</span>): <span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">string</span>[]</span>): <span class="hljs-built_in">string</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">any</span>[]</span>): <span class="hljs-built_in">any</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">join</span>();<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;number&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> acc + cur);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TS-接口类型"><a href="#TS-接口类型" class="headerlink" title="TS 接口类型"></a>TS 接口类型</h2><p>定义：接口是为了定义对象类型<br>特点： -可选类型：？ -只读类型：readonly -可以描述函数类型 -可以描述自定义类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">p1</span>: <span class="hljs-title class_">Person</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;ye&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;20&quot;</span>,<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">age</span>); <span class="hljs-comment">//20</span><br><br><span class="hljs-comment">//自定义key</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">RandomKey</span> &#123;<br>  [<span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">obj</span>: <span class="hljs-title class_">RandomKey</span> = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;hello&quot;</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-string">&quot;world&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="TS-类"><a href="#TS-类" class="headerlink" title="TS 类"></a>TS 类</h2><p>定义：写法和 JS 差不多，增加了一些定义<br>特点：</p><ul><li>增加了 public private protected 修饰符</li><li>抽象类：<ul><li>只能被继承，不能被实例化</li><li>作为基类，抽象方法必须被子类实现</li></ul></li></ul><ul><li>interface 约束类，使用 implement 关键字</li></ul><p><img src="/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/class1.png"><br><img src="/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/class2.png"></p><h1 id="TypeScript-进阶"><a href="#TypeScript-进阶" class="headerlink" title="TypeScript 进阶"></a>TypeScript 进阶</h1><h2 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h2><ol><li>联合类型 |</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>;<br>num = <span class="hljs-number">8</span>;<br>num = <span class="hljs-string">&quot;eight&quot;</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>交叉类型 &amp;</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Student</span> = <span class="hljs-title class_">Person</span> &amp; &#123; <span class="hljs-attr">grade</span>: <span class="hljs-built_in">number</span> &#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">stu</span>: student;<br><span class="hljs-comment">//stu.grade</span><br></code></pre></td></tr></table></figure><p>能够新增 key</p><ol start="3"><li>类型断言</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getLength</span>(<span class="hljs-params">arg: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">const</span> str = arg <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>;<br>  <span class="hljs-keyword">if</span> (str.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">return</span> str.<span class="hljs-property">length</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-built_in">number</span> = arg <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">number</span>.<span class="hljs-title function_">toString</span>().<span class="hljs-property">length</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>类型别名(type 和 interface)<br>定义：给类型取个别名<br>相同点：</li></ol><ul><li>都可以定义对象或函数</li><li>都允许继承<br>差异点：</li><li>interface 是 TS 用来定义对象，type 是用来定义别名方便使用</li><li>type 可以定义基础类型，interface 不行</li><li>interface 可以合并重复声明，type 不行</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person1</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Person2</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">person1</span>: <span class="hljs-title class_">Person1</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;ye&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">person2</span>: <span class="hljs-title class_">Person2</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;ye&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/type.png" alt="TypeVsInterface"></p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>语法：</p><ol><li>在&lt;&gt;里面写类型参数，一般用 T 来表示；</li><li>使用的时候有两种指定方式：</li><li>定义要使用的类型</li><li>通过 TS 类型推断，自动推导类型</li><li>泛型的作用是临时占位，之后通过传来的类型进行推导</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> print&lt;T&gt;(<span class="hljs-attr">arg</span>: T): T &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg);<br>  <span class="hljs-keyword">return</span> arg;<br>&#125;<br>print&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="基础操作符"><a href="#基础操作符" class="headerlink" title="基础操作符"></a>基础操作符</h2><ul><li>typeof:获取类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">sam</span>: <span class="hljs-title class_">Person</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Sem</span> = <span class="hljs-keyword">typeof</span> sam; <span class="hljs-comment">//type Sem = Person</span><br></code></pre></td></tr></table></figure><ul><li>keyof:获取所有键</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">K1</span> = keyof <span class="hljs-title class_">Person</span>; <span class="hljs-comment">//&quot;name&quot; | &quot;age&quot;</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">K2</span> = (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Person</span>)[]; <span class="hljs-comment">//&quot;length&quot; | &quot;toString&quot; | &quot;pop&quot; | &quot;push&quot; | &quot;concat&quot; | &quot;join&quot; |</span><br></code></pre></td></tr></table></figure><ul><li>in:遍历枚举类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Keys</span> = <span class="hljs-string">&quot;a&quot;</span> | <span class="hljs-string">&quot;b&quot;</span> | <span class="hljs-string">&quot;c&quot;</span>;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Obj</span> = &#123;<br>  [p <span class="hljs-keyword">in</span> <span class="hljs-title class_">Keys</span>]: <span class="hljs-built_in">any</span>;<br>&#125;; <span class="hljs-comment">//&#123;a:any,b:any,c:any&#125;</span><br></code></pre></td></tr></table></figure><ul><li>T[K]:索引访问</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">type1</span>: <span class="hljs-title class_">IPerson</span>[<span class="hljs-string">&quot;name&quot;</span>]; <span class="hljs-comment">//string</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">type2</span>: <span class="hljs-title class_">IPerson</span>[<span class="hljs-string">&quot;age&quot;</span>]; <span class="hljs-comment">//number</span><br></code></pre></td></tr></table></figure><ul><li>extends:泛型约束<br><img src="/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/extends.png" alt="extends"></li></ul><h2 id="常用工具类型"><a href="#常用工具类型" class="headerlink" title="常用工具类型"></a>常用工具类型</h2><ul><li>Partial<T>:将类型属性变为可选</li><li>Required<T>:将类型属性变成必选</li><li>Readonly<T>:将类型属性变成只读</li><li>Pick、Record…..</li></ul><p><img src="/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/tools.png" alt="tools"></p><h1 id="TS-实战例子"><a href="#TS-实战例子" class="headerlink" title="TS 实战例子"></a>TS 实战例子</h1><h2 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h2><ul><li>declare:三方库需要类型声明文件</li><li>.d.ts:声明文件定义</li><li>@types:第三方 TS 类型包</li><li>tsconfig.js:定义 TS 的配置</li></ul><h2 id="泛型约束后端接口类型"><a href="#泛型约束后端接口类型" class="headerlink" title="泛型约束后端接口类型"></a>泛型约束后端接口类型</h2><p><img src="/2023/05/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript/example.png" alt="例子"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>武汉之行</title>
    <link href="/2023/05/03/%E6%AD%A6%E6%B1%89%E4%B9%8B%E8%A1%8C/"/>
    <url>/2023/05/03/%E6%AD%A6%E6%B1%89%E4%B9%8B%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>人真的多多多，酒店真的远远远；希望下次能避开大假期，酒店定的<del>贵一点</del>好一点</p></blockquote><h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><p>早上八点快九点的动车，5 点钟我就从学校出发了<br>昨天买的零食还丢在了车上，硬生生饿七个多小时到武汉<br><img src="../武汉之行/day1_station.JPG" alt="" width="500" height="300"><br>人多到 6 点排队吃小龙虾要排上 130 桌，换了一家偏僻角落的店铺才能吃上。<br><img src="../武汉之行/feifeixiazhuang.JPG" alt="肥肥虾庄" width="500" height="300"></p><p>吃完饭坐上了轮渡，一路坐到长江大桥桥下。<br><img src="../武汉之行/me_girlfriend.JPG" alt="轮渡上合照一张" width="500" height="300"><br>从船上看长江大桥不如在路上看<br><img src="../武汉之行/bridge0.JPG" alt="桥头小亭子" width="500" height="300"><br><img src="../武汉之行/bridge1.JPG" alt="长江大桥" width="500" height="300"></p><h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><p>来武汉听说不能不过早<br>兰陵路离我们酒店算最近的(一样很远)<br>武汉本地热干面真的和别的地方的武汉热干面不一样，香太多了。<br><img src="../武汉之行/guozao1.JPG" alt="热干面，烧卖，绿豆汤" width="500" height="500"><br>这家三鲜豆皮不好吃<br><img src="../武汉之行/guozao2.JPG" alt="三鲜豆皮" width="500" height="500"></p><p>下午去了古德寺，和以前去过的寺庙不太一样，带有点欧洲的风格。<br><img src="../武汉之行/gude.JPG" alt="古德寺" width="500" height="300"><br>一根 15，还不错的景区特色雪糕<br><img src="../武汉之行/gudexuegao.JPG" alt="古德寺特色雪糕" width="500" height="300"></p><p>本来打算再去长江大桥上看看日落，低估了我们的行进速度，美美的在路上看着太阳落下。<br><img src="../武汉之行/jianghang.JPG" alt="路经江汉桥" width="500" height="300"></p><p>而且今晚的人流量，少说也有昨天的 2 倍。大桥上黑压压的都是人，根本没法走。<br>想挤地铁回家，误打误撞挤到户部巷中。<br>扭头买个冰粉，直接堵在巷中出都出不来。<br><img src="../武汉之行/day2_night1.jpg" alt="就扭了个头买冰粉" width="500" height="300"></p><p>原来这边是拍黄鹤楼的绝美点，难怪挤死了<br><img src="../武汉之行/huanghelou.JPG" alt="封面来源" width="600" height="450"></p><h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><p>早上要换酒店，干脆睡吃一点，在酒店过早了<br><img src="../武汉之行/day3_m.JPG" alt="锅贴，热干面，绿豆汤米酒和燕麦豆浆" width="500" height="300"></p><p>下午去东湖，坐地铁转了无数个站，在下午太阳最大的时候来到了东湖<br>原来省博和省美术馆也在这里，可惜没预约也进不去<br><img src="../武汉之行/donhu1.JPG" alt="东湖" width="500" height="300"><br><img src="../武汉之行/donhu2.JPG" alt="屈原纪念馆" width="500" height="500"><br><img src="../武汉之行/donhu3.JPG" alt="美女在东湖" width="400" height="500"></p><p>挺讨厌吃饭要排队的，但楚采这家店上的快，价格便宜，主要是好吃，特别是虾和红烧肉。<br>可惜在五一踩着开门的时间去排队也得等上一个小时。<br><img src="../武汉之行/cha.JPG" alt="心心念念的茶颜悦色" width="300" height="300"><br><img src="../武汉之行/chucai1.JPG" alt="楚采的红烧肉" width="300" height="300"><br><img src="../武汉之行/chucai2.JPG" alt="楚采的虾" width="300" height="300"></p><p>吃完去中山公园散个步<br><img src="../武汉之行/zhongshan.JPG" alt="路过旋转木马" width="600" height="450"><br><img src="../武汉之行/together.JPG" alt="合照" width="600" height="390"></p><p>四天武汉之行就要结束咯</p><h1 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h1><p>下次车票订一个站，时间差不多，不然分开太痛苦了，又在车站等三个多小时才上车<br><img src="/2023/05/03/%E6%AD%A6%E6%B1%89%E4%B9%8B%E8%A1%8C/day4.jpg" alt="车票"><br>回到重庆太晚了，在学长的别墅留宿一晚</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>看来我俩旅游不适合特种兵玩法，就喜欢吃吃吃，不喜欢走走走<br>酒店别因为便宜就定在鸟不拉屎的地方，啥也没有打车费还高，加上打车费和位置好的酒店价格没差<br>人实在太多，大伙疫情关了 3 年，现在刚放开的一个小长假，出行人数简直爆炸，希望下次能避开高峰期</p>]]></content>
    
    
    <categories>
      
      <category>旅游</category>
      
    </categories>
    
    
    <tags>
      
      <tag>武汉</tag>
      
      <tag>玩!</tag>
      
      <tag>旅游</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解JS</title>
    <link href="/2023/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS/"/>
    <url>/2023/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS/</url>
    
    <content type="html"><![CDATA[<h1 id="JS-的基本概念"><a href="#JS-的基本概念" class="headerlink" title="JS 的基本概念"></a>JS 的基本概念</h1><h2 id="JS-中的数据类型"><a href="#JS-中的数据类型" class="headerlink" title="JS 中的数据类型"></a>JS 中的数据类型</h2><p>JS 中的数据类型分为对象和基础类型</p><p>JS 中的对象有数组,函数</p><p>基础类型有字符串,undefined,数字,null,sympol,bigint,布尔</p><h2 id="JS-中的基本概念-作用域"><a href="#JS-中的基本概念-作用域" class="headerlink" title="JS 中的基本概念-作用域"></a>JS 中的基本概念-作用域</h2><p>变量的可访问性和可见性</p><p>静态作用域，通过它就能预测代码在执行过程中如何查找标识符<br><img src="/2023/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS/area.png" alt="作用域"></p><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><ul><li><p>var 有变量提升</p></li><li><p>let,const 没有变量提升,提前访问会报错</p></li><li><p>function 函数可以先调用，再定义</p></li><li><p>赋值给变量的函数无法提前调用</p></li></ul><h1 id="JS-的执行"><a href="#JS-的执行" class="headerlink" title="JS 的执行"></a>JS 的执行</h1><p>当 JS 引擎解析到可执行代码片段(通常是函数调用)的时候，就会先做一些执行前的准备工作，这个准备工作就叫做<strong>执行上下文</strong><br><img src="/2023/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS/execution-context.png" alt="执行上下文"></p><p><strong>全局上下文：</strong><br>代码开始执行的时候就会创建，将他压执行栈的栈底</p><p><strong>函数执行上下文：</strong><br>当执行一个函数的时候，这个函数内的代码就会被编译，生成变量环境，词法环境等，当函数执行完毕的时候该执行环境从栈顶弹出</p><ul><li><p>词法环境：基于 ECMAScript 代码的词法嵌套结构来定义标识符和具体变量和函数的关联，一个词法环境由环境记录器和一个可能的引用外部词法环境的空值组成</p></li><li><p>变量环境：变量环境和词法环境不同的就是前者用于储存函数声明和变量(let,const)绑定，后者只用来储存 var 变量绑定</p></li><li><p>Outer:指向外部变量环境的一个指针</p></li></ul><h1 id="JS-的进阶知识点"><a href="#JS-的进阶知识点" class="headerlink" title="JS 的进阶知识点"></a>JS 的进阶知识点</h1><h2 id="JS-的-this"><a href="#JS-的-this" class="headerlink" title="JS 的 this"></a>JS 的 this</h2><p>可以查看<a href="/2023/04/15/JS%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%A5%E9%97%A8%E9%9A%BE%E7%82%B9/index.html">JS 的一些入门难点</a></p><h2 id="JS-的闭包"><a href="#JS-的闭包" class="headerlink" title="JS 的闭包"></a>JS 的闭包</h2><p>当你的函数 a 返回了一个函数 b，并且返回的这个函数 b 中带有函数 a 的变量，那么这个操作就叫做闭包<br>本来一个函数执行完就会被回收以免占用空间，但通过闭包能使函数即使被回收了也能引用内部的变量<br>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> a0 = <span class="hljs-string">&quot;闭包&quot;</span>;<br>  <span class="hljs-keyword">const</span> a1 = <span class="hljs-string">&quot;xxx&quot;</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a0);<br>    <span class="hljs-keyword">return</span> a1; <span class="hljs-comment">//形成闭包</span><br>  &#125;;<br>&#125;<br><span class="hljs-keyword">let</span> c = <span class="hljs-title function_">a</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">c</span>()); <span class="hljs-comment">//xxx</span><br></code></pre></td></tr></table></figure><p>即使 a 执行完被回收了，内部的 a1 依旧能被引用</p><h2 id="JS-的回收机制"><a href="#JS-的回收机制" class="headerlink" title="JS 的回收机制"></a>JS 的回收机制</h2><p>JS 中的内存回收分为两个部分，一个是新生代，存放小的变量等体积小的文件，一个是老生代，放大体积的文件<br>新生代的内存回收是先标记常用的内容，然后复制一份，反转到空闲区域，统一删除，最后留下标记的复制的对象<br>老生代就是直接进行标记，然后删除，最后在进行内存处理<br><img src="/2023/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS/rubbish.png" alt="rubbish"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解CSS</title>
    <link href="/2023/04/25/%E7%90%86%E8%A7%A3CSS/"/>
    <url>/2023/04/25/%E7%90%86%E8%A7%A3CSS/</url>
    
    <content type="html"><![CDATA[<p>CSS - Cascading Style Sheets<br>中文名 层叠样式表</p><h1 id="01-层叠，优先级"><a href="#01-层叠，优先级" class="headerlink" title="01 层叠，优先级"></a>01 层叠，优先级</h1><p>优先程度：样式表来源 &gt; 选择器优先级 &gt; 源码位置</p><h2 id="样式表来源"><a href="#样式表来源" class="headerlink" title="样式表来源"></a>样式表来源</h2><p>用户代理样式表(浏览器默认样式) &lt; 用户样式表(很少) &lt; 作者样式表(我们写的 css) &lt; 作者样式表里的!important &lt; 用户样式表里的!important &lt; 用户代理样式表的!important</p><h2 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h2><p>内联 &gt; id &gt; class &gt; type</p><h2 id="源码位置"><a href="#源码位置" class="headerlink" title="源码位置"></a>源码位置</h2><p>css 表中写在后面的会覆盖前面的 css 样式，css 从上向下读</p><blockquote><p>注意：<br>选择器少用 id<br>尽量不要用!important<br>自己的样式加载在引用库后面</p></blockquote><h1 id="02-布局"><a href="#02-布局" class="headerlink" title="02 布局"></a>02 布局</h1><h2 id="常规流布局"><a href="#常规流布局" class="headerlink" title="常规流布局"></a>常规流布局</h2><p>常规流布局分为块级(block)和内联(inline)</p><h3 id="块级格式化上下文-BFC"><a href="#块级格式化上下文-BFC" class="headerlink" title="块级格式化上下文(BFC)"></a>块级格式化上下文(BFC)</h3><p>如果说一个盒子是 BFC 布局，那么这个盒子的内部就会形成一个新的块级格式化上下文<br>如何触发一个盒子的 BFC 特性：</p><ul><li>display: flow-root | inline-block</li><li>position:absolout | fixed</li><li>float:不为 none</li><li>overflow:不为 visible</li></ul><p><strong>外边距塌陷问题</strong></p><ul><li>消除外边距塌陷的问题就是将父元素设置为 BFC</li><li>在元素之间设置 border,padding 或者内联元素</li></ul><h3 id="内联格式化上下文"><a href="#内联格式化上下文" class="headerlink" title="内联格式化上下文"></a>内联格式化上下文</h3><p><strong>单行文字居中</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CSS">&lt;<span class="hljs-selector-tag">div</span> class=&quot;title&quot;&gt;标题&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><span class="hljs-selector-class">.title</span>&#123;<br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">18px</span>;<br>    <span class="hljs-attribute">line-height</span> :<span class="hljs-number">36px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">36px</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>让 line-height 等于 font-size 的两倍</p><p><strong>文字与 icon 垂直对齐</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span><br>  class=&quot;wrap&quot;<br>  &gt; &lt;<span class="hljs-selector-tag">img</span><br>  class=&quot;image&quot;<br>  scr=&quot;dy<span class="hljs-selector-class">.png</span>&quot;<br>  &gt; &lt;<span class="hljs-selector-tag">span</span><br>  class=&quot;text&quot;<br>  &gt; 抖音同款能力&lt;/<span class="hljs-selector-tag">span</span><br>  &gt; &lt;/<span class="hljs-selector-tag">div</span><br>  &gt; <span class="hljs-selector-class">.image</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br><span class="hljs-selector-class">.text</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个不是<strong>完全垂直对齐</strong>，设置父元素的 font-size:0，则基线和中线对齐，则居中对齐</p><h2 id="弹性盒子布局"><a href="#弹性盒子布局" class="headerlink" title="弹性盒子布局"></a>弹性盒子布局</h2><p>利用 flex</p><h2 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h2><p>利用 Grid 布局</p><h2 id="Grid-和-Flex-布局的使用策略"><a href="#Grid-和-Flex-布局的使用策略" class="headerlink" title="Grid 和 Flex 布局的使用策略"></a>Grid 和 Flex 布局的使用策略</h2><ol><li>大面积或整体布局 推荐 Grid</li><li>小面积或者组件利用 Flex 布局</li></ol><h2 id="Position-定位"><a href="#Position-定位" class="headerlink" title="Position 定位"></a>Position 定位</h2><ul><li>relative</li><li>absolute</li><li>fixed</li><li>sticky</li></ul><h3 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h3><p>元素相对它的最近滚动祖先(祖先的 overflow 是 scroll/hidden/auto)的视口(scrollport)定位</p><!-- ![Sticky](../images/sticky.png) --><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/sticky.png" class=""><h1 id="03-层叠上下文"><a href="#03-层叠上下文" class="headerlink" title="03 层叠上下文"></a>03 层叠上下文</h1><p>层叠上下文是对 Html 元素的三维构想，将元素沿着垂直屏幕的虚构的 Z 轴排开</p><h2 id="形成新的层叠上下文的条件-任一即可-："><a href="#形成新的层叠上下文的条件-任一即可-：" class="headerlink" title="形成新的层叠上下文的条件(任一即可)："></a>形成新的层叠上下文的条件(任一即可)：</h2><ul><li>position:relative 或者 absolute 并且 z-index 不是 auto</li><li>position:fixed 或者 sticky</li><li>flex 或者 grid 的子元素 并且 z-index 不是 auto</li><li>opacity 的值小于 1</li><li>transform 的值不为 none</li><li>will-change 的值不为通用值<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context">形成新的层叠上下文的 MDN 介绍</a></li></ul><h2 id="层叠顺序"><a href="#层叠顺序" class="headerlink" title="层叠顺序"></a>层叠顺序</h2><p>层叠顺序不仅指不同的层叠上下文的顺序，同一层叠上下文内，元素间也有顺序：<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/stack_order.png" alt="stack-order"></p><p><strong>编写 z-index 的建议：</strong></p><ol><li>使用 CSS 变量或者预处理语言的变量来管理 z-index 的值</li><li>预设间隔设置成 10 或 100，方便后续的插入</li></ol><h1 id="04-变形，过渡，动画"><a href="#04-变形，过渡，动画" class="headerlink" title="04 变形，过渡，动画"></a>04 变形，过渡，动画</h1><h2 id="transform-变形"><a href="#transform-变形" class="headerlink" title="transform 变形"></a>transform 变形</h2><p>2D 相关属性：</p><ul><li><p>transform : translate(移动),rotate(旋转),scale(放缩),matrix(变形矩阵)</p></li><li><p>transform-origin : right,top,center 等，表示变形时依据的原点</p></li></ul><p><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/transform-2D.png" alt="例子"></p><p>3D 相关属性：</p><ul><li>transform : translate3D(移动),rotate3D(旋转),scale3D(放缩),matrix3D(变形矩阵)</li><li>transform-origin : right,30px,50px,center 等，表示变形时依据的原点</li><li>transform-style : flat 或 preserve-3d 看子元素的 3D 表现</li><li>perspective : 观看点距离 z=0 这个平面的距离</li><li>perspective-rigin : 观看者的位置，如 top，bottom 等</li><li>backface-visibility : 元素正面只有朝向观察者的时候可见</li></ul><p>两个 3D 的例子：<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/exampleA.png" alt="例A"><br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/exampleB.png" alt="例B"></p><h2 id="transition-过渡"><a href="#transition-过渡" class="headerlink" title="transition 过渡"></a>transition 过渡</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">transition</span>: &lt;property&gt;&lt;duration&gt;&lt;timing-function&gt;&lt;delay&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 timing-function 一般有三种用法：线性(linear),贝塞尔曲线(cubic-bezier),阶跃(step)<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/exampleC.png" alt="例C"></p><h2 id="animation-动画"><a href="#animation-动画" class="headerlink" title="animation 动画"></a>animation 动画</h2><p>相关属性：<br>animation-name 定义好的关键帧名字<br>animation-duration 动画时长<br>animation-timing-function 动画节奏<br>animation-delay 延时开始的时间<br>animation-ieration-count 执行次数<br>animation-direction 是否反向或者交替<br>animation-fill-mode 动画执行前后的样式采用<br>animation-play-state 动画运行状态<br><a href="https://animate.style/">一个动画库</a></p><h2 id="transform-transition-animation-性能相关"><a href="#transform-transition-animation-性能相关" class="headerlink" title="transform,transition,animation 性能相关"></a>transform,transition,animation 性能相关</h2><p>如何写动画性能更好：</p><ol><li>尽量不用触发 reflow 的属性</li><li>遇到性能问题时可以触发硬件加速，如设置 will-change,设置 transform3D</li><li>尽量使用 transform 和 opacity 去写动画</li></ol><h1 id="05-响应式设计"><a href="#05-响应式设计" class="headerlink" title="05 响应式设计"></a>05 响应式设计</h1><ol><li>优先选用流式布局，如百分比，flex，grid 等</li><li>使用响应式图片，匹配尺寸</li><li>使用媒体查询为不同设备类型做适配</li><li>给移动端设备设置简单，统一的视口</li><li>使用相对长度，如 em，rem，vw 做为长度度量</li></ol><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p>媒体查询允许某些样式只在页面满足特定条件时生效，我们可以将媒体类型以及媒体特性作为约束条件<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/media.png" alt="media"></p><h2 id="设备像素，参考像素和移动设备视口"><a href="#设备像素，参考像素和移动设备视口" class="headerlink" title="设备像素，参考像素和移动设备视口"></a>设备像素，参考像素和移动设备视口</h2><h3 id="设备像素"><a href="#设备像素" class="headerlink" title="设备像素"></a>设备像素</h3><p><strong>设备像素：</strong><br>设备像素就是物理像素：显示屏上绘制的最小单位</p><h3 id="DPI-amp-amp-PPI"><a href="#DPI-amp-amp-PPI" class="headerlink" title="DPI&amp;&amp;PPI"></a>DPI&amp;&amp;PPI</h3><p>dpi:每英寸多少点<br>ppi:每英寸多少像素数<br>当用于描述显示器设备的时候，ppi 等于 dpi<br>ppi 的计算公式:<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/ppi.png" alt="ppi"></p><h3 id="CSS-像素："><a href="#CSS-像素：" class="headerlink" title="CSS 像素："></a>CSS 像素：</h3><p>css 像素指的是视角单位<br>css 像素不等于设备像素</p><p>浏览器根据硬件设备直接获取的 css 像素</p><h3 id="DPR-设备像素比"><a href="#DPR-设备像素比" class="headerlink" title="DPR 设备像素比"></a>DPR 设备像素比</h3><p>DPR = 设备像素/CSS 像素<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/dpr.png" alt="dpr"></p><h3 id="移动端的-viewport"><a href="#移动端的-viewport" class="headerlink" title="移动端的 viewport"></a>移动端的 viewport</h3><p>布局视口(viewport)是页面 html 元素的包含块，默认情况下可以用 window.document.documentElement.clientWidth 就是 viewport。<br>在移动设备中，默认的布局视口由于历史兼容 pc 屏幕的原因，并不符合需求，所以我们需要用<meta>标签对 viewport 进行设定，来完成移动端的适配。</p><p>meta 标签的属性：</p><ul><li>width</li><li>height</li><li>initial-scale</li><li>minimum-scale</li><li>maximum-scale</li><li>user-scalable</li></ul><p>常见的移动端的 viewport 的设置 1.保存 scale 为 1<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,inital-scale=1&quot;&gt;</code><br>这样设置的好处是：让布局视口宽度和设备屏幕的宽度一样，完成适配<br>坏处在于对于 dpr&gt;1 的设备，没法实现真实设备像素</p><p>2.保持 scale 放缩参数是 1/dpr<br><code>const calScale = 1/window.devicePixeRation</code><br><code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=calScale&gt;</code><br>maximum-scale=calScale,minimun-scale=calScale,user-scalable=no”&gt;<br>这样的好处是实现了真实的设备像素，1css 像素等于 1 设备像素<br>不好的在于不同设备想达到一个 csspx 严格等于一设备像素，需要处理兼容性，而且全局等比例放缩，对于某些固定尺寸要特殊处理</p><h2 id="相对长度"><a href="#相对长度" class="headerlink" title="相对长度"></a>相对长度</h2><h3 id="em："><a href="#em：" class="headerlink" title="em："></a>em：</h3><ul><li>在非 font-size 属性中使用是相对于自身的字体大小</li><li>在 font-size 上使用是相对于父元素的字体大小(一般不用于 font-size)<br>运用场景：可以让展示区域根据展示字号的不同，做出放缩调整<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/em0.png" alt="em"><br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/em1.png" alt="em"></li></ul><h3 id="rem"><a href="#rem" class="headerlink" title="rem:"></a>rem:</h3><p>rem:根元素的字体大小，不会像 em 根据父元素导致多重嵌套</p><p>运用例子：<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/rem.png" alt="rem"></p><h3 id="vw-和-vh"><a href="#vw-和-vh" class="headerlink" title="vw 和 vh"></a>vw 和 vh</h3><p>vw：视窗高度的 1%<br>vh：视窗高度的 1%<br>运用例子:<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/vhvw.png" alt="vhvw"></p><h1 id="06-CSS-生态"><a href="#06-CSS-生态" class="headerlink" title="06 CSS 生态"></a>06 CSS 生态</h1><h2 id="语言增强-css-预处理器"><a href="#语言增强-css-预处理器" class="headerlink" title="语言增强-css 预处理器"></a>语言增强-css 预处理器</h2><p><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/chuli.png" alt="预处理器"></p><h2 id="工程架构-css-模块化"><a href="#工程架构-css-模块化" class="headerlink" title="工程架构-css 模块化"></a>工程架构-css 模块化</h2><p>防止 css 全局污染的问题的解决方案：</p><ol><li>BEM 命名<br>通过.block_element–modifier 这种命名方案规范来约束开发者，从而达到样式隔离<br><img src="/BEN.png" alt="BEM"></li><li>vue-loader 的 scoped 方案<br>通过编译的方式，在 html 元素上添加 data-xx 的唯一属性，然后利用 css 增加选择器[data-xx]的方式实现样式隔离<br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/scoped.png" alt="scoped"></li><li>CSS Modules<br>也是通过编译的方式，将一个 css file 中的样式命名默认转化为一个全局唯一的名称，实现样式隔离(常用 css-loader 或者 postcss-module)<br><a href="https://github.com/css-modules/css-modules">css-module</a><br><img src="/2023/04/25/%E7%90%86%E8%A7%A3CSS/css-module.png" alt="css-module"></li></ol><p>还有 css in js 以及原子化 css 等 css 工程化内容，就不一一介绍了，有需要可以查阅相关资料<br><a href="https://tailwindui.com/">css 原子化的库</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程范式</title>
    <link href="/2023/04/18/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/"/>
    <url>/2023/04/18/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>编程语言分为四大类：</p><ul><li>面向过程（代表：C）</li><li>面向对象（代表：java）</li><li>函数式编程（代表：lisp）</li><li>多范式编程（代表：JavaScript）</li></ul><h2 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h2><p>不讲，太简单</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>特点：</p><ol><li>封装</li><li>继承</li><li>多态</li><li><strong>依赖注入</strong></li></ol><p>1 2 3 点都老生常谈的内容了，主要是记一下第四点</p><h3 id="依赖注入："><a href="#依赖注入：" class="headerlink" title="依赖注入："></a>依赖注入：</h3><p>面向对象的依赖注入是一种设计模式，它的核心思想是将对象之间的依赖关系从代码中解耦出来，以便更容易地进行测试、维护和修改。</p><p>依赖注入的基本概念是将一个对象所依赖的其他对象通过构造函数、属性或方法参数等方式注入到这个对象中，而不是在这个对象的代码内部直接创建或引用这些依赖关系。这种方式使得对象之间的依赖关系更加松散，使得代码更加灵活、可测试和可维护。</p><p>这是一个 JS 的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义依赖关系</span><br><span class="hljs-keyword">var</span> dependency = &#123;<br>  <span class="hljs-attr">doSomethingElse</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;这是一个依赖关系&quot;</span>);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// 定义需要依赖注入的对象</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">MyClass</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">dependency</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">dependency</span> = dependency;<br>&#125;;<br><br><span class="hljs-comment">// 在对象的原型中定义一个方法，使用依赖关系</span><br><span class="hljs-title class_">MyClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">doSomething</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">dependency</span>.<span class="hljs-title function_">doSomethingElse</span>();<br>&#125;;<br><br><span class="hljs-comment">// 创建一个 MyClass 对象，并传递依赖关系</span><br><span class="hljs-keyword">var</span> myClass = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>(dependency);<br><br><span class="hljs-comment">// 使用 MyClass 对象调用 doSomething 方法，它将调用依赖关系的 doSomethingElse 方法</span><br>myClass.<span class="hljs-title function_">doSomething</span>();<br></code></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个依赖关系对象 dependency，它有一个 doSomethingElse 方法。然后我们定义了一个 MyClass 类，它需要一个 dependency 依赖关系对象。我们在 MyClass 类的原型中定义了一个 doSomething 方法，使用依赖关系对象执行一些操作。最后，我们创建了一个 MyClass 实例，并将依赖关系对象传递给它。我们调用 myClass 的 doSomething 方法，它将使用依赖关系对象的 doSomethingElse 方法。</p><p>如果在传统的编程中，每个组件通常会直接实例化其所依赖的对象，并调用该对象的方法来完成某个操作。这种做法使得组件之间的依赖关系非常紧密，如果一个组件需要修改其依赖的对象或者添加一个新的依赖关系，那么就需要修改这个组件的代码，这可能会导致代码的不稳定和难以维护。</p><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><ul><li>函数是“第一公民”</li><li>纯函数/无副作用</li><li>高阶函数/闭包</li></ul><h3 id="纯函数的优势："><a href="#纯函数的优势：" class="headerlink" title="纯函数的优势："></a>纯函数的优势：</h3><ul><li>可缓存</li><li>可移植</li><li>可测试</li><li>可推理</li><li>可并行</li></ul><h3 id="Curring"><a href="#Curring" class="headerlink" title="Curring"></a>Curring</h3><p>柯里化</p><blockquote><p>出门右转 JS 入门难题</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6</title>
    <link href="/2023/04/16/ES6/"/>
    <url>/2023/04/16/ES6/</url>
    
    <content type="html"><![CDATA[<h1 id="第一节-ES6-比较重要的部分"><a href="#第一节-ES6-比较重要的部分" class="headerlink" title="第一节-ES6 比较重要的部分"></a>第一节-ES6 比较重要的部分</h1><h2 id="1-解构赋值"><a href="#1-解构赋值" class="headerlink" title="1.解构赋值"></a>1.解构赋值</h2><p><em>无论是数组还是对象还是字符串，甚至于 json 格式的文件，都可以通过 ES6 新增的解构赋值的方式来将所需要的内容提起出来</em></p><h3 id="1-1-数组的解构赋值"><a href="#1-1-数组的解构赋值" class="headerlink" title="1.1 数组的解构赋值"></a>1.1 数组的解构赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a0 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> b0 = <span class="hljs-number">2</span>; <span class="hljs-comment">//在ES6之前的写法</span><br><span class="hljs-keyword">let</span> [a1, b1] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]; <span class="hljs-comment">//ES6后提供的解构，a=1，b=2</span><br></code></pre></td></tr></table></figure><p>这种写法叫做模式匹配，只要等号俩边的模式相同，左边的变量就会被赋予相同的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [[i], j, [[k]]] = [[<span class="hljs-number">1</span>], <span class="hljs-number">2</span>, [[<span class="hljs-number">3</span>]]]; <span class="hljs-comment">//同样也可以解构赋值</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [, , a] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <span class="hljs-comment">//a = 3</span><br><span class="hljs-keyword">let</span> [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]; <span class="hljs-comment">//c = undefind</span><br><span class="hljs-keyword">let</span> [a = <span class="hljs-number">1</span>, b] = [<span class="hljs-number">2</span>]; <span class="hljs-comment">// a=1,b=2</span><br><span class="hljs-keyword">let</span> [a, b = <span class="hljs-number">2</span>] = [<span class="hljs-number">3</span>, undefind]; <span class="hljs-comment">// a = 3 b = 2</span><br></code></pre></td></tr></table></figure><p>解构赋值同样也允许默认值</p><h3 id="1-2-对象的解构赋值"><a href="#1-2-对象的解构赋值" class="headerlink" title="1.2 对象的解构赋值"></a>1.2 对象的解构赋值</h3><p><em>对象的解构与数组的解构最大的不同在于对象不需要左右两边一样的次序</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123; a, b &#125; = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">3</span> &#125;; <span class="hljs-comment">//a = 1 b = 3</span><br><span class="hljs-keyword">let</span> &#123; b, a &#125; = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">3</span> &#125;; <span class="hljs-comment">// a = 1 b = 3</span><br></code></pre></td></tr></table></figure><p>如果解构失败同样也是 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123;a&#125; = &#123;b = <span class="hljs-string">&#x27;正确&#x27;</span>&#125; <span class="hljs-comment">// a = undefined</span><br></code></pre></td></tr></table></figure><p>一样存在默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123;a,<span class="hljs-attr">b</span>:<span class="hljs-string">&#x27;默认&#x27;</span>&#125; = &#123;<span class="hljs-attr">a</span>:<span class="hljs-string">&#x27;非默认&#x27;</span>&#125; <span class="hljs-comment">// a = &#x27;非默认&#x27;，b = &#x27;默认&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-字符串的解构"><a href="#1-3-字符串的解构" class="headerlink" title="1.3 字符串的解构"></a>1.3 字符串的解构</h3><p>字符串也可以结构，这时字符串被转化为了一个类数组对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [a, b, c, d, f] = <span class="hljs-string">&quot;Hello&quot;</span>; <span class="hljs-comment">// a=H,b=e,c=l.d=l,f=o</span><br></code></pre></td></tr></table></figure><p>类似数组的对象还有一个 len 的属性，同样也可以对其解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">length</span>: len &#125; = <span class="hljs-string">&quot;Hello&quot;</span>; <span class="hljs-comment">//length = 5</span><br></code></pre></td></tr></table></figure><h3 id="1-4-函数的参数进行的解构"><a href="#1-4-函数的参数进行的解构" class="headerlink" title="1.4 函数的参数进行的解构"></a>1.4 函数的参数进行的解构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">[x, y]</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br>add[(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)]; <span class="hljs-comment">// 30</span><br></code></pre></td></tr></table></figure><p>上面那段代码中虽然 add 函数的参数是数组，但是传入参数的那一刻数组就被解构成变量 x 和 y 了，函数内部就只能感受到 x 和 y</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo0</span>(<span class="hljs-params">[x, y]</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-title function_">demo0</span>([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>]); <span class="hljs-comment">//30</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo1</span>(<span class="hljs-params">[x, y = <span class="hljs-number">20</span>]</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-title function_">demo1</span>([<span class="hljs-number">10</span>]); <span class="hljs-comment">// 30</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo2</span>(<span class="hljs-params">x = <span class="hljs-number">10</span>, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-title function_">demo2</span>(<span class="hljs-number">20</span>); <span class="hljs-comment">// 30</span><br></code></pre></td></tr></table></figure><h3 id="1-5-解构赋值的用途"><a href="#1-5-解构赋值的用途" class="headerlink" title="1.5 解构赋值的用途"></a>1.5 解构赋值的用途</h3><h4 id="1-5-1-交换变量的值"><a href="#1-5-1-交换变量的值" class="headerlink" title="1.5.1 交换变量的值"></a>1.5.1 交换变量的值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> y = ((<span class="hljs-number">2</span>)[(x, y)] = [y, x]); <span class="hljs-comment">//x = 2,y = 1</span><br></code></pre></td></tr></table></figure><h4 id="1-5-2-对-JSON-对象数据的提取"><a href="#1-5-2-对-JSON-对象数据的提取" class="headerlink" title="1.5.2 对 JSON 对象数据的提取"></a>1.5.2 对 JSON 对象数据的提取</h4><p><em>解构赋值对 JSON 对象的数据提取尤为有用，特别在于网络请求返回的数据</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> jsonData = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;200&quot;</span>,<br>  <span class="hljs-attr">data</span>: [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>],<br>&#125;;<br><span class="hljs-keyword">let</span> &#123; id, status, <span class="hljs-attr">data</span>: number &#125; = jsonData; <span class="hljs-comment">// id = 1,status=&#x27;200&#x27;,number = [100,200]</span><br></code></pre></td></tr></table></figure><h2 id="2-字符串的扩展"><a href="#2-字符串的扩展" class="headerlink" title="2.字符串的扩展"></a>2.字符串的扩展</h2><h3 id="2-1-字符串的-Unicode-表示法"><a href="#2-1-字符串的-Unicode-表示法" class="headerlink" title="2.1 字符串的 Unicode 表示法"></a>2.1 字符串的 Unicode 表示法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;\u0061&quot;</span>; <span class="hljs-comment">// a</span><br></code></pre></td></tr></table></figure><h3 id="2-2-字符串的遍历接口"><a href="#2-2-字符串的遍历接口" class="headerlink" title="2.2 字符串的遍历接口"></a>2.2 字符串的遍历接口</h3><p><em>ES6 为字符串都提供了遍历器接口，使得字符串可以用 for of 循环遍历</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> codePoint <span class="hljs-keyword">of</span> <span class="hljs-string">&quot;foo&quot;</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(codePoint);<br>&#125; <span class="hljs-comment">//&#x27;f&#x27; &#x27;o&#x27; &#x27;o&#x27;</span><br></code></pre></td></tr></table></figure><p>同样这个方法也可以用来遍历大于 0xFFFF 的码点</p><h3 id="2-3-模板字符串"><a href="#2-3-模板字符串" class="headerlink" title="2.3 模板字符串"></a>2.3 模板字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;YY&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`这篇文章的作者是<span class="hljs-subst">$&#123;name&#125;</span>`</span>); <span class="hljs-comment">// 这篇文章的作者是YY</span><br></code></pre></td></tr></table></figure><p>并且这个模板字符串可以换行写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">`随便</span><br><span class="hljs-string">换行</span><br><span class="hljs-string">写`</span>;<br></code></pre></td></tr></table></figure><h3 id="2-4-新增的字符串方法"><a href="#2-4-新增的字符串方法" class="headerlink" title="2.4 新增的字符串方法"></a>2.4 新增的字符串方法</h3><ul><li>**includes()**：返回布尔值，表示是否找到了参数字符串。</li><li>**startsWith()**：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li>**endsWith()**：返回布尔值，表示参数字符串是否在原字符串的尾部。</li><li><strong>repeat()</strong>: 方法返回一个新字符串，表示将原字符串重复 n 次</li><li><strong>padStart(),padEnd()</strong>: 头尾补全字符</li><li><strong>trimStart(),trimEnd()</strong>:头尾删去空格 <em>用于搜索删去空格不错</em></li></ul><h2 id="3-数组扩展"><a href="#3-数组扩展" class="headerlink" title="3.数组扩展"></a>3.数组扩展</h2><h3 id="3-1-Rest-参数和-Spread-语法（利用三个点…）"><a href="#3-1-Rest-参数和-Spread-语法（利用三个点…）" class="headerlink" title="3.1 Rest 参数和 Spread 语法（利用三个点…）"></a>3.1 Rest 参数和 Spread 语法（利用三个点…）</h3><p>Rest 参数就是把剩余的参数收集到一个数组中<br>Spread 就是把数组中的内容张开</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = （...args） =&gt;&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args)<br>&#125;<br><span class="hljs-title function_">a</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>) <span class="hljs-comment">//[1,2,3,4,5]</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]); <span class="hljs-comment">//1,2,3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...<span class="hljs-string">&quot;123456&quot;</span>); <span class="hljs-comment">//1,2,3,4,5,6</span><br></code></pre></td></tr></table></figure><h4 id="3-1-1Rest-和-Spread-应用"><a href="#3-1-1Rest-和-Spread-应用" class="headerlink" title="3.1.1Rest 和 Spread 应用"></a>3.1.1Rest 和 Spread 应用</h4><ol><li>复制和修改</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> arr2 = [...a];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2);<br><br><span class="hljs-keyword">const</span> obj1 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;;<br><span class="hljs-keyword">const</span> obj2 = &#123; ...obj1 &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj2); <span class="hljs-comment">// &#123;name:&#x27;小明&#x27;,age:18&#125;</span><br><span class="hljs-comment">// 修改数据</span><br><span class="hljs-keyword">const</span> obj3 = &#123; ...obj1, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;man&quot;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj3); <span class="hljs-comment">// &#123; name: &#x27;jack&#x27;, age: 18, gender: &#x27;man&#x27; &#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>合并数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ES6 之前</span><br><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> b = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">const</span> c = a.<span class="hljs-title function_">concat</span>(b); <span class="hljs-comment">// [1,2,3,1,5,6]</span><br><br><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, obj1, obj2); <span class="hljs-comment">// &#123;a:1,b:1&#125;</span><br><br><span class="hljs-comment">// ES6 之后</span><br><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> b = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-comment">// new Set()，用于数组去重</span><br><span class="hljs-keyword">const</span> c = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([...a, ...b])]; <span class="hljs-comment">// [1,2,3,5,6]</span><br><br><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> obj = &#123; ...obj1, ...obj2 &#125;; <span class="hljs-comment">// &#123;a:1,b:1&#125;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>与解构赋值结合</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">const</span> [a, ...arr2] = arr;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2); <span class="hljs-comment">// [2,3,4]</span><br></code></pre></td></tr></table></figure><h3 id="3-2-数组的扩展方法"><a href="#3-2-数组的扩展方法" class="headerlink" title="3.2 数组的扩展方法"></a>3.2 数组的扩展方法</h3><ul><li>Array.from():将类数组转化为真实的数组</li><li>Array.of():将一组值，转化为数组</li><li>copyWithin():将指定位置的成员复制到指定位置，会改变原数组</li><li>find()和 findIndex(): 找符合条件的数组成员</li><li>fill():使用一个定值，填充一个数组</li></ul><h2 id="4-对象的扩展"><a href="#4-对象的扩展" class="headerlink" title="4.对象的扩展"></a>4.对象的扩展</h2><h3 id="4-1-对象的简洁表达"><a href="#4-1-对象的简洁表达" class="headerlink" title="4.1 对象的简洁表达"></a>4.1 对象的简洁表达</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 变量简洁表示</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> b = &#123; a &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b); <span class="hljs-comment">// &#123;a:10&#125;</span><br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">const</span> c = &#123; <span class="hljs-attr">a</span>: a &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c); <span class="hljs-comment">// &#123;a:10&#125;</span><br><br><span class="hljs-comment">// 方法的简洁表示</span><br><span class="hljs-keyword">const</span> dog = &#123;<br>  <span class="hljs-title function_">speak</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;wang wang&quot;</span>);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">const</span> dog1 = &#123;<br>  <span class="hljs-attr">speak</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;wang wang&quot;</span>);<br>  &#125;,<br>&#125;;<br><br>dog.<span class="hljs-title function_">speak</span>(); <span class="hljs-comment">// &quot;wang wang&quot;</span><br>dog1.<span class="hljs-title function_">speak</span>(); <span class="hljs-comment">// &quot;wang wang&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-用字面量定义对象"><a href="#4-2-用字面量定义对象" class="headerlink" title="4.2 用字面量定义对象"></a>4.2 用字面量定义对象</h3><p><em>在 ES6 之前不能用变量表示对象的 key</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 对象属性的定义</span><br><span class="hljs-keyword">const</span> stu = &#123;&#125;;<br>stu.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;yang&quot;</span>; <span class="hljs-comment">// 方法一</span><br>stu[<span class="hljs-string">&quot;age&quot;</span>] = <span class="hljs-number">18</span>; <span class="hljs-comment">// 方法二</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu); <span class="hljs-comment">// &#123; name: &#x27;yang&#x27;, age: 18 &#125;</span><br><br><span class="hljs-comment">// 使用字面量定义，ES6之前，只能使用方法一进行,也就是不能让对象的key是一个变量</span><br><span class="hljs-keyword">const</span> stu2 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jie&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;;<br><br><span class="hljs-comment">// ES6之后允许我们通过方法二进行对象字面量的定义</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-string">&quot;age&quot;</span>;<br><span class="hljs-keyword">const</span> stu3 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cao&quot;</span>,<br>  [a]: <span class="hljs-number">18</span>,<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu3); <span class="hljs-comment">// &#123; name: &#x27;cao&#x27;, age: 18 &#125;</span><br><br><span class="hljs-comment">// 遍历输出</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> stu3) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu3[i]);<br>&#125; <span class="hljs-comment">// cao 18</span><br></code></pre></td></tr></table></figure><h2 id="5-Set-数据类型"><a href="#5-Set-数据类型" class="headerlink" title="5.Set 数据类型"></a>5.Set 数据类型</h2><h3 id="5-1-基本用法"><a href="#5-1-基本用法" class="headerlink" title="5.1 基本用法"></a>5.1 基本用法</h3><p>Set 结构类似数组，但其中所有成员的值都是唯一的，没有重复的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> s.<span class="hljs-title function_">add</span>(x));<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> s) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>&#125;<br><span class="hljs-comment">// 2 3 5 4</span><br></code></pre></td></tr></table></figure><p>Set 函数可以接受一个数组或者类数组作为参数用来初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 例一</span><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]);<br>[...set];<br><span class="hljs-comment">// [1, 2, 3, 4]</span><br><br><span class="hljs-comment">// 例二</span><br><span class="hljs-keyword">const</span> items = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>]);<br>items.<span class="hljs-property">size</span>; <span class="hljs-comment">// 5</span><br><br><span class="hljs-comment">// 类数组</span><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;div&quot;</span>));<br>set.<span class="hljs-property">size</span>; <span class="hljs-comment">// 56</span><br><br><span class="hljs-comment">// 类数组对象也可以作为参数</span><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">div</span>) =&gt;</span> set.<span class="hljs-title function_">add</span>(div));<br>set.<span class="hljs-property">size</span>; <span class="hljs-comment">// 56</span><br></code></pre></td></tr></table></figure><p>Set 也可以用来去重（配合 spread 语法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 去除数组的重复成员</span><br>[...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(array)]<br><span class="hljs-comment">//去除字符串中重复的</span><br>[...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(<span class="hljs-string">&#x27;ababbc&#x27;</span>)].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment">// &quot;abc&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-基本方法"><a href="#5-2-基本方法" class="headerlink" title="5.2 基本方法"></a>5.2 基本方法</h3><h4 id="5-2-1-ket-values-entries-方法"><a href="#5-2-1-ket-values-entries-方法" class="headerlink" title="5.2.1 ket(),values(),entries()方法"></a>5.2.1 ket(),values(),entries()方法</h4><p>上述三个方法返回的都是遍历器对象。由于 Set 结构没有键名，只有键值，所以 key()和 values()方法的行为完全一致，而 entries()方法返回的则是成员一致的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>]);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">keys</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// red</span><br><span class="hljs-comment">// green</span><br><span class="hljs-comment">// blue</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">values</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// red</span><br><span class="hljs-comment">// green</span><br><span class="hljs-comment">// blue</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">entries</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// [&quot;red&quot;, &quot;red&quot;]</span><br><span class="hljs-comment">// [&quot;green&quot;, &quot;green&quot;]</span><br><span class="hljs-comment">// [&quot;blue&quot;, &quot;blue&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="5-2-2forEach"><a href="#5-2-2forEach" class="headerlink" title="5.2.2forEach()"></a>5.2.2forEach()</h4><p>Set 结构的实例与数组一样，也拥有 forEach 方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>]);<br>set.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">value, key</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&quot; : &quot;</span> + value));<br><span class="hljs-comment">// 1 : 1</span><br><span class="hljs-comment">// 4 : 4</span><br><span class="hljs-comment">// 9 : 9</span><br></code></pre></td></tr></table></figure><p><em>另外，forEach 方法还可以有第三个参数，表示绑定处理函数内部的 this 对象。</em></p><h2 id="6-Map-数据类型"><a href="#6-Map-数据类型" class="headerlink" title="6.Map 数据类型"></a>6.Map 数据类型</h2><p><strong>JS 的对象本质上是 Hash 的结构，但是它的 key 受到了很大的限制。所以为了解决这个限制，ES6 提供了一个 Map 数据结构，比 JS 的对象来的更接近 Hash 结构。</strong></p><h3 id="6-1-基本用法"><a href="#6-1-基本用法" class="headerlink" title="6.1 基本用法"></a>6.1 基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><span class="hljs-keyword">const</span> o = &#123; <span class="hljs-attr">p</span>: <span class="hljs-string">&quot;Hello World&quot;</span> &#125;;<br><br>m.<span class="hljs-title function_">set</span>(o, <span class="hljs-string">&quot;content&quot;</span>);<br>m.<span class="hljs-title function_">get</span>(o); <span class="hljs-comment">// &quot;content&quot;</span><br><br>m.<span class="hljs-title function_">has</span>(o); <span class="hljs-comment">// true</span><br>m.<span class="hljs-title function_">delete</span>(o); <span class="hljs-comment">// true</span><br>m.<span class="hljs-title function_">has</span>(o); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>上面代码实现了简单的 set，get 以及 has 方法<br>Map 也支持接收数组参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>  [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>],<br>  [<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;Author&quot;</span>],<br>]);<br><br>map.<span class="hljs-property">size</span>; <span class="hljs-comment">// 2</span><br>map.<span class="hljs-title function_">has</span>(<span class="hljs-string">&quot;name&quot;</span>); <span class="hljs-comment">// true</span><br>map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;name&quot;</span>); <span class="hljs-comment">// &quot;张三&quot;</span><br>map.<span class="hljs-title function_">has</span>(<span class="hljs-string">&quot;title&quot;</span>); <span class="hljs-comment">// true</span><br>map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;title&quot;</span>); <span class="hljs-comment">// &quot;Author&quot;</span><br></code></pre></td></tr></table></figure><p>事实上，不仅仅是数组，任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构都可以当作 Map 构造函数的参数。这就是说，Set 和 Map 都可以用来生成新的 Map。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<br>  [<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-number">1</span>],<br>  [<span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-number">2</span>],<br>]);<br><span class="hljs-keyword">const</span> m1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(set);<br>m1.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;foo&quot;</span>); <span class="hljs-comment">// 1</span><br><br><span class="hljs-keyword">const</span> m2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&quot;baz&quot;</span>, <span class="hljs-number">3</span>]]);<br><span class="hljs-keyword">const</span> m3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(m2);<br>m3.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;baz&quot;</span>); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h4 id="6-1-1-注意事项"><a href="#6-1-1-注意事项" class="headerlink" title="6.1.1 注意事项"></a>6.1.1 注意事项</h4><ol><li>对同一键多次赋值会覆盖前一次的值</li><li>读取未知的键会返回 undefined</li><li>Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br><span class="hljs-keyword">const</span> k1 = [<span class="hljs-string">&quot;a&quot;</span>];<br><span class="hljs-keyword">const</span> k2 = [<span class="hljs-string">&quot;a&quot;</span>];<br><br>map.<span class="hljs-title function_">set</span>(k1, <span class="hljs-number">111</span>).<span class="hljs-title function_">set</span>(k2, <span class="hljs-number">222</span>);<br><br>map.<span class="hljs-title function_">get</span>(k1); <span class="hljs-comment">// 111</span><br>map.<span class="hljs-title function_">get</span>(k2); <span class="hljs-comment">// 222</span><br></code></pre></td></tr></table></figure><ol start="4"><li>如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，比如 0 和-0 就是一个键</li></ol><h3 id="6-2-属性以及方法"><a href="#6-2-属性以及方法" class="headerlink" title="6.2 属性以及方法"></a>6.2 属性以及方法</h3><p><strong>（1）size 属性</strong><br>size 属性返回 Map 结构的成员总数。<br><strong>（2）Map.prototype.set(key, value)</strong><br>set 方法设置键名 key 对应的键值为 value，然后返回整个 Map 结构。如果 key 已经有值，则键值会被更新，否则就新生成该键。<br>又因为返回 Map 结构，所以可以使用链式写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br>m.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;edition&quot;</span>, <span class="hljs-number">6</span>); <span class="hljs-comment">// 键是字符串</span><br>m.<span class="hljs-title function_">set</span>(<span class="hljs-number">262</span>, <span class="hljs-string">&quot;standard&quot;</span>); <span class="hljs-comment">// 键是数值</span><br>m.<span class="hljs-title function_">set</span>(<span class="hljs-literal">undefined</span>, <span class="hljs-string">&quot;nah&quot;</span>); <span class="hljs-comment">// 键是 undefined</span><br><br><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>().<span class="hljs-title function_">set</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">set</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;b&quot;</span>).<span class="hljs-title function_">set</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;c&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>（3）Map.prototype.get(key)</strong><br>get 方法读取 key 对应的键值，如果找不到 key，返回 undefined。<br><strong>（4）Map.prototype.has(key)</strong><br>has 方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。<br><strong>（5）Map.prototype.delete(key)</strong><br>delete 方法删除某个键，返回 true。如果删除失败，返回 false。<br><strong>（6）Map.prototype.clear()</strong><br>clear 方法清除所有成员，没有返回值。</p><h2 id="7-Pomise"><a href="#7-Pomise" class="headerlink" title="7.Pomise"></a>7.Pomise</h2><h3 id="7-1-Pomise-含义"><a href="#7-1-Pomise-含义" class="headerlink" title="7.1 Pomise 含义"></a>7.1 Pomise 含义</h3><p>从语法上说 Promise 是一个对象，他可以获取异步操作的消息，同时也具有一定的 API 来进行处理<br>Promise 有两个特点：</p><ol><li>对象的状态不受外界影响。它具有三个状态：pending（进行中），fulfilled（已成功），rejected（已失败），只有异步操作的结果会决定这个对象的状态</li><li>一旦对象状态确定，无法再改变，任何时候都能得到这个结果。</li></ol><p>Promise 也有一些缺点。首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><h3 id="7-2-基本用法"><a href="#7-2-基本用法" class="headerlink" title="7.2 基本用法"></a>7.2 基本用法</h3><p>Promise 对象是个构造函数，用来生成 Promise 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-comment">// ... some code</span><br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-comment">/* 异步操作成功 */</span>)&#123;<br>    <span class="hljs-title function_">resolve</span>(value);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>promise 函数支持接收俩个函数参数，分别是 resolve 和 reject。俩个参数的作用是改变 promise 的状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">timeout</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve, ms, <span class="hljs-string">&quot;done&quot;</span>);<br>  &#125;);<br>&#125;<br><br><span class="hljs-title function_">timeout</span>(<span class="hljs-number">100</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;); <span class="hljs-comment">//done</span><br></code></pre></td></tr></table></figure><p>上述代码中的.then 可以接受俩个回调函数作参数,当 promise 函数状态改变时调用。<br>Promise 新建后就会立即执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Promise&quot;</span>);<br>  <span class="hljs-title function_">resolve</span>();<br>&#125;);<br><br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;resolved.&quot;</span>);<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hi!&quot;</span>);<br><br><span class="hljs-comment">// Promise</span><br><span class="hljs-comment">// Hi!</span><br><span class="hljs-comment">// resolved</span><br></code></pre></td></tr></table></figure><h3 id="7-3-一些方法"><a href="#7-3-一些方法" class="headerlink" title="7.3 一些方法"></a>7.3 一些方法</h3><ol><li>Promise.prototype.then()</li><li>Promise.prototype.catch()</li><li>Promise.prototype.finally()</li><li>Promise.all()</li><li>Promise.race()</li><li>Promise.allSettled()</li><li>Promise.any()</li><li>Promise.resolve()</li><li>Promise.reject()</li></ol><h1 id="第二节-ES6-中少用到的内容（可能对于菜鸟属于少用类型）"><a href="#第二节-ES6-中少用到的内容（可能对于菜鸟属于少用类型）" class="headerlink" title="第二节-ES6 中少用到的内容（可能对于菜鸟属于少用类型）"></a>第二节-ES6 中少用到的内容（可能对于菜鸟属于少用类型）</h1><h2 id="8-Symbol-类型数据"><a href="#8-Symbol-类型数据" class="headerlink" title="8.Symbol 类型数据"></a>8.Symbol 类型数据</h2><h3 id="8-1-基本含义"><a href="#8-1-基本含义" class="headerlink" title="8.1 基本含义"></a>8.1 基本含义</h3><p>对于 ES5 以前的对象属性名字都是字符串，就很容易出现重复名字的情况，所以为了避免这种情况，ES6 引入了一个新的数据类型–Symbol，表示独一无二的值。</p><h3 id="8-2-Symbol-的使用"><a href="#8-2-Symbol-的使用" class="headerlink" title="8.2 Symbol 的使用"></a>8.2 Symbol 的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s = <span class="hljs-title class_">Symbol</span>();<br><br><span class="hljs-keyword">typeof</span> s;<br><span class="hljs-comment">// &quot;symbol&quot;</span><br></code></pre></td></tr></table></figure><p><code>Symbol</code>函数同时可以接收一个字符串内容来作为描述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;bar&quot;</span>);<br><br>s1; <span class="hljs-comment">// Symbol(foo)</span><br>s2; <span class="hljs-comment">// Symbol(bar)</span><br><br>s1.<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">// &quot;Symbol(foo)&quot;</span><br>s2.<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">// &quot;Symbol(bar)&quot;</span><br></code></pre></td></tr></table></figure><p>但是注意，不管<code>Symbol</code>函数是否接收相同的变量名或者均不接收变量名，二者的返回值不相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 没有参数的情况</span><br><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>();<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>();<br><br>s1 === s2; <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// 有参数的情况</span><br><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><br>s1 === s2; <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="8-3-Symbol-使用场景"><a href="#8-3-Symbol-使用场景" class="headerlink" title="8.3 Symbol 使用场景"></a>8.3 Symbol 使用场景</h3><p>对于一个独一无二的变量，最主要的运用场景就是给对象属性命名来避免重复。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> mySymbol = <span class="hljs-title class_">Symbol</span>();<br><br><span class="hljs-comment">// 第一种写法</span><br><span class="hljs-keyword">let</span> a = &#123;&#125;;<br>a[mySymbol] = <span class="hljs-string">&quot;Hello!&quot;</span>;<br><br><span class="hljs-comment">// 第二种写法</span><br><span class="hljs-keyword">let</span> a = &#123;<br>  [mySymbol]: <span class="hljs-string">&quot;Hello!&quot;</span>,<br>&#125;;<br><br><span class="hljs-comment">// 第三种写法</span><br><span class="hljs-keyword">let</span> a = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(a, mySymbol, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;Hello!&quot;</span> &#125;);<br><br><span class="hljs-comment">// 以上写法都得到同样结果</span><br>a[mySymbol]; <span class="hljs-comment">// &quot;Hello!&quot;</span><br></code></pre></td></tr></table></figure><p>注意，Symbol 作为对象属性名的时候，不能使用点运算符，并且在对象内部的时候 Symbol 必须放在方括号之中。</p><h3 id="8-4-关于-Symbol-的遍历问题"><a href="#8-4-关于-Symbol-的遍历问题" class="headerlink" title="8.4 关于 Symbol 的遍历问题"></a>8.4 关于 Symbol 的遍历问题</h3><p>特别的是，当<code>Symbol</code>作为属性值的时候，该属性不会出现在<code>for..of``for..in</code>循环中，同时也不会被<code>Object.keys()``Object.getOwnPropertyNames()``JSON.stringify()</code>返回。<br>但是它也不是一个私有属性，它可以被<code>Object.getOwnProperSymbols()</code>方法获取，这个方法可以获取指定的对象的所有 Symbol 值的一个数组。</p><h2 id="9-Proxy-代理拦截"><a href="#9-Proxy-代理拦截" class="headerlink" title="9.Proxy 代理拦截"></a>9.Proxy 代理拦截</h2><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p><h3 id="9-2-使用"><a href="#9-2-使用" class="headerlink" title="9.2 使用"></a>9.2 使用</h3><p>ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br></code></pre></td></tr></table></figure><p>Proxy 对象都是上面的写法，target 指的是要拦截的目标，即你所要代理拦截的目标。handler 指的是你所定义的拦截行为。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义一个普通的对象obj</span><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;_island&quot;</span>,<br>&#125;;<br><br><span class="hljs-comment">// 代理obj这个对象，并传入get捕获器</span><br><span class="hljs-keyword">const</span> objProxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj, &#123;<br>  <span class="hljs-comment">// get捕获器</span><br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, key</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`捕获到对象获取<span class="hljs-subst">$&#123;key&#125;</span>属性的值操作`</span>);<br>    <span class="hljs-keyword">return</span> target[key];<br>  &#125;,<br>&#125;);<br><br><span class="hljs-comment">// 通过代理对象操作obj对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objProxy.<span class="hljs-property">name</span>);<br><span class="hljs-comment">// 捕获到对象获取name属性的值操作</span><br><span class="hljs-comment">// _island</span><br></code></pre></td></tr></table></figure><p>上述代码中，target 为 obj，说明拦截 obj 的行为。handler 上传入了一个 get 捕获器，主要是用于捕获读取 obj 对象属性的行为是触发，即一读取 obj 对象属性则触发 get 方法。<br>一个对象可以设置多个拦截函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> handler = &#123;<br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, name</span>) &#123;<br>    <span class="hljs-keyword">if</span> (name === <span class="hljs-string">&quot;prototype&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, &quot;</span> + name;<br>  &#125;,<br>  <span class="hljs-attr">apply</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, thisBinding, args</span>) &#123;<br>    <span class="hljs-keyword">return</span> args[<span class="hljs-number">0</span>];<br>  &#125;,<br>  <span class="hljs-attr">construct</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, args</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">value</span>: args[<span class="hljs-number">1</span>] &#125;;<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">var</span> fproxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;, handler);<br><span class="hljs-title function_">fproxy</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">new</span> <span class="hljs-title function_">fproxy</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// &#123;value: 2&#125;</span><br>fproxy.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">// true</span><br>fproxy.<span class="hljs-property">foo</span> === <span class="hljs-string">&quot;Hello, foo&quot;</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="9-3-Proxy-拦截函数"><a href="#9-3-Proxy-拦截函数" class="headerlink" title="9.3 Proxy 拦截函数"></a>9.3 Proxy 拦截函数</h3><ul><li>**get(target, propKey, receiver)**：拦截对象属性的读取，比如 proxy.foo 和 proxy[‘foo’]。</li><li>**set(target, propKey, value, receiver)**：拦截对象属性的设置，比如 proxy.foo = v 或 proxy[‘foo’] = v，返回一个布尔值。</li><li>**has(target, propKey)**：拦截 propKey in proxy 的操作，返回一个布尔值。</li><li>**deleteProperty(target, propKey)**：拦截 delete proxy[propKey]的操作，返回一个布尔值。</li><li>**ownKeys(target)**：拦截 Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in 循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而 Object.keys()的返回结果仅包括目标对象自身的可遍历属性。</li><li>**getOwnPropertyDescriptor(target, propKey)**：拦截 Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。</li><li>**defineProperty(target, propKey, propDesc)**：拦截 Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。</li><li>**preventExtensions(target)**：拦截 Object.preventExtensions(proxy)，返回一个布尔值。</li><li>**getPrototypeOf(target)**：拦截 Object.getPrototypeOf(proxy)，返回一个对象。</li><li>**isExtensible(target)**：拦截 Object.isExtensible(proxy)，返回一个布尔值。</li><li>**setPrototypeOf(target, proto)**：拦截 Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</li><li>**apply(target, object, args)**：拦截 Proxy 实例作为函数调用的操作，比如 proxy(…args)、proxy.call(object, …args)、proxy.apply(…)。</li><li>**construct(target, args)**：拦截 Proxy 实例作为构造函数调用的操作，比如 new proxy(…args)。</li></ul><p>具体使用可以上 ES6 文档查看</p><h3 id="9-4this-的指向问题"><a href="#9-4this-的指向问题" class="headerlink" title="9.4this 的指向问题"></a>9.4this 的指向问题</h3><p>Proxy 对象可以对我们的目标对象进行访问拦截，当你没有设置拦截函数的时候，目标对象的 this 指向就会被改变成 Proxy 对象，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123;<br>  <span class="hljs-attr">m</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === proxy);<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">const</span> handler = &#123;&#125;;<br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br>target.<span class="hljs-title function_">m</span>(); <span class="hljs-comment">// false</span><br>proxy.<span class="hljs-title function_">m</span>(); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="10-Module-语法"><a href="#10-Module-语法" class="headerlink" title="10.Module 语法"></a>10.Module 语法</h2><h3 id="10-1-概述"><a href="#10-1-概述" class="headerlink" title="10.1 概述"></a>10.1 概述</h3><p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// CommonJS模块</span><br><span class="hljs-keyword">let</span> &#123; stat, exists, readfile &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">let</span> _fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">let</span> stat = _fs.<span class="hljs-property">stat</span>;<br><span class="hljs-keyword">let</span> exists = _fs.<span class="hljs-property">exists</span>;<br><span class="hljs-keyword">let</span> readfile = _fs.<span class="hljs-property">readfile</span>;<br></code></pre></td></tr></table></figure><p>CommonJS 模块导入属于运行时加载，原理是整体加载<code>fs</code>模块，然后生成<code>_fs</code>对象，再从上面读取三个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ES6模块</span><br><span class="hljs-keyword">import</span> &#123; stat, exists, readFile &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;fs&quot;</span>;<br></code></pre></td></tr></table></figure><p>上面代码的实质是从<code>fs</code>模块加载 3 个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载。</p><h3 id="10-2-import（）"><a href="#10-2-import（）" class="headerlink" title="10.2.import（）"></a>10.2.import（）</h3><p>上面说到 ES6 模块是从静态加载，所以只能将 import 函数放在代码最上端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">if</span> (x === <span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-keyword">import</span> <span class="hljs-title class_">MyModual</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./myModual&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但在 ES2020 引入<code>import()</code>函数支持动态加载模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span>(specifier);<br></code></pre></td></tr></table></figure><p>上面代码中，<code>import</code>函数的参数<code>specifier</code>，指定所要加载的模块的位置。<code>import</code>命令能够接受什么参数,<code>import()</code>函数就能接受什么参数，两者区别主要是后者为动态加载。<br><code>import()</code>返回一个<code>Promise</code>对象，因此<code>import()</code>函数加载一个模块后支持<code>then</code>语法<br>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./myModule.js&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">myModule</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myModule.<span class="hljs-property">default</span>);<br>&#125;); <span class="hljs-comment">//直接获取default</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module1.js&#x27;</span>),<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module2.js&#x27;</span>),<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module3.js&#x27;</span>),<br>])<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">[module1, module2, module3]</span>) =&gt;</span> &#123;<br>   ···<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> myModule = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./myModule.js&quot;</span>);<br>  <span class="hljs-keyword">const</span> &#123; export1, export2 &#125; = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./myModule.js&quot;</span>);<br>  <span class="hljs-keyword">const</span> [module1, module2, module3] = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>    <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./module1.js&quot;</span>),<br>    <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./module2.js&quot;</span>),<br>    <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./module3.js&quot;</span>),<br>  ]);<br>&#125;<br><span class="hljs-title function_">main</span>();<br></code></pre></td></tr></table></figure><h3 id="10-3-严格模式"><a href="#10-3-严格模式" class="headerlink" title="10.3 严格模式"></a>10.3 严格模式</h3><p>ES6 的模块导入自动采用严格模式<br>严格模式主要有以下限制。</p><ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用 with 语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>不能删除变量 delete prop，会报错，只能删除属性 delete global[prop]</li><li>eval 不会在它的外层作用域引入变量</li><li>eval 和 arguments 不能被重新赋值</li><li>arguments 不会自动反映函数参数的变化</li><li>不能使用 arguments.callee</li><li>不能使用 arguments.caller</li><li>禁止 this 指向全局对象</li><li>不能使用 fn.caller 和 fn.arguments 获取函数调用的堆栈</li><li>增加了保留字（比如 protected、static 和 interface）</li></ul><h3 id="10-4-export-和-import-命令"><a href="#10-4-export-和-import-命令" class="headerlink" title="10.4 export 和 import 命令"></a>10.4 export 和 import 命令</h3><p>模块功能主要由<code>export</code>和<code>import</code>俩个命令组成</p><h4 id="10-4-1-Export-命令"><a href="#10-4-1-Export-命令" class="headerlink" title="10.4.1 Export 命令"></a>10.4.1 Export 命令</h4><p>一个文件就是一个模块，你可以通过<code>import()</code>进行导入。但你的 JS 文件里的变量外界无法获取，所以就需要<code>export</code>函数命令进行导出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// profile.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> firstName = <span class="hljs-string">&quot;Michael&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&quot;Jackson&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> year = <span class="hljs-number">1958</span>;<br></code></pre></td></tr></table></figure><p>这样子外界就可以获取到<code>firstName``lastName``year</code>三个变量<br>当然你也可以这么写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// profile.js</span><br><span class="hljs-keyword">var</span> firstName = <span class="hljs-string">&quot;Michael&quot;</span>;<br><span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&quot;Jackson&quot;</span>;<br><span class="hljs-keyword">var</span> year = <span class="hljs-number">1958</span>;<br><span class="hljs-keyword">export</span> &#123; firstName, lastName, year &#125;;<br></code></pre></td></tr></table></figure><p><code>export</code>不止可以导出变量，同时也可以导出函数和类（class）<br>你可以通过<code>as</code>关键词重命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">v1</span>(<span class="hljs-params"></span>) &#123; ... &#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">v2</span>(<span class="hljs-params"></span>) &#123; ... &#125;<br><span class="hljs-keyword">export</span> &#123;<br>  v1 <span class="hljs-keyword">as</span> streamV1,<br>  v2 <span class="hljs-keyword">as</span> streamV2,<br>  v2 <span class="hljs-keyword">as</span> streamLatestVersion<br>&#125;;<br></code></pre></td></tr></table></figure><p>特别注意的是，你导出的东西必须和文件内的变量建立联系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">export</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">var</span> m = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> m;<br></code></pre></td></tr></table></figure><p>另外，<code>export</code>输出的接口与其对应的值是动态绑定关系，可以获取到模块内部实时的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> foo = <span class="hljs-string">&quot;bar&quot;</span>;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> (foo = <span class="hljs-string">&quot;baz&quot;</span>), <span class="hljs-number">500</span>);<br></code></pre></td></tr></table></figure><p>最后，<code>export</code>命令可以出现在模块的任何地方，只要处于模块顶层，不能在块级作用域内，因为这样就违背了 ES6 模块的静态加载设计</p><h4 id="10-4-2-import-命令"><a href="#10-4-2-import-命令" class="headerlink" title="10.4.2 import 命令"></a>10.4.2 import 命令</h4><p>当 JS 文件用 export 命令定义了对外的接口后，你就可以用<code>import</code>函数进行导入加载模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; firstName, lastName, year &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./profile.js&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params">element</span>) &#123;<br>  element.<span class="hljs-property">textContent</span> = firstName + <span class="hljs-string">&quot; &quot;</span> + lastName;<br>&#125;<br></code></pre></td></tr></table></figure><p>大括号内的名字必须和被导入模块内的变量名一样，当然你也可以用 as 来重命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; lastName <span class="hljs-keyword">as</span> surname &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./profile.js&quot;</span>;<br></code></pre></td></tr></table></figure><p><code>import</code>命令输入的变量都是只读的，因为他本质是输入接口，所以不能在加载模块的脚本里面改写接口</p><p>但是<code>import</code>导入的对象，你可以改变他的属性，但是最好别这么做，这样文件会难以维护，所以一切输入的模块都当作只读。</p><p><code>import</code>命令后的 from 接着是相对或者绝对路径，如果用模块名，必须要有配置文件</p><p><code>import</code>命令是静态加载，加载优于一切，在编译阶段就执行完毕，所以不能使用表达式和变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-string">&#x27;f&#x27;</span> + <span class="hljs-string">&#x27;oo&#x27;</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;<br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable language_">module</span> = <span class="hljs-string">&#x27;my_module&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-variable language_">module</span>;<br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">if</span> (x === <span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;module1&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;module2&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-5-整体加载"><a href="#10-5-整体加载" class="headerlink" title="10.5 整体加载"></a>10.5 整体加载</h3><p>除了上面说到的指定某个加载方法，还可以*来整体加载一个模块到一个对象上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> circle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./circle&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;圆面积：&#x27;</span> + circle.<span class="hljs-title function_">area</span>(<span class="hljs-number">4</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;圆周长：&#x27;</span> + circle.<span class="hljs-title function_">circumference</span>(<span class="hljs-number">14</span>));<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span><br></code></pre></td></tr></table></figure><h3 id="10-6-export-和-import-的复合写法"><a href="#10-6-export-和-import-的复合写法" class="headerlink" title="10.6 export 和 import 的复合写法"></a>10.6 export 和 import 的复合写法</h3><p>在一个模块中先后输入输出同一个模块，import 和 export 可以写在一起，但是因为类似于转接一个模块，所以这个文件中不能用导入模块的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> &#123; foo, bar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my_module&quot;</span>;<br><span class="hljs-comment">// 可以简单理解为</span><br><span class="hljs-keyword">import</span> &#123; foo, bar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my_module&quot;</span>;<br><span class="hljs-keyword">export</span> &#123; foo, bar &#125;;<br></code></pre></td></tr></table></figure><p>模块的接口改名和整体输出，可以采用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 接口改名</span><br><span class="hljs-keyword">export</span> &#123; foo <span class="hljs-keyword">as</span> myFoo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my_module&quot;</span>;<br><span class="hljs-comment">// 整体输出</span><br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my_module&quot;</span>;<br></code></pre></td></tr></table></figure><p>ES2020 还提供了这样的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> * <span class="hljs-keyword">as</span> ns <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mod&quot;</span>;<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> ns <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mod&quot;</span>;<br><span class="hljs-keyword">export</span> &#123; ns &#125;;<br></code></pre></td></tr></table></figure><h3 id="10-7-浏览器加载"><a href="#10-7-浏览器加载" class="headerlink" title="10.7 浏览器加载"></a>10.7 浏览器加载</h3><p>在 HTML 传统网页中，浏览器通过<code>&lt;script&gt;</code>标签加载 JS 脚本，但是一旦 JS 文件过大，加载过慢就会卡死，因为加载属于同步加载，只有加载完才能接着渲染。<br>所以后来浏览器支持脚本异步加载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;path/to/myModule.js&quot;</span> defer&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;path/to/myModule.js&quot;</span> <span class="hljs-attr">async</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>derfer 和 async 加载的区别：</p><ul><li>defer 加载是 JS 文件等到整个页面都渲染完了才会执行</li><li>async 加载是页面渲染的同时 JS 文件加载，等 JS 加载完会中断页面渲染然后加载 JS，JS 结束后才会继续渲染</li></ul><p>浏览器加载 ES6 模块，也使用<code>&lt;script&gt;</code>标签，但是要加入 type=”module”属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;module&quot;</span> src=<span class="hljs-string">&quot;./foo.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="10-8-ES6-模块与-CommonJS-模块的区别"><a href="#10-8-ES6-模块与-CommonJS-模块的区别" class="headerlink" title="10.8 ES6 模块与 CommonJS 模块的区别"></a>10.8 ES6 模块与 CommonJS 模块的区别</h3><p>他们有三个重大的区别</p><ol><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</li><li>CommonJS 模块的 require()是同步加载模块，ES6 模块的 import 命令是异步加载，有一个独立的模块依赖的解析阶段。</li></ol><p>第一个区别在上文中有提到过 ES6 模块输出的值是会随着模块内部函数等操作改变值的数值，可以实时获取模块内部动态的值。而 CommonJS 模块加载后，内部的值就不会动态变化了。<br>第二和第三个区别在上文中都有介绍，这里就不多说了</p><h3 id="10-9-Node-js-的模块加载方法"><a href="#10-9-Node-js-的模块加载方法" class="headerlink" title="10.9 Node.js 的模块加载方法"></a>10.9 Node.js 的模块加载方法</h3><p>JavaScript 现在有两种模块。一种是 ES6 模块，简称 ESM；另一种是 CommonJS 模块，简称 CJS。<br>CommonJS 模块是 Node.js 专用的，与 ES6 模块不兼容。语法上面，两者最明显的差异是，CommonJS 模块使用<code>require()</code>和<code>module.exports</code>，ES6 模块使用 import 和 export。<br>它们采用不同的加载方案。从 Node.js v13.2 版本开始，Node.js 已经默认打开了 ES6 模块支持。<br>Node.js 要求 ES6 模块的文件后缀是<code>.mjs</code>, 如果不想改变后缀，可以在项目的 package.js 文件中指定 type 字段为 module。<br>而 CommonJS 模块文件后缀是<code>.cjs</code><br>注意 CommonJS 和 ES6 最好不要混用，因为二者加载方式不同</p><h4 id="10-9-1-CommonJS-模块加载-ES6-模块"><a href="#10-9-1-CommonJS-模块加载-ES6-模块" class="headerlink" title="10.9.1 CommonJS 模块加载 ES6 模块"></a>10.9.1 CommonJS 模块加载 ES6 模块</h4><p>CommonJS 模块中只能用 import()加载 ES6 模块</p><h4 id="10-9-2-ES6-模块加载-CommonJS-模块"><a href="#10-9-2-ES6-模块加载-CommonJS-模块" class="headerlink" title="10.9.2 ES6 模块加载 CommonJS 模块"></a>10.9.2 ES6 模块加载 CommonJS 模块</h4><p>ES6 模块的 import 命令可以加载 CommonJS 模块，但是只能整体加载，不能只加载单一的输出项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">import</span> packageMain <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;commonjs-package&quot;</span>;<br><br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">import</span> &#123; method &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;commonjs-package&quot;</span>;<br></code></pre></td></tr></table></figure><p>如果需要单一输出，可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> packageMain <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;commonjs-package&quot;</span>;<br><span class="hljs-keyword">const</span> &#123; method &#125; = packageMain;<br></code></pre></td></tr></table></figure><h4 id="10-9-3-同时支持俩种格式"><a href="#10-9-3-同时支持俩种格式" class="headerlink" title="10.9.3 同时支持俩种格式"></a>10.9.3 同时支持俩种格式</h4><p>如果原始模块是 ES6 格式，那么需要给出一个整体输出接口，比如 export default obj，使得 CommonJS 可以用 import()进行加载。<br>如果原始模块是 CommonJS 格式，那么可以加一个包装层。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> cjsModule <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../index.js&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> foo = cjsModule.<span class="hljs-property">foo</span>;<br></code></pre></td></tr></table></figure><p>上面代码先整体输入 CommonJS 模块，然后再根据需要输出具名接口。<br>你可以把这个文件的后缀名改为.mjs，或者将它放在一个子目录，再在这个子目录里面放一个单独的 package.json 文件，指明{ type: “module” }。</p><h3 id="10-10-加载路径"><a href="#10-10-加载路径" class="headerlink" title="10.10 加载路径"></a>10.10 加载路径</h3><p>ES6 模块的加载路径必须给出脚本的完整路径，不能省略后缀<br>为了与浏览器的 import 加载规则相同，Node.js 的<code>.mjs</code>文件支持 URL<br>目前，Node.js 的 import 命令只支持加载本地模块（file:协议）和 data:协议，不支持加载远程模块。另外，脚本路径只支持相对路径，不支持绝对路径（即以/或//开头的路径）。</p><h2 id="11-类"><a href="#11-类" class="headerlink" title="11.类"></a>11.类</h2><h3 id="11-1-类语法"><a href="#11-1-类语法" class="headerlink" title="11.1 类语法"></a>11.1 类语法</h3><p>基本的类语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  prop = value; <span class="hljs-comment">// 属性</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">...</span>) &#123; <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-comment">// ...</span><br>  &#125;<br><br>  <span class="hljs-title function_">method</span>(<span class="hljs-params">...</span>) &#123;&#125; <span class="hljs-comment">// method</span><br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">something</span>(<span class="hljs-params">...</span>) &#123;&#125; <span class="hljs-comment">// getter 方法</span><br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">something</span>(<span class="hljs-params">...</span>) &#123;&#125; <span class="hljs-comment">// setter 方法</span><br><br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;&#125; <span class="hljs-comment">// 有计算名称（computed name）的方法（此处为 symbol）</span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>技术上来说，MyClass 是一个函数（我们提供作为 constructor 的那个），而 methods、getters 和 setters 都被写入了 MyClass.prototype。</p><h3 id="11-2-类的继承"><a href="#11-2-类的继承" class="headerlink" title="11.2 类的继承"></a>11.2 类的继承</h3><ol><li>想要扩展一个类：class Child extends Parent：<ul><li>这意味着 Child.prototype.<strong>proto</strong> 将是 Parent.prototype，所以方法会被继承。</li></ul></li><li>重写一个 constructor：<ul><li>在使用 this 之前，我们必须在 Child 的 constructor 中将父 constructor 调用为 super()。</li></ul></li><li>重写一个方法：<ul><li>我们可以在一个 Child 方法中使用 super.method() 来调用 Parent 方法。</li></ul></li><li>内部：<ul><li>方法在内部的 [[HomeObject]] 属性中记住了它们的类/对象。这就是 super 如何解析父方法的。</li><li>因此，将一个带有 super 的方法从一个对象复制到另一个对象是不安全的。</li></ul></li></ol><p>补充：</p><ul><li>箭头函数没有自己的 this 或 super，所以它们能融入到就近的上下文中，像透明似的。</li></ul><h3 id="11-3-静态方法和静态属性"><a href="#11-3-静态方法和静态属性" class="headerlink" title="11.3 静态方法和静态属性"></a>11.3 静态方法和静态属性</h3><p>静态方法被用于实现属于整个类的功能。它与具体的类实例无关。<br>举个例子， 一个用于进行比较的方法 Article.compare(article1, article2) 或一个工厂（factory）方法 Article.createTodays()。<br>在类声明中，它们都被用关键字 static 进行了标记。<br>静态属性被用于当我们想要存储类级别的数据时，而不是绑定到实例。<br>语法如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  <span class="hljs-keyword">static</span> property = ...;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">method</span>(<span class="hljs-params"></span>) &#123;<br>    ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从技术上讲，静态声明与直接给类本身赋值相同：<br>MyClass.property = … MyClass.method = …<br>静态属性和方法是可被继承的。<br>对于 class B extends A，类 B 的 prototype 指向了 A：B.[[Prototype]] = A。因此，如果一个字段在 B 中没有找到，会继续在 A 中查找。</p><h3 id="11-4-私有变量和私有方法"><a href="#11-4-私有变量和私有方法" class="headerlink" title="11.4 私有变量和私有方法"></a>11.4 私有变量和私有方法</h3><p>就面向对象编程（OOP）而言，内部接口与外部接口的划分被称为封装。<br>它具有以下优点：<br><strong>保护用户，使他们不会误伤自己</strong><br>想象一下，有一群开发人员在使用一个咖啡机。这个咖啡机是由“最好的咖啡机”公司制造的，工作正常，但是保护罩被拿掉了。因此内部接口暴露了出来。<br>所有的开发人员都是文明的 —— 他们按照预期使用咖啡机。但其中的一个人，约翰，他认为自己是最聪明的人，并对咖啡机的内部做了一些调整。然而，咖啡机两天后就坏了。<br>这肯定不是约翰的错，而是那个取下保护罩并让约翰进行操作的人的错。<br>编程也一样。如果一个 class 的使用者想要改变那些本不打算被从外部更改的东西 —— 后果是不可预测的。<br><strong>可支持性</strong><br>编程的情况比现实生活中的咖啡机要复杂得多，因为我们不只是购买一次。我们还需要不断开发和改进代码。<br><strong>如果我们严格界定内部接口，那么这个 class 的开发人员可以自由地更改其内部属性和方法，甚至无需通知用户。</strong><br>如果你是这样的 class 的开发者，那么你会很高兴知道可以安全地重命名私有变量，可以更改甚至删除其参数，因为没有外部代码依赖于它们。<br>对于用户来说，当新版本问世时，应用的内部可能被进行了全面检修，但如果外部接口相同，则仍然很容易升级。<br><strong>隐藏复杂性</strong><br>人们喜欢使用简单的东西。至少从外部来看是这样。内部的东西则是另外一回事了。<br>程序员也不例外。<br><strong>当实施细节被隐藏，并提供了简单且有据可查的外部接口时，总是很方便的。</strong><br>为了隐藏内部接口，我们使用受保护的或私有的属性：</p><ul><li>受保护的字段以 <em>开头。这是一个众所周知的约定，不是在语言级别强制执行的。程序员应该只通过它的类和从它继承的类中访问以</em> 开头的字段。</li><li>私有字段以#开头。JavaScript 确保我们只能从类的内部访问它们。</li></ul><p>目前，各个浏览器对私有字段的支持不是很好，但可以用 polyfill 解决。</p><h3 id="11-5-类型检查方法"><a href="#11-5-类型检查方法" class="headerlink" title="11.5 类型检查方法"></a>11.5 类型检查方法</h3><p>让我们总结一下我们知道的类型检查方法：</p><table><thead><tr><th></th><th>用于</th><th>返回值</th></tr></thead><tbody><tr><td>typeof</td><td>原始数据类型</td><td>string</td></tr><tr><td>{}.toString</td><td>原始数据类型，内建对象，包含 Symbol.toStringTag 属性的对象</td><td>string</td></tr><tr><td>instanceof</td><td>对象</td><td>true/false</td></tr></tbody></table><p>正如我们所看到的，从技术上讲，{}.toString 是一种“更高级的” typeof。<br>当我们使用类的层次结构（hierarchy），并想要对该类进行检查，同时还要考虑继承时，这种场景下 instanceof 操作符确实很出色。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack</title>
    <link href="/2023/04/16/webpack/"/>
    <url>/2023/04/16/webpack/</url>
    
    <content type="html"><![CDATA[<blockquote><p>webpack 是一个打包工具，类似一个工厂，可以自动化的完成一些内容</p></blockquote><h3 id="关于-webpack-的配置（简陋）"><a href="#关于-webpack-的配置（简陋）" class="headerlink" title="关于 webpack 的配置（简陋）"></a>关于 webpack 的配置（简陋）</h3><p><a href="https://juejin.cn/post/7038433081526583310">比较重要的一些配置</a><br><strong>对于 CSS 需要下载的 loader 是 css-loader 和 style-loader</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./mainPage/main/main1&quot;</span>,<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;production&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;./src&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-comment">//css处理</span><br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css/i</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>对于 JS 文件的 babel 转化需要<code>npm i -D @babel/core @babel/preset-env babel-loader</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-comment">//css处理</span><br>  <span class="hljs-attr">rules</span>: [<br>    <span class="hljs-comment">//js转化</span><br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js/i</span>,<br>      <span class="hljs-attr">use</span>: [<br>        &#123;<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-attr">presets</span>: [[<span class="hljs-string">&quot;@babel/preset-env&quot;</span>]],<br>          &#125;,<br>        &#125;,<br>      ],<br>    &#125;,<br>  ];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>热模替换</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">devServer</span>: &#123;<br>  <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关于插件以及-loader-的书写"><a href="#关于插件以及-loader-的书写" class="headerlink" title="关于插件以及 loader 的书写"></a>关于插件以及 loader 的书写</h3><p>loader 例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-keyword">let</span> sour0 = source.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/const/g</span>, <span class="hljs-string">&quot;var&quot;</span>);<br>  <span class="hljs-keyword">let</span> sour1 = sour0.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/let /g</span>, <span class="hljs-string">&quot;var &quot;</span>);<br>  <span class="hljs-keyword">return</span> sour1;<br>&#125;; <span class="hljs-comment">//实现将js文件中的const和let都换成var</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React</title>
    <link href="/2023/04/16/React/"/>
    <url>/2023/04/16/React/</url>
    
    <content type="html"><![CDATA[<blockquote><p>React 开发前言：<br><a href="https://react.docschina.org/learn/editor-setup">对你的编辑器设置一下</a></p></blockquote><h2 id="什么是-React"><a href="#什么是-React" class="headerlink" title="什么是 React"></a>什么是 React</h2><p>React 是一个用于构建用户界面（UI）的 JavaScript 库，用户界面由按钮、文本和图像等小单元内容构建而成。React 帮助你把它们组合成可重用、可嵌套的 _组件_。从 web 端网站到移动端应用，屏幕上的所有内容都可以被分解成组件。</p><ul><li>React 允许你创建组件，<strong>应用程序的可复用 UI 元素。</strong></li><li>在 React 应用程序中，每一个 UI 模块都是一个组件。</li><li>React 是常规的 JavaScript 函数，除了：<ol><li> 它们的名字总是以大写字母开头。</li><li> 它们返回 JSX 标签。</li></ol></li></ul><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/MK3eW3As.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Katherine Johnson&quot;</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gallery</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>了不起的科学家<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="如何渲染-React"><a href="#如何渲染-React" class="headerlink" title="如何渲染 React"></a>如何渲染 React</h2><p>如果你想在你的页面里某一部分使用 React，你需要这样：</p><ol><li>配置你的 javascript 环境</li><li>在你想使用 React 的地方渲染 React</li></ol><p>具体讲一下第二步：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- ... 你的 HTML 代码某处 ... --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ... 其他 HTML 代码 ... --&gt;</span><br></code></pre></td></tr></table></figure><p>在你想渲染的地方的标签注册一个 id<br>然后你就可以用<code>document.getElementById</code>找到该元素然后传递给<code>createRoot</code>,以便在其中渲染你的 React</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React-dom/client&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">NavigationBar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 实际实现一个导航栏</span><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello from React!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> domNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;navigation&quot;</span>);<br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">createRoot</span>(domNode); <span class="hljs-comment">//你为你的navigation创建了一个根</span><br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavigationBar</span> /&gt;</span></span>); <span class="hljs-comment">//为你创建的根进行对NavigationBar组件进行的渲染</span><br></code></pre></td></tr></table></figure><p>如果你只是对一个页面的一些部分使用 React，那你大可这样进行 React 渲染<br>如果你想一整个应用都使用 React，那你可以使用相应的 React 框架。</p><blockquote><p>马上就学 Next.js</p></blockquote><h2 id="JSX-规则"><a href="#JSX-规则" class="headerlink" title="JSX 规则"></a>JSX 规则</h2><ol><li>只能返回一个根元素：一个组件中含有多个标签，得用一个父元素将他们包裹起来，例如：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>海蒂·拉玛的代办事项<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/yXOvdOSs.jpg&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Hedy Lamarr&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;photo&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--或者你可以选择用&lt;&gt;&lt;/&gt;  --&gt;</span><br><span class="hljs-tag">&lt;&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>海蒂·拉玛的代办事项<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/yXOvdOSs.jpg&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Hedy Lamarr&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;photo&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>标签必须闭合：如 img 等自闭合标签必须写成<img/></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/yXOvdOSs.jpg&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Hedy Lamarr&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;photo&quot;</span></span><br><span class="hljs-tag">   /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>发明一种新式交通信号灯<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>排练一个电影场景<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>改进频谱技术<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>使用驼峰式命名给<del>所有</del>大部分属性命名：因为 JSX 语法底层还是转化为 JS 代码，所以命名不允许出现-以及 class，得用驼峰式命名和 className 代</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.imgur.com/yXOvdOSs.jpg&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Hedy Lamarr&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;photo&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>{}内可以使用 JS 变量，JS 函数以及 JS 对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//函数</span><br><span class="hljs-keyword">const</span> today = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatDate</span>(<span class="hljs-params">date</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">DateTimeFormat</span>(<span class="hljs-string">&quot;en-US&quot;</span>, &#123; <span class="hljs-attr">weekday</span>: <span class="hljs-string">&quot;long&quot;</span> &#125;).<span class="hljs-title function_">format</span>(date);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>To Do List for &#123;formatDate(today)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TodoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;Gregorio Y. Zara&quot;</span>;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;name&#125;&#x27;s To Do List<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>JSX 总结：</p><ul><li>JSX 引号内的值会作为字符串传递给属性。</li><li>大括号让你可以将 JavaScript 的逻辑和变量带入到标签中。</li><li>它们会在 JSX 标签中的内容区域或紧随属性的 = 后起作用。</li><li> 并不是什么特殊的语法：它只是包在 JSX 大括号内的 JavaScript 对象</li></ul><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>props 是在父组件和子组件中传递的内容，好比 JS 中传入函数的参数，父组件也可以给子组件传递参数<br>第一步：将 props 传递给子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Profile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">name:</span> &quot;<span class="hljs-attr">Lin</span> <span class="hljs-attr">Lanying</span>&quot;, <span class="hljs-attr">imageId:</span> &quot;<span class="hljs-attr">1bX5QH6</span>&quot; &#125;&#125; <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;100&#125;</span> /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>第二步：在子组件中读取 props</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">&#123; person, size &#125;</span>) &#123;<br>  <span class="hljs-comment">//不要忘记&#123;&#125;</span><br>  <span class="hljs-comment">// 在这里 person 和 size 是可访问的</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>P.S 渲染列表的时候要记得给每一个列表一个 key</strong></p><h2 id="关于组件的纯粹"><a href="#关于组件的纯粹" class="headerlink" title="关于组件的纯粹"></a>关于组件的纯粹</h2><ul><li>一个组件必须是纯粹的，就意味着：<ul><li><strong>只负责自己的任务。</strong> 不应更改渲染前存在的任何对象或变量。</li><li><strong>输入相同，则输出相同。</strong> 给定相同的输入，组件应该总是返回相同的 JSX。</li></ul></li><li>渲染随时可能发生，因此组件不应依赖于彼此的渲染顺序。</li><li>你不应该改变组件用于渲染的任何输入。这包括 props、state 和 context。通过 setEffect 来更新界面，而不要改变预先存在的对象。</li><li>努力在你返回的 JSX 中表达你的组件逻辑。当你需要“改变事物”时，你通常希望在事件处理程序中进行。作为最后的手段，你可以使用 useEffect。</li><li>编写纯函数需要一些练习，但它充分释放了 React 范式的能力。</li></ul><h2 id="响应事件"><a href="#响应事件" class="headerlink" title="响应事件"></a>响应事件</h2><h3 id="添加响应事件"><a href="#添加响应事件" class="headerlink" title="添加响应事件"></a>添加响应事件</h3><p>如需添加一个事件处理函数，你需要先定义一个函数，然后将其作为 prop 传入合适的 JSX 标签。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>未绑定任何事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>按照如下三个步骤，即可让它在用户点击时显示消息：</p><ol><li>在 Button 组件 <em>内部</em> 声明一个名为 handleClick 的函数。</li><li>实现函数内部的逻辑（使用 alert 来显示消息）。</li><li>添加 onClick={handleClick} 到 <code>&lt;button&gt;</code>JSX 中。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;你点击了我！&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>按照惯例，通常将事件处理程序命名为 handle，后接事件名。你会经常看到 onClick={handleClick}，onMouseEnter={handleMouseEnter} 等。</p></blockquote><h3 id="阻止事件传播"><a href="#阻止事件传播" class="headerlink" title="阻止事件传播"></a>阻止事件传播</h3><p>如果你想阻止一个事件到达父组件，你需要像下面 Button 组件那样调用 e.stopPropagation()</p><h3 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h3><p>你可以调用事件对象中的 e.preventDefault() 来阻止这种情况发生</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><ul><li>你可以通过将函数作为 prop 传递给元素如 <button> 来处理事件。</li><li>必须传递事件处理函数，<strong>而非函数调用！</strong> onClick={handleClick} ，不是 onClick={handleClick()}。</li><li>你可以单独或者内联定义事件处理函数。</li><li>事件处理函数在组件内部定义，所以它们可以访问 props。</li><li>你可以在父组件中定义一个事件处理函数，并将其作为 prop 传递给子组件。</li><li>你可以根据特定于应用程序的名称定义事件处理函数的 prop。</li><li>事件会向上传播。通过事件的第一个参数调用 e.stopPropagation() 来防止这种情况。</li><li>事件可能具有不需要的浏览器默认行为。调用 e.preventDefault() 来阻止这种情况。</li><li>从子组件显式调用事件处理函数 prop 是事件传播的另一种优秀替代方案。</li></ul><h2 id="关于-State"><a href="#关于-State" class="headerlink" title="关于 State"></a>关于 State</h2><p><strong>为什么我们需要用到 State:</strong></p><ul><li>局部变量无法在多次渲染中持久保存</li><li>更改局部变量不会触发渲染</li><li>当一个组件需要在多次渲染间“记住”某些信息时使用 state 变量。</li></ul><p>使用方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>; <span class="hljs-comment">//要添加 state 变量，先从文件顶部的 React 中导入 useState</span><br><br><span class="hljs-keyword">const</span> [index, setIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//创建state状态</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">setIndex</span>(index + <span class="hljs-number">1</span>);<br>&#125; <span class="hljs-comment">//改变状态</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>State 变量是通过调用 useState Hook 来声明的。</li><li>Hook 是以 use 开头的特殊函数。它们能让你 “hook” 到像 state 这样的 React 特性中。</li><li>Hook 可能会让你想起 import：它们需要在非条件语句中调用。调用 Hook 时，包括 useState，仅在组件或另一个 Hook 的顶层被调用才有效。</li><li>useState Hook 返回一对值：当前 state 和更新它的函数。</li><li>你可以拥有多个 state 变量。在内部，React 按顺序匹配它们。</li><li>State 是组件私有的。如果你在两个地方渲染它，则每个副本都有独属于自己的 state。</li><li><strong>请记住，必须在条件语句外并且始终以相同的顺序调用 Hook！</strong></li></ul><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><ul><li>在一个 React 应用中一次屏幕更新都会发生以下三个步骤：<ol><li> 触发</li><li> 渲染</li><li> 提交</li></ol></li><li>您可以使用严格模式去找到组件中的错误</li><li>如果渲染结果与上次一样，那么 React 将不会修改 DOM</li><li>设置 state 只会为 <em>下一次</em> 渲染变更 state 的值</li><li>批处理渲染：<ul><li>设置 state 不会更改现有渲染中的变量，但会请求一次新的渲染。</li><li>React 会在事件处理函数执行完成之后处理 state 更新。这被称为批处理。</li><li>要在一个事件中多次更新某些 state，你可以使用 setNumber(n =&gt; n + 1) 更新函数。</li></ul></li></ul><h2 id="更新状态中的对象"><a href="#更新状态中的对象" class="headerlink" title="更新状态中的对象"></a>更新状态中的对象</h2><p>State 可以保存任何类型的 JavaScript 值，包括对象。但是你不应该直接改变你在 React 状态下持有的对象。相反，当你想更新一个对象时，你需要创建一个新对象（或复制一个现有对象），然后设置状态以使用该副本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">onPointerMove=&#123;<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  position.<span class="hljs-property">x</span> = e.<span class="hljs-property">clientX</span>;<br>  position.<span class="hljs-property">y</span> = e.<span class="hljs-property">clientY</span>;<br>&#125;&#125; <span class="hljs-comment">//错误示范</span><br><br><br>onPointerMove=&#123;<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  <span class="hljs-title function_">setPosition</span>(&#123;<br>    <span class="hljs-attr">x</span>: e.<span class="hljs-property">clientX</span>,<br>    <span class="hljs-attr">y</span>: e.<span class="hljs-property">clientY</span><br>  &#125;);<br>&#125;&#125;<span class="hljs-comment">//应该这样</span><br></code></pre></td></tr></table></figure><p>你也可以使用<code>...</code>对象扩展语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setPerson</span>(&#123;<br>  ...person, <span class="hljs-comment">// Copy the old fields</span><br>  <span class="hljs-attr">firstName</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>, <span class="hljs-comment">// But override this one</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>但一碰到嵌套的对象，复制一个新对象就显得非常麻烦<br>所以我们可以使用<code>Immer</code>写更简洁的更新<br>步骤：</p><ol><li>运行 npm install use-immer 将 Immer 添加为依赖项</li><li>然后将 import { useState } from ‘React’ 替换为 import { useImmer } from ‘use-immer’</li><li>将 const [] = useState() 变成 const [] = useImmer()</li><li>再使用 update(draft=&gt;{draft.name = xxx}) 进行修改</li></ol><p><strong>摘要</strong>：</p><ul><li>Treat all state in React as immutable.<br>将 React 中的所有状态视为不可变的。</li><li>When you store objects in state, mutating them will not trigger renders and will change the state in previous render “snapshots”.<br>当您将对象存储在状态中时，改变它们不会触发渲染，并且会更改先前渲染“快照”中的状态。</li><li>Instead of mutating an object, create a <em>new</em> version of it, and trigger a re-render by setting state to it.<br>与其改变对象，不如创建它的新版本，并通过为其设置状态来触发重新渲染。</li><li>You can use the {…obj, something: ‘newValue’} object spread syntax to create copies of objects.<br>您可以使用 {…obj, something: ‘newValue’} 对象传播语法来创建对象的副本。</li><li>Spread syntax is shallow: it only copies one level deep.<br>传播语法很浅：它只复制一层深。</li><li>To update a nested object, you need to create copies all the way up from the place you’re updating.<br>要更新嵌套对象，您需要从要更新的地方一直向上创建副本。</li><li>To reduce repetitive copying code, use Immer.<br>要减少重复复制代码，请使用 Immer。</li></ul><h2 id="更新数组"><a href="#更新数组" class="headerlink" title="更新数组"></a>更新数组</h2><p>更新数组和对象一样，需要复制再修改<br>善于利用 map，fliter，slice 等数组方法<br>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleIncreaseClick</span>(<span class="hljs-params">productId</span>) &#123;<br>  <span class="hljs-title function_">setProducts</span>(<br>    products.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">product</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (productId === product.<span class="hljs-property">id</span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          ...product,<br>          <span class="hljs-attr">count</span>: product.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>,<br>        &#125;;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> product;<br>      &#125;<br>    &#125;)<br>  );<br>&#125; <span class="hljs-comment">//id+1</span><br></code></pre></td></tr></table></figure><h2 id="用-State-响应输入"><a href="#用-State-响应输入" class="headerlink" title="用 State 响应输入"></a>用 State 响应输入</h2><p><strong>采用声明式编程比采用命令式编程更好，面对更复杂庞大的功能，命令式编程易错且难以维护</strong></p><p>React 提供了很好的声明式编程的方法，通过<code>setState()</code>来对不同的状态进行处理，具体有以下五个步骤：<br><strong>步骤一：定位组件中不同的视图状态</strong><br>你得先预测你的组件在不同的状态下的视图样式，模拟不同状态下的样子<br><strong>步骤二：确定是什么改变了这些状态</strong><br>简单来说可以分为：</p><ul><li>人为输入：比如点击按钮、在表单中输入内容，或导航到链接。</li><li>计算机输入：比如网络请求得到反馈、定时器被触发，或加载一张图片。<br>你得设置 State 状态去响应这些变化<br><strong>步骤三：通过<code>useState</code>去表示内存中的<code>state</code></strong><br>我们的目的肯定是 state 越少越好，更复杂的程序 bug 会越多。<br>但是一开始我们可以将所有想到的视图状态都写出来，随后再一个一个去删除<br><strong>步骤四：删除任何没必要的<code>state</code>变量</strong><br>你想简化你的代码，减少 state 内容的重复，我们就需要花一点心思在重构你的 state 结构<br>关于你的 state 变量，你可以思考这些问题：</li><li>这个 state 变量是否会导致矛盾？</li><li>相同的信息是否在另外一个 state 变量中存在</li><li>你是否可以在另外一个 state 变量中的相反值获得信息<br><strong>步骤五：链接事件处理函数以来设置 state</strong><br>最后，我们只需将 state 绑定在事件处理函数上即可</li></ul><h3 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h3><ul><li>声明式编程意味着为每个视图状态声明 UI 而非细致地控制 UI（命令式）。</li><li>当开发一个组件时：<ul><li>写出你的组件中所有的视图状态。</li><li>确定是什么触发了这些 state 的改变。</li><li>通过 useState 模块化内存中的 state。</li><li>删除任何不必要的 state 变量。</li><li>连接事件处理函数去设置 state。</li></ul></li></ul><h2 id="选择状态结构"><a href="#选择状态结构" class="headerlink" title="选择状态结构"></a>选择状态结构</h2><h3 id="构建状态的原则"><a href="#构建状态的原则" class="headerlink" title="构建状态的原则"></a>构建状态的原则</h3><ul><li><p><strong>组相关状态，如果您总是同时更新两个或多个状态变量，请考虑将它们合并为一个状态变量。</strong></p></li><li><p><strong>避免状态上的矛盾。当状态的结构方式使多个状态可能相互矛盾和“不一致”时，就会为错误留下空间。尽量避免这种情况。</strong></p></li><li><p><strong>避免冗余状态。如果您可以在渲染期间从组件的 props 或其现有状态变量中计算出一些信息，则不应将该信息放入该组件的状态中。</strong></p></li><li><p><strong>避免状态重复。当相同的数据在多个状态变量之间或嵌套对象中重复时，很难使它们保持同步。尽可能减少重复。</strong></p></li><li><p><strong>避免深度嵌套状态。层次很深的状态更新起来不是很方便。如果可能，更喜欢以扁平的方式构建状态。</strong></p></li></ul><p>如果你想看看这些原则在实际该如何运用<a href="https://react.docschina.org/learn/choosing-the-state-structure">请点击这里</a>.</p><h2 id="在组件间共享状态"><a href="#在组件间共享状态" class="headerlink" title="在组件间共享状态"></a>在组件间共享状态</h2><p>通常情况下，一个 app 内的不同的组件的状态是不共享的，你操纵一个组件的时候并不会影响到其他组件，这很大程度上方便了我们构建一个应用<br>但我们有的时候也需要对同一类型的组件进行管理，以便一次性改变全部某一类型组件的样式</p><p><strong>这是一个有两个面板的组件：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Panel</span>(<span class="hljs-params">&#123; title, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [isActive, setIsActive] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;panel&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;isActive ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsActive(true)&#125;&gt;显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Accordion</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>哈萨克斯坦，阿拉木图<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;关于&quot;</span>&gt;</span></span><br><span class="language-xml">        阿拉木图人口约200万，是哈萨克斯坦最大的城市。它在 1929 年到 1997</span><br><span class="language-xml">        年间都是首都。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;词源&quot;</span>&gt;</span></span><br><span class="language-xml">        这个名字来自于 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;kk-KZ&quot;</span>&gt;</span>алма<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        ，哈萨克语中“苹果”的意思，经常被翻译成“苹果之乡”。事实上，阿拉木图的周边地区被认为是苹果的发源地，</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;la&quot;</span>&gt;</span>Malus sieversii<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 被认为是现今苹果的祖先。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>那么我们需要分三步将状态提升至他们的父组件：</p><p><strong>1.从子组件中移除 state。</strong></p><p>从<code>Panel</code>删掉<code>const [isActive, setIsActive] = useState(false);</code><br>再将<code>isActive</code>加入<code>Panel</code>组件的<code>props</code>中<br><code>function Panel(&#123; title, children, isActive &#125;) &#123;</code></p><p><strong>2.从父组件中传递 state 状态。</strong><br>首先定位到这两个子组件最近的共同父组件<code>Accodion</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Accordion</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>哈萨克斯坦，阿拉木图<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;关于&quot;</span> <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;true&#125;</span>&gt;</span></span><br><span class="language-xml">        阿拉木图人口约200万，是哈萨克斯坦最大的城市。它在 1929 年到 1997</span><br><span class="language-xml">        年间都是首都。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;词源&quot;</span> <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;true&#125;</span>&gt;</span></span><br><span class="language-xml">        这个名字来自于 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;kk-KZ&quot;</span>&gt;</span>алма<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        ，哈萨克语中“苹果”的意思，经常被翻译成“苹果之乡”。事实上，阿拉木图的周边地区被认为是苹果的发源地，</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;la&quot;</span>&gt;</span>Malus sieversii<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 被认为是现今苹果的祖先。</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Panel</span>(<span class="hljs-params">&#123; title, children, isActive &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;panel&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;isActive ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsActive(true)&#125;&gt;显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.为共同的父组件添加 state ，并将其与事件处理函数一起向下传递。</strong></p><p>再对父组件进行<code>state</code>管理，这样父组件就能控制哪个子组件是显示的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [activeIndex, setActiveIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;activeIndex</span> === <span class="hljs-string">0&#125;</span> <span class="hljs-attr">onShow</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setActiveIndex(0)&#125;&gt;</span><br><span class="language-xml">    ...</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Panel</span> <span class="hljs-attr">isActive</span>=<span class="hljs-string">&#123;activeIndex</span> === <span class="hljs-string">1&#125;</span> <span class="hljs-attr">onShow</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setActiveIndex(1)&#125;&gt;</span><br><span class="language-xml">    ...</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Panel</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/&gt;</span></span>;<br></code></pre></td></tr></table></figure><h2 id="对-state-进行保留和重置"><a href="#对-state-进行保留和重置" class="headerlink" title="对 state 进行保留和重置"></a>对 state 进行保留和重置</h2><p>React 在移除一个组件的时候会将其 state 也一起移除</p><p>React 中相同位置的相同组件的 state 会被保留下来，<strong>注意相同位置指的是在 UI 树中的位置而不是在 JSX 中的位置</strong></p><p>React 中相同位置的不同组件会使得 state 重置</p><p>如何在相同位置重置 state：</p><ul><li><strong>方法一：将组件渲染在不同的位置</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Scoreboard</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlayerA, setIsPlayerA] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;isPlayerA &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Taylor&quot;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      &#123;!isPlayerA &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Sarah&quot;</span> /&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setIsPlayerA(!isPlayerA);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        下一位玩家！</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子中，就将不同的 Counter 组件渲染在不同的位置<br>但是这只是简单的情况下，当组件复杂后这个方法就变得困难了</p><ul><li><strong>方法二：使用 key 来重置 state</strong><br>和渲染列表中的 key 一样，你也可以对你的组件渲染一个 key</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Scoreboard</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlayerA, setIsPlayerA] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;isPlayerA ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;Taylor&quot;</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Taylor&quot;</span> /&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;Sarah&quot;</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Sarah&quot;</span> /&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setIsPlayerA(!isPlayerA);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        下一位玩家！</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当 key 更改的时候，React 将从头开始重新创建节点<br>请记住 key 不是全局唯一的。它们只能指定父组件内部的顺序。</p></blockquote><p><strong>摘要</strong></p><ul><li>只要在相同位置渲染的是相同组件， React 就会保留状态。</li><li>state 不会被保存在 JSX 标签里。它与你在树中放置该 JSX 的位置相关联。</li><li>你可以通过为一个子树指定一个不同的 key 来重置它的 state。</li><li>不要嵌套组件的定义，否则你会意外地导致 state 被重置。</li></ul><h2 id="迁移状态逻辑到-Reducer-中"><a href="#迁移状态逻辑到-Reducer-中" class="headerlink" title="迁移状态逻辑到 Reducer 中"></a>迁移状态逻辑到 Reducer 中</h2><p>随着你组件的复杂度提高，你将很难一眼看清所有组件的状态<br>比如说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AddTask</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./AddTask.js&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TaskList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./TaskList.js&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [tasks, setTasks] = <span class="hljs-title function_">useState</span>(initialTasks);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddTask</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-title function_">setTasks</span>([<br>      ...tasks,<br>      &#123;<br>        <span class="hljs-attr">id</span>: nextId++,<br>        <span class="hljs-attr">text</span>: text,<br>        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>    ]);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChangeTask</span>(<span class="hljs-params">task</span>) &#123;<br>    <span class="hljs-title function_">setTasks</span>(<br>      tasks.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-property">id</span> === task.<span class="hljs-property">id</span>) &#123;<br>          <span class="hljs-keyword">return</span> task;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> t;<br>        &#125;<br>      &#125;)<br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteTask</span>(<span class="hljs-params">taskId</span>) &#123;<br>    <span class="hljs-title function_">setTasks</span>(tasks.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t.<span class="hljs-property">id</span> !== taskId));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>布拉格的行程安排<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AddTask</span> <span class="hljs-attr">onAddTask</span>=<span class="hljs-string">&#123;handleAddTask&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TaskList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">tasks</span>=<span class="hljs-string">&#123;tasks&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChangeTask</span>=<span class="hljs-string">&#123;handleChangeTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onDeleteTask</span>=<span class="hljs-string">&#123;handleDeleteTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialTasks = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;参观卡夫卡博物馆&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;看木偶戏&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;打卡列侬墙&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;,<br>];<br></code></pre></td></tr></table></figure><p>这个例子中每个事件处理都通过<code>setTasks</code>来更新状态，但随着组件不断更新，其状态会越来越多，越来越复杂。所以我们可以为了降低复杂度,可以把这些逻辑都放到一个<code>reducer</code>函数中:</p><p><strong>第一步:将设置状态的逻辑修改成 dispatch 的一个 action</strong><br>你的<code>dispatch</code>函数和以往直接设计状态不同，<code>dispatch</code>是用来告诉你的<code>React</code>刚刚用户做了什么，并且发生相应的响应将需要改变的状态发给<code>reducer</code>函数<br>比如上面的“添加/修改/删除操作”就可以写成:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteTask</span>(<span class="hljs-params">taskId</span>) &#123;<br>  <span class="hljs-title function_">dispatch</span>(<br>    <span class="hljs-comment">// &quot;action&quot; 对象：</span><br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;deleted&quot;</span>,<br>      <span class="hljs-attr">id</span>: taskId,<br>    &#125;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二步：编写一个 reducer 函数</strong><br>reducer 函数就是你放置状态逻辑的地方。他需要两个参数：当前的 state 和 action 对象。他将返回更新后的 state<br>在这个例子中，你的 reducer 函数需要： 1.声明当前状态（tasks）作为第一个参数； 2.声明 action 对象作为第二个参数； 3.从<code>reducer</code>返回下一个状态（React 会将旧的状态设置为这个最新的状态）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">tasksReducer</span>(<span class="hljs-params">tasks, action</span>) &#123;<br>  <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;added&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> [<br>      ...tasks,<br>      &#123;<br>        <span class="hljs-attr">id</span>: action.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span>,<br>        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>    ];<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;changed&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (t.<span class="hljs-property">id</span> === action.<span class="hljs-property">task</span>.<span class="hljs-property">id</span>) &#123;<br>        <span class="hljs-keyword">return</span> action.<span class="hljs-property">task</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> t;<br>      &#125;<br>    &#125;);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;deleted&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t.<span class="hljs-property">id</span> !== action.<span class="hljs-property">id</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;未知 action: &quot;</span> + action.<span class="hljs-property">type</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当然你可以把 reducer 函数写在其他文件然后导入进来，这样看起来更简洁</p></blockquote><blockquote><p>对了如果觉得 ifelse 语句很啰嗦，你可以用 switch 语句</p></blockquote><p><strong>第三步：在组件中使用 reducer</strong><br>最后，你需要在组件中使用你写的<code>reducer</code><br>首先你得导入<code>import &#123; useReducer &#125; from &#39;React&#39;;</code><br>其次将<code>useState</code>换成<code>useReducer</code>,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//const [tasks, setTasks] = useState(initialTasks);</span><br><span class="hljs-keyword">const</span> [tasks, dispatch] = <span class="hljs-title function_">useReducer</span>(tasksReducer, initialTasks);<br></code></pre></td></tr></table></figure><p><code>useReducer</code>和<code>useState</code> 很像但也有所不同，<code>useReducer</code>接受两个参数，一个 reducer 函数，一个初始的 state</p><p><strong>最后的结果</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AddTask</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./AddTask.js&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TaskList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./TaskList.js&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [tasks, dispatch] = <span class="hljs-title function_">useReducer</span>(tasksReducer, initialTasks);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAddTask</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;added&quot;</span>,<br>      <span class="hljs-attr">id</span>: nextId++,<br>      <span class="hljs-attr">text</span>: text,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleChangeTask</span>(<span class="hljs-params">task</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;changed&quot;</span>,<br>      <span class="hljs-attr">task</span>: task,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDeleteTask</span>(<span class="hljs-params">taskId</span>) &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;deleted&quot;</span>,<br>      <span class="hljs-attr">id</span>: taskId,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>布拉格的行程安排<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">AddTask</span> <span class="hljs-attr">onAddTask</span>=<span class="hljs-string">&#123;handleAddTask&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TaskList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">tasks</span>=<span class="hljs-string">&#123;tasks&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChangeTask</span>=<span class="hljs-string">&#123;handleChangeTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onDeleteTask</span>=<span class="hljs-string">&#123;handleDeleteTask&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tasksReducer</span>(<span class="hljs-params">tasks, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;added&quot;</span>: &#123;<br>      <span class="hljs-keyword">return</span> [<br>        ...tasks,<br>        &#123;<br>          <span class="hljs-attr">id</span>: action.<span class="hljs-property">id</span>,<br>          <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span>,<br>          <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>      ];<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;changed&quot;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-property">id</span> === action.<span class="hljs-property">task</span>.<span class="hljs-property">id</span>) &#123;<br>          <span class="hljs-keyword">return</span> action.<span class="hljs-property">task</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> t;<br>        &#125;<br>      &#125;);<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;deleted&quot;</span>: &#123;<br>      <span class="hljs-keyword">return</span> tasks.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t.<span class="hljs-property">id</span> !== action.<span class="hljs-property">id</span>);<br>    &#125;<br>    <span class="hljs-attr">default</span>: &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;未知 action: &quot;</span> + action.<span class="hljs-property">type</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> nextId = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> initialTasks = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;参观卡夫卡博物馆&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;看木偶戏&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;打卡列侬墙&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;,<br>];<br></code></pre></td></tr></table></figure><h3 id="编写一个好的reducers"><a href="#编写一个好的reducers" class="headerlink" title="编写一个好的reducers"></a>编写一个好的<code>reducers</code></h3><ul><li><p>reducers 必须是纯粹的</p></li><li><p>每一个 action 都描述了一个单一的用户交互</p></li></ul><blockquote><p>你也可以使用 Immer 来简化 reducers，就像简化 state 修改数组和对象</p></blockquote><p><strong>摘要</strong></p><ul><li><p>把 useState 转化为 useReducer：</p><ol><li>通过事件处理函数 dispatch actions；</li><li>编写一个 reducer 函数，它接受传入的 state 和一个 action，并返回一个新的 state；</li><li>使用 useReducer 替换 useState；</li></ol></li><li><p>Reducers 可能需要你写更多的代码，但是这有利于代码的调试和测试。</p></li><li><p>Reducers 必须是纯净的。</p></li><li><p>每个 action 都描述了一个单一的用户交互。</p></li><li><p>使用 Immer 来帮助你在 reducer 里直接修改状态。</p></li></ul><h2 id="使用-Context-深层传递参数"><a href="#使用-Context-深层传递参数" class="headerlink" title="使用 Context 深层传递参数"></a>使用 Context 深层传递参数</h2><p>随着应用的增长，状态的不断提升，父组件向子组件传递的<code>props</code>就需要‘逐层传递’，这就麻烦了</p><p>好在 React 中 context 可以不用<code>props</code>就可以传递数据到子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Heading</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Heading.js&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Section</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Section.js&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Page</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;1&#125;</span>&gt;</span>主标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;2&#125;</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;2&#125;</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;2&#125;</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;3&#125;</span>&gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;3&#125;</span>&gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;3&#125;</span>&gt;</span>子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;4&#125;</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;4&#125;</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Heading</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&#123;4&#125;</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子是一个让不同的标题有不同的大小，可是看起来很臃肿。<br>我们该如何不用 props 来实现父组件传递给子组件状态呢</p><h3 id="Step1-创建一个-context"><a href="#Step1-创建一个-context" class="headerlink" title="Step1 创建一个 context"></a>Step1 创建一个 context</h3><p>你需要创建一个 context</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">LevelContext</span> = <span class="hljs-title function_">createContext</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">//默认值是1</span><br></code></pre></td></tr></table></figure><h3 id="Step2-使用-Context"><a href="#Step2-使用-Context" class="headerlink" title="Step2 使用 Context"></a>Step2 使用 Context</h3><p>从 React 引入 useContext 以及你刚刚创建的 context</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LevelContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./LevelContext.js&quot;</span>;<br></code></pre></td></tr></table></figure><p>删掉 heading 组件 porps 中的 level，从引入的 levelContext 中读取值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Heading</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> level = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">LevelContext</span>);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>useContext</code>和<code>useState</code>一样是 React 的一个 Hook，你只能在 React 的组件中用（也不能是循环或判断），它会告诉 React Heading 组件想要读取 levelContext</p><p>所以你现在可以在 JSX 中将 Heading 组件的 level 参数删除，让 Section 代替 Heading 接收 level 参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">Section</span> level=&#123;<span class="hljs-number">4</span>&#125;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heading</span>&gt;</span>子子标题<span class="hljs-tag">&lt;/<span class="hljs-name">Heading</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Section</span>&gt;<br></code></pre></td></tr></table></figure><p>但是还没完成，你只使用了 levelContext 还没有提供它</p><h3 id="Step3-提供-context"><a href="#Step3-提供-context" class="headerlink" title="Step3 提供 context"></a>Step3 提供 context</h3><p>将 Section 组件用<code>context provider</code>包裹起来以提供 LevelContext 给他们</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LevelContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./LevelContext.js&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Section</span>(<span class="hljs-params">&#123; level, children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;section&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">LevelContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;level&#125;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">LevelContext.Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这告诉 React：“如果在 <code>&lt;Section&gt;</code>组件中的任何子组件请求 LevelContext，给他们这个 level。”组件会使用 UI 树中在它上层最近的那个<code>&lt;LevelContext.Provider&gt;</code>传递过来的值。<br>这下你就不用给每个 Heading 标签传递 level 参数了</p><ol><li>你将一个 level 参数传递给<code>&lt;Section&gt;</code>。</li><li>Section 把它的子元素包在<code>&lt;LevelContext.Provider value=&#123;level&#125;&gt;</code>里面。</li><li>Heading 使用<code>useContext(LevelContext)</code>访问上层最近的 LevelContext 提供的值。</li></ol><p>但是如果你觉得给<code>&lt;Section&gt;</code>传递参数也很麻烦，你可以再进一步</p><h3 id="Step3-5"><a href="#Step3-5" class="headerlink" title="Step3.5"></a>Step3.5</h3><p>context 会从你的上层组件读取信息，所以你可以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LevelContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./LevelContext.js&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Section</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> level = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">LevelContext</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;section&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">LevelContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;level</span> + <span class="hljs-attr">1</span>&#125;&gt;</span></span><br><span class="language-xml">        &#123;&quot; &quot;&#125;</span><br><span class="language-xml">        //直接加一</span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">LevelContext.Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Context 是很好使用，但是你不该滥用。在你使用之前请考虑以下两点：</strong></p><ul><li>从传递 props 开始</li><li>抽象组件并将 JSX 作为 children 传递给他们<br>当以上两点都不适合你，你再考虑使用 Context</li></ul><p><strong>Context 的使用场景</strong></p><ul><li><p>主题： 如果你的应用允许用户更改其外观（例如暗夜模式），你可以在应用顶层放一个 context provider，并在需要调整其外观的组件中使用该 context。</p></li><li><p>当前账户： 许多组件可能需要知道当前登录的用户信息。将它放到 context 中可以方便地在树中的任何位置读取它。某些应用还允许你同时操作多个账户（例如，以不同用户的身份发表评论）。在这些情况下，将 UI 的一部分包裹到具有不同账户数据的 provider 中会很方便。</p></li><li><p>路由： 大多数路由解决方案在其内部使用 context 来保存当前路由。这就是每个链接“知道”它是否处于活动状态的方式。如果你创建自己的路由库，你可能也会这么做。</p></li><li><p>状态管理： 随着你的应用的增长，最终在靠近应用顶部的位置可能会有很多 state。许多遥远的下层组件可能想要修改它们。通常 将 reducer 与 context 搭配使用来管理复杂的状态并将其传递给深层的组件来避免过多的麻烦。</p></li></ul><h3 id="摘要-2"><a href="#摘要-2" class="headerlink" title="摘要"></a>摘要</h3><ul><li>Context 使组件向其下方的整个树提供信息。</li><li>传递 Context 的方法:<ul><li>通过 export const MyContext = createContext(defaultValue) 创建并导出 context。</li><li>在无论层级多深的任何子组件中，把 context 传递给 useContext(MyContext) Hook 来读取它。</li><li>在父组件中把 children 包在<code>&lt;MyContext.Provider value=&#123;...&#125;&gt;</code>中来提供 context。</li></ul></li><li>Context 会穿过中间的任何组件。</li><li>Context 可以让你写出 “较为通用” 的组件。</li><li>在使用 context 之前，先试试传递 props 或者将 JSX 作为 children 传递。</li></ul><h2 id="使用-ref-引用值"><a href="#使用-ref-引用值" class="headerlink" title="使用 ref 引用值"></a>使用 ref 引用值</h2><p>当你希望你的组件“记住”某些信息，但又不想让这些信息触发新的渲染，你可以使用 ref</p><p>首先你得导入 ref，就像导入 state 一样，<code>import &#123;useRef&#125; from &#39;React&#39;</code><br>然后创建一个 ref，<code>const ref = useRef(0)</code><br>useRef 将返回一个这样的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">current</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">// 你向 useRef 传入的值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当然你也可以传入字符串，对象，甚至是函数</p><p>你可以通过 ref.current 属性访问 ref 当前的值，你既可以读取也可以修改这个值</p><p>记住：修改 ref 不会让 React 重新渲染<br><strong>实例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//一个秒表</span><br><span class="hljs-keyword">import</span> &#123; useState, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Stopwatch</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [startTime, setStartTime] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [now, setNow] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> intervalRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleStart</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setStartTime</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br>    <span class="hljs-title function_">setNow</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br><br>    <span class="hljs-built_in">clearInterval</span>(intervalRef.<span class="hljs-property">current</span>);<br>    intervalRef.<span class="hljs-property">current</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setNow</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br>    &#125;, <span class="hljs-number">10</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleStop</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">clearInterval</span>(intervalRef.<span class="hljs-property">current</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> secondsPassed = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (startTime != <span class="hljs-literal">null</span> &amp;&amp; now != <span class="hljs-literal">null</span>) &#123;<br>    secondsPassed = (now - startTime) / <span class="hljs-number">1000</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>时间过去了： &#123;secondsPassed.toFixed(3)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleStart&#125;</span>&gt;</span>开始<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleStop&#125;</span>&gt;</span>停止<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子中使用 ref 传入了一个 setInterval,并且实现了 clearInterval，这下就可以不重新渲染 React 的情况下停止这个秒表了</p><h3 id="何时使用-ref"><a href="#何时使用-ref" class="headerlink" title="何时使用 ref"></a>何时使用 ref</h3><p>通常，当你的组件需要“跳出” React 并与外部 API 通信时，你会用到 ref —— 通常是不会影响组件外观的浏览器 API。以下是这些罕见情况中的几个：</p><ul><li>存储 timeout ID</li><li>存储和操作 DOM 元素</li><li>存储不需要被用来计算 JSX 的其他对象</li></ul><p>如果你的组件需要存储一些值，但不影响渲染逻辑，请选择 ref</p><h3 id="ref-的最佳实践"><a href="#ref-的最佳实践" class="headerlink" title="ref 的最佳实践"></a>ref 的最佳实践</h3><ul><li>将 ref 视为应急方案</li><li>不要在渲染过程中读取或写入 ref.current</li></ul><h2 id="使用-ref-操作-Dom"><a href="#使用-ref-操作-Dom" class="headerlink" title="使用 ref 操作 Dom"></a>使用 ref 操作 Dom</h2><p>一般来说，React 会自动处理并且渲染 DOM 以匹配你的渲染输出，因此你在组件中不需要操作 DOM<br>但有的时候你可能需要访问 React 管理的组件，因此你可以利用 ref 来操作 Dom</p><h3 id="获取指向节点的-ref"><a href="#获取指向节点的-ref" class="headerlink" title="获取指向节点的 ref"></a>获取指向节点的 ref</h3><p>首先你需要引入 ref<br><code>import &#123; useRef &#125; from &#39;React&#39;;</code></p><p>其次声明一个 ref<br><code>const myRef = useRef(null);</code></p><p>最后将其传递给 Dom 节点<br><code>&lt;div ref=&#123;myRef&#125;&gt;</code></p><p>这样当 React 为这个 div 元素创建一个 Dom 节点的时候，就会将该节点的引用放入 myRef.current 中<br>你就可以通过事件处理访问到这个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 你可以使用任意浏览器 API，例如：</span><br>myRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">scrollIntoView</span>();<br></code></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Form</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>聚焦输入框<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用-ref-访问另一个组件的-Dom-节点"><a href="#用-ref-访问另一个组件的-Dom-节点" class="headerlink" title="用 ref 访问另一个组件的 Dom 节点"></a>用 ref 访问另一个组件的 Dom 节点</h3><p>React 不允许你使用 ref 在自己创建的组件中<br>但是你可以将 ref’转发’给一个子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; forwardRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyInput</span> = <span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> &#123;<span class="hljs-attr">...props</span>&#125; <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> /&gt;</span></span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>它是这样工作的:</p><ol><li><MyInput ref={inputRef} /> 告诉 React 将对应的 DOM 节点放入 inputRef.current 中。但是，这取决于 MyInput 组件是否允许这种行为， 默认情况下是不允许的。</li><li>MyInput 组件是使用 forwardRef 声明的。 这让从上面接收的 inputRef 作为第二个参数 ref 传入组件，第一个参数是 props 。</li><li>MyInput 组件将自己接收到的 ref 传递给它内部的<code>&lt;input&gt;</code>。</li></ol><h3 id="一些存在的问题"><a href="#一些存在的问题" class="headerlink" title="一些存在的问题"></a>一些存在的问题</h3><p>有的时候 React 对 Dom 的更改不是立即的，所以使用 Ref 改变 Dom 的时候会发生错误，所以你需要让 Dom 更改立即执行<br>你需要利用 flushSync 将更改立即执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; flushSync &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;React&quot;</span>;<br><span class="hljs-title function_">flushSync</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setTodos</span>([...todos, newTodo]);<br>&#125;);<br>listRef.<span class="hljs-property">current</span>.<span class="hljs-property">lastChild</span>.<span class="hljs-title function_">scrollIntoView</span>();<br></code></pre></td></tr></table></figure><h3 id="使用-ref-操作-Dom-的最佳实践"><a href="#使用-ref-操作-Dom-的最佳实践" class="headerlink" title="使用 ref 操作 Dom 的最佳实践"></a>使用 ref 操作 Dom 的最佳实践</h3><p>Refs 是一个应急方案。你应该只在你必须“跳出 React”时使用它们。这方面的常见示例包括管理焦点、滚动位置或调用 React 未暴露的浏览器 API。<br>如果你只是使用聚焦，滚动等非破坏性的操作，那并没有什么大碍。<br>但是如果尝试手动修改 Dom 元素，很可能 React 不知道你做了什么操作从而出现问题<br>所以你只能<strong>修改 React 没有理由更新的部分 DOM。</strong></p><h3 id="摘要-3"><a href="#摘要-3" class="headerlink" title="摘要"></a>摘要</h3><ul><li>Refs 是一个通用概念，但大多数情况下你会使用它们来保存 DOM 元素。</li><li>你通过传递 <div ref={myRef}> 指示 React 将 DOM 节点放入 myRef.current。</li><li>通常，你会将 refs 用于非破坏性操作，例如聚焦、滚动或测量 DOM 元素。</li><li>默认情况下，组件不暴露其 DOM 节点。 您可以通过使用 forwardRef 并将第二个 ref 参数传递给特定节点来暴露 DOM 节点。</li><li>使用 flushSync 立即更新 Dom</li><li>避免更改由 React 管理的 DOM 节点。</li><li>如果你确实修改了 React 管理的 DOM 节点，请修改 React 没有理由更新的部分。</li></ul><h2 id="使用-Effects-让你的-React-和-React-以外的内容同步"><a href="#使用-Effects-让你的-React-和-React-以外的内容同步" class="headerlink" title="使用 Effects 让你的 React 和 React 以外的内容同步"></a>使用 Effects 让你的 React 和 React 以外的内容同步</h2><p>Effects 让你在渲染后运行一些代码，这样你就可以将你的组件与 React 之外的一些系统同步。</p><h3 id="如何编写-Effect"><a href="#如何编写-Effect" class="headerlink" title="如何编写 Effect"></a>如何编写 Effect</h3><p><strong>Step1：声明一个 Effect</strong><br>首先你得导入<br><code>import &#123; useEffect &#125; from &#39;react&#39;</code></p><p>其次在组件的顶层调用它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// Code here will run after *every* render</span><br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是一个播放器的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState, useRef, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">VideoPlayer</span>(<span class="hljs-params">&#123; src, isPlaying &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (isPlaying) &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">play</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">pause</span>();<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;src&#125;</span> <span class="hljs-attr">loop</span> <span class="hljs-attr">playsInline</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlaying, setIsPlaying] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsPlaying(!isPlaying)&#125;&gt;</span><br><span class="language-xml">        &#123;isPlaying ? &quot;Pause&quot; : &quot;Play&quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">VideoPlayer</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isPlaying</span>=<span class="hljs-string">&#123;isPlaying&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>在此示例中，您同步到 React 状态的“外部系统”是浏览器媒体 API。您可以使用类似的方法将遗留的非 React 代码（如 jQuery 插件）包装到声明性 React 组件中。</p><p><strong>Step2：精确你的 Effect 的依赖</strong><br>默认情况下，效果在每次渲染后运行。通常，这不是您想要的：</p><ul><li>有时，它很慢。与外部系统同步并不总是即时的，因此除非必要，否则您可能希望跳过它。例如，您不想在每次击键时都重新连接到聊天服务器</li><li>有时候，这是错误的。例如，您不想在每次击键时触发组件淡入动画。动画应该只在组件第一次出现时播放一次。</li></ul><p>所以你需要这样写<code>useEffect(() =&gt; &#123;&#125;，[dependencies]);</code><br>dependencies 是你需要作为判断的依赖<br>这是一个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">VideoPlayer</span>(<span class="hljs-params">&#123; src, isPlaying &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (isPlaying) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Calling video.play()&quot;</span>);<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">play</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Calling video.pause()&quot;</span>);<br>      ref.<span class="hljs-property">current</span>.<span class="hljs-title function_">pause</span>();<br>    &#125;<br>  &#125;, [isPlaying]);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;src&#125;</span> <span class="hljs-attr">loop</span> <span class="hljs-attr">playsInline</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlaying, setIsPlaying] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;text&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setText(e.target.value)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setIsPlaying(!isPlaying)&#125;&gt;</span><br><span class="language-xml">        &#123;isPlaying ? &quot;Pause&quot; : &quot;Play&quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">VideoPlayer</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">isPlaying</span>=<span class="hljs-string">&#123;isPlaying&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子中的 Effect 后面的[]中写入了 isplaying，所以如果第二次渲染中 isplaying 和第一次的 isplaying 一致，那么 Effect 就不会执行<br><strong>注意：</strong></p><ul><li>你的依赖项不能是‘稳定的对象’，比如说 ref 和 setState 等等具有稳定身份的对象</li></ul><p><strong>Step3：请清除 Effect</strong></p><p>假如你做了一个聊天室的组件，需要接入聊天室的时候连接一个聊天室<br>你也觉得每次重新渲染再接入聊天室很麻烦，所以添加的依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>  connection.<span class="hljs-title function_">connect</span>();<br>&#125;, []);<br></code></pre></td></tr></table></figure><p>但是想想看，ChatRoom 组件是具有许多不同屏幕的更大应用程序的一部分。用户在 ChatRoom 页面开始他们的旅程。该组件安装并调用 connection.connect() 。然后想象用户导航到另一个屏幕——例如，到“设置”页面。 ChatRoom 组件卸载。最后，用户单击“返回”， ChatRoom 再次挂载。这将建立第二个连接——但第一个连接从未被破坏！当用户在应用程序中导航时，连接会不断堆积。</p><blockquote><p>为了快速发现这个问题，React 在开发过程中会在初始安装后立即重新安装每个组件，也就是调用组件两次</p></blockquote><p>所以为了解决这个问题，你可以这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>();<br>  connection.<span class="hljs-title function_">connect</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;;<br>&#125;, []);<br></code></pre></td></tr></table></figure><p>每次 Effect 再次运行之前，React 都会调用你的清理函数</p><p>当你异步使用 Effect 获取内容的时候，你通常需要清除没用的东西<br>你需要使用 ingore</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (!ignore) &#123;<br>  <span class="hljs-title function_">setBio</span>(result);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>  ignore = <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这样当一个请求发送后，再次调用的时候将不会触发 Effect</p><h3 id="摘要-4"><a href="#摘要-4" class="headerlink" title="摘要"></a>摘要</h3><ul><li>与事件不同，效果是由渲染本身而不是特定交互引起的。</li><li>Effects 让您可以将组件与某些外部系统（第三方 API、网络等）同步。</li><li>默认情况下，效果在每次渲染后运行（包括初始渲染）。</li><li>如果 React 的所有依赖项都具有与上次渲染期间相同的值，则 React 将跳过 Effect。</li><li>你不能“选择”你的依赖。它们由 Effect 中的代码决定。</li><li>空依赖数组 ( [] ) 对应组件“挂载”，即被添加到屏幕。</li><li>在严格模式下，React 会两次挂载组件（仅在开发中！）以对您的 Effect 进行压力测试。</li><li>如果你的 Effect 因为重新挂载而中断，你需要实现一个清理功能。</li><li>React 将在 Effect 下次运行之前以及卸载期间调用您的清理函数。</li></ul><h2 id="你可能不需要-Effect"><a href="#你可能不需要-Effect" class="headerlink" title="你可能不需要 Effect"></a>你可能不需要 Effect</h2><ul><li>如果您可以在渲染期间计算某些东西，则不需要 Effect。</li><li>要缓存昂贵的计算，请添加 useMemo 而不是 useEffect 。</li><li>要重置整个组件树的状态，请将不同的 key 传递给它。</li><li>要重置特定位的状态以响应道具更改，请在渲染期间设置它。</li><li>因为显示组件而运行的代码应该在 Effects 中，其余的应该在事件中。</li><li>如果您需要更新多个组件的状态，最好在单个事件期间执行。</li><li>每当您尝试同步不同组件中的状态变量时，请考虑提升状态。</li><li>您可以使用 Effects 获取数据，但您需要实施清理以避免竞争条件。</li></ul><p>如果你想看一下这里案例，请点击<a href="https://react.docschina.org/learn/you-might-not-need-an-effect">这里</a></p><h2 id="Effect-的反应周期和依赖项"><a href="#Effect-的反应周期和依赖项" class="headerlink" title="Effect 的反应周期和依赖项"></a>Effect 的反应周期和依赖项</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&quot;https://localhost:1234&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId &#125;</span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, [roomId]);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个简单的连接服务器的 Effect</p><p>它指定了什么时候开始同步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>connection.<span class="hljs-title function_">connect</span>();<br></code></pre></td></tr></table></figure><p>它也指定了如何停止同步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">connection.<span class="hljs-title function_">disconnect</span>();<br></code></pre></td></tr></table></figure><p>从直觉上我们会想这个组件只会在挂载和卸载的时候同步与取消同步<br><strong>但是实际上并不是这样</strong></p><p>这个组件每当 roomId 不同的时候都会重新同步你的 Effect<br>当然它不仅仅会同步新的 Effect，它也会清理旧的 Effect,就因为<code>connection.disconnect();</code></p><p>以前，您是从组件的角度思考的。当您从组件的角度来看时，很容易将 Effects 视为在特定时间触发的“回调”或“生命周期事件”，例如“渲染后”或“卸载前”。这种思维方式很快就会变得复杂，所以最好避免。</p><p><strong>相反，始终专注于一次启动/停止循环。组件是挂载、更新还是卸载都无关紧要。您需要做的就是描述如何开始同步以及如何停止同步。如果你做得好，你的 Effect 将能够根据需要多次启动和停止。</strong></p><h3 id="每个-Effect-代表一个单独的同步过程"><a href="#每个-Effect-代表一个单独的同步过程" class="headerlink" title="每个 Effect 代表一个单独的同步过程"></a>每个 Effect 代表一个单独的同步过程</h3><p><strong>代码中的每一个 Effect 都应该代表一个单独且独立的同步过程</strong></p><p>如果多个 Effect 不会相互影响，那么把他们分开是一个好的选择。<br>另一方面，如果将一个内聚的逻辑片段拆分成单独的 Effect，代码可能看起来“更干净”，但会更难维护。这就是为什么你应该考虑进程是相同的还是分开的，而不是代码是否看起来更清晰。</p><h3 id="关于依赖项"><a href="#关于依赖项" class="headerlink" title="关于依赖项"></a>关于依赖项</h3><p>具体的来说，你需要将依赖项得是<strong>反应性</strong>的<br>而传入 Effect 的组件主体中的所有变量都是<strong>反应性</strong>的，都应该作为依赖项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId, selectedServerUrl &#125;</span>) &#123;<br>  <span class="hljs-comment">// roomId is reactive</span><br>  <span class="hljs-keyword">const</span> settings = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">SettingsContext</span>); <span class="hljs-comment">// settings is reactive</span><br>  <span class="hljs-keyword">const</span> serverUrl = selectedServerUrl ?? settings.<span class="hljs-property">defaultServerUrl</span>; <span class="hljs-comment">// serverUrl is reactive</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId); <span class="hljs-comment">// Your Effect reads roomId and serverUrl</span><br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, [roomId, serverUrl]); <span class="hljs-comment">// So it needs to re-synchronize when either of them changes!</span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>比如说上面的 roomId 和 serverUrl<br>换句话说，Effects 对来自组件主体的所有值做出“反应”。</p><blockquote><p>React 会帮你检查是否将每个反应值指定为依赖项，叫做 lint 错误</p></blockquote><h4 id="不想同步怎么办"><a href="#不想同步怎么办" class="headerlink" title="不想同步怎么办"></a>不想同步怎么办</h4><p>如果 serverUrl 和 roomId 不依赖于渲染并且始终具有相同的值，则可以将它们移到组件之外。现在它们不需要是依赖项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&quot;https://localhost:1234&quot;</span>; <span class="hljs-comment">// serverUrl is not reactive</span><br><span class="hljs-keyword">const</span> roomId = <span class="hljs-string">&quot;general&quot;</span>; <span class="hljs-comment">// roomId is not reactive</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, []); <span class="hljs-comment">// ✅ All dependencies declared</span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>您也可以将它们移动到 Effect 中。它们不是在渲染过程中计算的，所以它们不是反应式的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> serverUrl = <span class="hljs-string">&quot;https://localhost:1234&quot;</span>; <span class="hljs-comment">// serverUrl is not reactive</span><br>    <span class="hljs-keyword">const</span> roomId = <span class="hljs-string">&quot;general&quot;</span>; <span class="hljs-comment">// roomId is not reactive</span><br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      connection.<span class="hljs-title function_">disconnect</span>();<br>    &#125;;<br>  &#125;, []); <span class="hljs-comment">// ✅ All dependencies declared</span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>你不能“选择”你的依赖。您的依赖项必须包括您在 Effect 中读取的每个反应值。 linter 强制执行此操作。有时这可能会导致无限循环等问题，并导致您的 Effect 过于频繁地重新同步。不要通过抑制 linter 来解决这些问题！以下是尝试的方法：</p><ul><li>检查您的 Effect 是否代表一个独立的同步过程。如果您的 Effect 不同步任何东西，它可能是不必要的。如果它同步几个独立的东西，把它分开。</li><li>如果你想读取道具或状态的最新值而不对其做出“反应”并重新同步效果，你可以将你的效果分成一个反应部分（你将保留在效果中）和一个非反应部分（您将提取到称为效果事件的东西中）。</li><li>避免依赖对象和函数作为依赖项。如果您在渲染期间创建对象和函数，然后从 Effect 中读取它们，则它们在每次渲染时都会不同。这将导致您的效果器每次都重新同步。</li></ul><p>总而言之，如果 Effect 使用了渲染过程中改变的值，就得将其放入依赖项</p><h3 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h3><ul><li>组件可以挂载、更新和卸载。</li></ul><ul><li>每个 Effect 都有一个独立于周围组件的生命周期。</li><li>每个 Effect 都描述了一个可以启动和停止的单独同步过程。</li><li>当您编写和阅读 Effects 时，请从每个单独的 Effect 的角度（如何开始和停止同步）而不是从组件的角度（它如何安装、更新或卸载）思考。</li><li>在组件体内声明的值是“反应性的”。</li><li>反应值应该重新同步效果，因为它们会随时间变化。</li><li>linter 验证 Effect 中使用的所有反应值是否都指定为依赖项。</li><li>linter 标记的所有错误都是合法的。总有一种方法可以修复代码以不违反规则。</li></ul><h2 id="事件处理程序与-Effect"><a href="#事件处理程序与-Effect" class="headerlink" title="事件处理程序与 Effect"></a>事件处理程序与 Effect</h2><p>事件处理程序是用户对应用有特殊的交互才执行的代码<br>Effect 是用户需要应用的时候就执行的代码</p><p>直观的说：事件处理程序总是“手动”触发的，效果器是“自动”的。</p><h3 id="从-Effect-中提取非反应性逻辑"><a href="#从-Effect-中提取非反应性逻辑" class="headerlink" title="从 Effect 中提取非反应性逻辑"></a>从 Effect 中提取非反应性逻辑</h3><p>试想一下，一个聊天室有 Id 和 theme 两个反应性变量，你运用 Effect 的时候必须将其都放入依赖项，可是你并不希望每次更换主题都重新链接一下聊天室<br>这个时候你就需要用到 useEffectEvent：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChatRoom</span>(<span class="hljs-params">&#123; roomId, theme &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> onConnected = <span class="hljs-title function_">useEffectEvent</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">showNotification</span>(<span class="hljs-string">&quot;Connected!&quot;</span>, theme);<br>  &#125;);<br>  <span class="hljs-comment">//此处， onConnected 称为效果事件。它是 Effect 逻辑的一部分，但它的行为更像一个事件处理程序。它内部的逻辑不是反应式的，它总是“看到”你的道具和状态的最新值。</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-title function_">createConnection</span>(serverUrl, roomId);<br>    connection.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;connected&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">onConnected</span>();<br>    &#125;);<br>    connection.<span class="hljs-title function_">connect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> connection.<span class="hljs-title function_">disconnect</span>();<br>  &#125;, [roomId]); <span class="hljs-comment">// ✅ All dependencies declared</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个代码中，我们把 theme 放到了一个 useEffectEvent 的函数中，这样在 useEffect 中就可以触发，也不需要添加依赖项</p><p>Effect Events 让您可以修复许多您可能想要抑制依赖性 linter 的模式。</p><h3 id="useEffectEvent-使用非常有限"><a href="#useEffectEvent-使用非常有限" class="headerlink" title="useEffectEvent 使用非常有限"></a>useEffectEvent 使用非常有限</h3><ul><li>Only call them from inside Effects.</li><li>Never pass them to other components or Hooks.</li><li>始终直接在使用它们的 Effect 旁边声明效果事件</li></ul><h3 id="摘要-5"><a href="#摘要-5" class="headerlink" title="摘要"></a>摘要</h3><ul><li>事件处理程序运行以响应特定的交互。</li><li>您可以将非反应性逻辑从 Effects 移动到 Effect Events。</li><li>只要需要同步，效果就会运行</li><li>事件处理程序中的逻辑不是反应性的。</li><li>Effects 内部的逻辑是反应式的。</li><li>您可以将非反应性逻辑从 Effects 移动到 Effect Events。</li><li>仅从 Effects 内部调用 Effect Events。</li><li>不要将 Effect Events 传递给其他组件或 Hooks。</li></ul><h2 id="关于依赖项-1"><a href="#关于依赖项-1" class="headerlink" title="关于依赖项"></a>关于依赖项</h2><p>这里是一些关于依赖项的问题</p><ul><li>依赖项始终与代码匹配</li><li>当您对依赖项不满意时，您需要编辑的是代码。</li><li>抑制 linter 会导致非常混乱的错误，您应该始终避免它。</li><li>要删除依赖项，您需要向 linter“证明”它不是必需的。</li><li>如果某些代码应该运行以响应特定的交互，请将该代码移至事件处理程序。</li><li>如果您的 Effect 的不同部分因不同原因需要重新运行，请将其拆分为多个 Effect。</li><li>如果你想根据以前的状态更新一些状态，传递一个更新函数。</li><li>如果您想读取最新值而不对其进行“反应”，请从您的效果中提取一个效果事件。</li><li>在 JavaScript 中，如果对象和函数是在不同时间创建的，则它们被认为是不同的。</li><li>尽量避免对象和函数依赖。将它们移到组件外或 Effect 内</li></ul><p>具体实例可以查阅<a href="https://react.docschina.org/learn/removing-effect-dependencies">官方文档</a></p><h2 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h2><p><strong>自定义 Hook 让你可以在组件之间共享逻辑，将你组件相同的逻辑移到你的 Hook 中去</strong></p><p>这是一个自定义 Hook 的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useCounter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> id = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c + <span class="hljs-number">1</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">clearInterval</span>(id);<br>  &#125;, []);<br>  <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>记住你的 Hook 需要有一个返回值以便你在你的应用中可以使用</p><p>并且在你的 app.js 中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useCounter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useCounter.js&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">useCounter</span>();<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Seconds passed: &#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自定义 Hook 必须以 use 开头，就像 React 组件必须以大写字母开头</strong></p><p><strong>自定义 Hook 只共享状态逻辑而非状态本身，确保你的 Hook 目的明确</strong></p><p><strong>你可以将反应值从一个 Hook 传递到另一个 Hook，并且它们会保持最新。</strong></p><p><strong>每次您的组件重新渲染时，所有 Hooks 都会重新运行。</strong></p><p><strong>你的自定义 Hooks 的代码应该是纯净的，就像你的组件的代码一样</strong></p><p><strong>将自定义 Hook 接收到的事件处理程序包装到 Effect Events 中。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>自此，React 的初步内容学习完毕，前面简单后面难，并且写到后面肉眼可见的简陋（主要是自己也没看太懂）</p><p>参考内容<a href="https://react.docschina.org/learn">React 原文档</a></p><p>下一步继续深入 React，顺带学习学习 Next.js</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS的一些入门难点</title>
    <link href="/2023/04/15/JS%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%A5%E9%97%A8%E9%9A%BE%E7%82%B9/"/>
    <url>/2023/04/15/JS%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%A5%E9%97%A8%E9%9A%BE%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><blockquote><p>所有的函数都是对象</p></blockquote><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>原型分为俩种，一种叫做显式原型，是函数的<code>prototype</code>属性，称为原型，而原型指向一个叫做原型对象的对象，而这个对象所包含的属性和方法都可以提供给这个函数。<br>另外一种叫做隐式原型，是对象拥有的<code>__proto__</code>属性，而这个属性指向的是正是构造函数的<code>prototype</code>属性，也就是指向原型对象。</p><blockquote><p>原型链是一种关系</p></blockquote><h3 id="原型链-1"><a href="#原型链-1" class="headerlink" title="原型链"></a>原型链</h3><p>试想一下，原型对象也是对象，那么它肯定也有<code>__proto__</code>属性，指向原型对象的原型对象，那么原型链的概念就孕育而生了。通过<code>__proto__</code>，一个函数没有的属性，到它的原型对象上寻找，还是没有就通过<code>__prtot__</code>到原型对象的原型对象上去找，最后一直到最上层。</p><h2 id="JS-的执行机制"><a href="#JS-的执行机制" class="headerlink" title="JS 的执行机制"></a>JS 的执行机制</h2><blockquote><p>前言：Javascript 是一门单线程语言，一切“多线程”的 JS 都是由单线程模拟出来的</p></blockquote><p>总所周知，同步和异步是 JS 的俩个任务执行方式，这俩种任务的执行方式就构成了 JS 的最基础事件循环：</p><ul><li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入 Event Table 并注册函数。</li><li>当指定的事情完成时，Event Table 会将这个函数移入 Event Queue。</li><li>主线程内的任务执行完毕为空，会去 Event Queue 读取对应的函数，进入主线程执行。</li><li>上述过程会不断重复，也就是常说的 Event Loop(事件循环)。</li></ul><hr><p>而除了广义的同步任务和异步任务，我们对任务还有更精细的定义：</p><ul><li>macro-task(宏任务)：包括整体代码 script，setTimeout，setInterval</li><li>micro-task(微任务)：Promise，process.nextTick（node.js 版的“setTimeout”）</li></ul><p>首次进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setTimeout&quot;</span>);<br>&#125;);<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;promise&quot;</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;then&quot;</span>);<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;console&quot;</span>);<br><span class="hljs-comment">//promise</span><br><span class="hljs-comment">//console</span><br><span class="hljs-comment">//then</span><br><span class="hljs-comment">//setTimeout</span><br></code></pre></td></tr></table></figure><ol><li>这段代码作为宏任务，进入主线程。</li><li>先遇到 setTimeout，那么将其回调函数注册后分发到宏任务 Event Queue。(注册过程与上同，下文不再描述)</li><li>接下来遇到了 Promise，new Promise 立即执行，then 函数分发到微任务 Event Queue。</li><li>遇到 console.log()，立即执行。</li><li>好啦，整体代码 script 作为第一个宏任务执行结束，看看有哪些微任务？我们发现了 then 在微任务 Event Queue 里面，执行。</li><li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务 Event Queue 开始。我们发现了宏任务 Event Queue 中 setTimeout 对应的回调函数，立即执行。</li><li>结束。</li></ol><p>最后：<strong>JS 是一门单线程语言，Event Loop 是 JS 的执行机制</strong></p><h2 id="call，apply，bind-实现"><a href="#call，apply，bind-实现" class="headerlink" title="call，apply，bind 实现"></a>call，apply，bind 实现</h2><p>在讨论 call apply bind 前，有一个更重要的知识需要我们去学习，那就是 JS 中<code>this</code>的指向问题，理解了<code>this</code>call apply bind 就是小菜一碟</p><h3 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h3><blockquote><p><strong>一句话总结，谁调用 this，this 就指向谁</strong></p></blockquote><h4 id="this-的绑定规则"><a href="#this-的绑定规则" class="headerlink" title="this 的绑定规则"></a>this 的绑定规则</h4><h5 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h5><ul><li>全局环境下，this 默认绑定到 window</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-variable language_">window</span>); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li>函数独立调用时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-variable language_">window</span>);<br>&#125;<br><span class="hljs-title function_">foo</span>(); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li>被嵌套的函数独立调用时，this 默认绑定到 window</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">foo</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>    &#125;<br>    <span class="hljs-title function_">test</span>();<br>  &#125;,<br>&#125;;<br>obj.<span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure><p><code>上述代码中 text</code>函数独立调用所以默认绑定到 window</p><h5 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h5><p>一般地,被直接对象所包含的函数调用，也被称为方法地调用，this 隐式绑定到该直接对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;<br>    a : <span class="hljs-number">1</span>;<br>    <span class="hljs-attr">foo</span>: foo,<br>    obj2 : &#123;<br>        <span class="hljs-attr">a</span>:<span class="hljs-number">2</span>,<br>        <span class="hljs-attr">foo</span>:foo<br>    &#125;<br>&#125;<br><span class="hljs-comment">//foo()函数的直接对象是obj1,this隐式绑定到obj1</span><br>obj1.<span class="hljs-title function_">foo</span>();<span class="hljs-comment">//1</span><br><span class="hljs-comment">//foo()函数的直接对象是obj2,this隐式绑定到obj2</span><br>obj1.<span class="hljs-property">obj2</span>.<span class="hljs-title function_">foo</span>();<span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><p>但是隐式绑定会出现一种情况，叫做<strong>隐式丢失</strong></p><h5 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">foo</span>: foo,<br>&#125;;<br><span class="hljs-comment">//把obj.foo赋予别名bar，造成了隐式丢失，因为只是把foo()函数赋给了bar，而bar与obj对象则毫无关系</span><br><span class="hljs-keyword">var</span> bar = obj.<span class="hljs-property">foo</span>;<br><span class="hljs-title function_">bar</span>(); <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><p>隐式丢失指的是被隐式绑定的对象丢失了绑定的对象，从而默认绑定到了 window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-title function_">fn</span>();<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">foo</span>: foo,<br>&#125;;<br><span class="hljs-comment">//把obj.foo当做参数传递给bar函数时,有隐式的函数赋值 fn = obj.foo,只是把foo函数赋给了fn,而fn与obj对象毫无关系</span><br><span class="hljs-title function_">bar</span>(obj.<span class="hljs-property">foo</span>); <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">foo</span>: foo,<br>&#125;;<br><span class="hljs-built_in">setTimeout</span>(obj.<span class="hljs-property">foo</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> o = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">foo</span>: foo &#125;;<br><span class="hljs-keyword">var</span> p = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">4</span> &#125;;<br>o.<span class="hljs-title function_">foo</span>(); <span class="hljs-comment">//3;</span><br><span class="hljs-comment">//将o.foo函数赋值给p.foo函数，然后立即执行。相当于仅仅是foo()函数的立即调用</span><br>(p.<span class="hljs-property">foo</span> = o.<span class="hljs-property">foo</span>)(); <span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><h5 id="new-绑定"><a href="#new-绑定" class="headerlink" title="new 绑定"></a>new 绑定</h5><p>一个函数或者方法调用之前带有关键词 new，它就构成构造函数调用，对于 this 绑定来说，称为 new 绑定</p><ol><li>没有 return 或者 return 没有返回值，就会使用这个新对象作为调用结果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fn1</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test); <span class="hljs-comment">//&#123;a:2&#125;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fn2</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test); <span class="hljs-comment">//&#123;a:2&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用构造函数显示地使用 return 语句返回一个对象，那么调用表达式的值就是这个对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;<br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fn</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test); <span class="hljs-comment">//&#123;a:1&#125;</span><br></code></pre></td></tr></table></figure><h5 id="显示绑定"><a href="#显示绑定" class="headerlink" title="显示绑定"></a>显示绑定</h5><p>说了这么多 this 的绑定和丢失，本节笔记最重要的就是这个显示绑定，也就是<code>apply``call``bind</code>三大显示绑定改变 this 指向的函数</p><h3 id="三大函数"><a href="#三大函数" class="headerlink" title="三大函数"></a>三大函数</h3><p><code>call 函数接收多个参数，第一个就是this的指向，后面多个参数是为函数本身的参数</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;一个&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">allName</span>(<span class="hljs-params">firstName, lastName</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我的全名是“<span class="hljs-subst">$&#123;firstName&#125;</span><span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span><span class="hljs-subst">$&#123;lastName&#125;</span>”`</span>);<br>&#125;<br><span class="hljs-comment">// 很明显此时allName函数是没有name属性的</span><br><span class="hljs-title function_">allName</span>(<span class="hljs-string">&quot;我是&quot;</span>, <span class="hljs-string">&quot;前端&quot;</span>); <span class="hljs-comment">//我的全名是“我是前端”  this指向window</span><br>allName.<span class="hljs-title function_">call</span>(obj, <span class="hljs-string">&quot;我是&quot;</span>, <span class="hljs-string">&quot;前端&quot;</span>); <span class="hljs-comment">//我的全名是“我是一个前端” this指向obj</span><br></code></pre></td></tr></table></figure><p><code>apply</code>函数接收俩个参数，第一个和 call 一样是 this 的指向，第二个是一个数组包含函数的所有参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">allName.<span class="hljs-title function_">apply</span>(obj, [<span class="hljs-string">&quot;我是&quot;</span>, <span class="hljs-string">&quot;前端&quot;</span>]); <span class="hljs-comment">//我的全名是“我是一个前端” this指向obj</span><br></code></pre></td></tr></table></figure><p><code>bind</code>接收多个参数，第一个 this 的指向，后面多个参数是函数本身的参数，它和 call apply 不同的是它执行时不会直接执行改变 this 后的函数，而是返回一个函数</p><blockquote><p>多个参数可以生成不同 this 绑定后在传递</p></blockquote><h4 id="手撕"><a href="#手撕" class="headerlink" title="手撕"></a>手撕</h4><p><strong>call</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mbs = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;麻不烧&quot;</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> text = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;yy&quot;</span>,<br>&#125;; <span class="hljs-comment">//测试案例</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">say</span>(<span class="hljs-params">prefix, age</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>,my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,i am <span class="hljs-subst">$&#123;age&#125;</span> year old`</span>);<br>&#125;<br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mycall</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj, ...args</span>) &#123;<br>  obj = obj || <span class="hljs-variable language_">window</span>; <span class="hljs-comment">//传入非真值的时候换成全局对象</span><br>  <span class="hljs-keyword">const</span> only = <span class="hljs-title class_">Symbol</span>(); <span class="hljs-comment">//ES6中的独一值</span><br>  obj[only] = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">//改变this的指向,this指的是调用它的函数</span><br>  <span class="hljs-keyword">return</span> (res = obj[only](...args));<br>  <span class="hljs-keyword">delete</span> obj[only];<br>  <span class="hljs-keyword">return</span> res; <span class="hljs-comment">//返回函数的结果</span><br>&#125;;<br><br>say.<span class="hljs-title function_">mycall</span>(mbs, <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">16</span>); <span class="hljs-comment">//hello,my name is 麻不烧,i am 16 year old</span><br><br>say.<span class="hljs-title function_">mycall</span>(text, <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">16</span>); <span class="hljs-comment">//hello,my name is yy,i am 16 year old</span><br></code></pre></td></tr></table></figure><p><strong>apply</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//apply的实现和call异曲同工</span><br><span class="hljs-keyword">const</span> mbs = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;麻不烧&quot;</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> text = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;yy&quot;</span>,<br>&#125;; <span class="hljs-comment">//测试案例</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">say</span>(<span class="hljs-params">prefix, age</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>,my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,i am <span class="hljs-subst">$&#123;age&#125;</span> year old`</span>);<br>&#125;<br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myapply</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj, args</span>) &#123;<br>  obj = obj || <span class="hljs-variable language_">window</span>; <span class="hljs-comment">//传入非真值的时候换成全局对象</span><br>  <span class="hljs-keyword">const</span> only = <span class="hljs-title class_">Symbol</span>(); <span class="hljs-comment">//ES6中的独一值</span><br>  obj[only] = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">//改变this的指向,this指的是调用它的函数</span><br>  <span class="hljs-keyword">let</span> res = obj[only](...args);<br>  <span class="hljs-keyword">delete</span> obj[only];<br>  <span class="hljs-keyword">return</span> res; <span class="hljs-comment">//返回函数的结果</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>bind</strong><br>bind 函数和 call 和 apply 还是有一点的区别，除了改变 this 以外，还要返回一个函数，还得支持柯里化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mybind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj, ...outargs</span>) &#123;<br>  <span class="hljs-comment">//前面都一样</span><br>  obj = obj || <span class="hljs-variable language_">window</span>; <span class="hljs-comment">//传入非真值的时候换成全局对象</span><br>  <span class="hljs-keyword">const</span> only = <span class="hljs-title class_">Symbol</span>(); <span class="hljs-comment">//ES6中的独一值</span><br>  obj[only] = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">//改变this的指向,this指的是调用它的函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...innerargs</span>) &#123;<br>    <span class="hljs-keyword">const</span> res = obj[only](...outargs, ...innerargs); <span class="hljs-comment">//把第一次传入和第二次传入的参数再传进函数，属于柯里化，而且用上了闭包的思路</span><br>    <span class="hljs-keyword">return</span> res;<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="函数的柯里化"><a href="#函数的柯里化" class="headerlink" title="函数的柯里化"></a>函数的柯里化</h2><p><strong>函数的柯里化指的是将一个函数从多参数传递变成单参数传递，可以增加函数的普适性同时也会增加函数的复杂度</strong></p><h3 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h3><p>比如说书写正则表达式，对于不同的文本需要不同的正则来写，但是总是存在类似的文本需要相同的正则表达式来翻译。不将函数柯里化的话我们就需要书写很多很多的正则来套文本，但利用柯里化就可以先传入正则表达式再传入文本，变得很方便</p><h3 id="手写一个函数的柯里化"><a href="#手写一个函数的柯里化" class="headerlink" title="手写一个函数的柯里化"></a>手写一个函数的柯里化</h3><p>对于一般函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">//6</span><br><span class="hljs-comment">//柯里化</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum1</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum2</span>(<span class="hljs-params">y</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum3</span>(<span class="hljs-params">z</span>) &#123;<br>      <span class="hljs-keyword">return</span> x + y + z;<br>    &#125;;<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">let</span> sum = <span class="hljs-title function_">sum1</span>(<span class="hljs-number">1</span>);<br><span class="hljs-title function_">sum</span>(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>); <span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure><p>但是这种柯里化只能对于一小部分的函数适用，为了更大的适用范围，会更复杂的柯里化</p><blockquote><p>能力有限，依靠百度来完成高级柯里化</p></blockquote><p>思路是首先明白柯里化是分步传参，复杂的情况下可能好几步也可能一下全部传入，所以参数传入的数目要先记住，其次当传参不足的时候，得返回新的函数去接受新的参数，有点递归的意思。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//柯里化</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">curry</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-keyword">const</span> funcArgsLength = fn.<span class="hljs-property">length</span>; <span class="hljs-comment">//记录参数数目</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">curried</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-comment">//...将参数转化为数组</span><br>    <span class="hljs-keyword">if</span> (args.<span class="hljs-property">length</span> &lt; <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-comment">//比较参数数目多少，参数不足的时候返回一个新的函数去接受接下来的参数</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args1</span>) &#123;<br>        <span class="hljs-keyword">return</span> curried.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args.<span class="hljs-title function_">concat</span>(args1)); <span class="hljs-comment">//fn.apply(this,数组) 将数组内容当作参数传递给this的函数对象</span><br>      &#125;;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args);<br>    &#125;<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">let</span> curriedSum = <span class="hljs-title function_">curry</span>(sum);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curriedSum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// 6，仍然可以被正常调用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curriedSum</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// 6，对第一个参数的柯里化</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curriedSum</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)); <span class="hljs-comment">// 6，全柯里化</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
